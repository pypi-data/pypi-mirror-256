:py:mod:`pytomography.metadata`
===============================

.. py:module:: pytomography.metadata

.. autoapi-nested-parse::

   This module contains classes pertaining to metadata in PyTomography. Metadata classes contain required information for interpretting data; for example, metadata corresponding to an object (with object data stored in a ``torch.Tensor``) contains the voxel spacing and voxel dimensions.



Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   PET/index.rst
   SPECT/index.rst


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   metadata/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   pytomography.metadata.ObjectMeta
   pytomography.metadata.ProjMeta
   pytomography.metadata.SPECTObjectMeta
   pytomography.metadata.SPECTProjMeta
   pytomography.metadata.SPECTPSFMeta
   pytomography.metadata.PETLMProjMeta
   pytomography.metadata.PETTOFMeta




.. py:class:: ObjectMeta(dr, shape)

   Parent class for all different types of Object Space Metadata. In general, while this is fairly similar for all imaging modalities, required padding features/etc may be different for different modalities.


   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: ProjMeta(angles)

   Parent class for all different types of Projection Space Metadata. Implementation and required parameters will differ significantly between different imaging modalities.


   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: SPECTObjectMeta(dr, shape)

   Bases: :py:obj:`pytomography.metadata.metadata.ObjectMeta`

   Metadata for object space in SPECT imaging

   :param dr: List of 3 elements specifying voxel dimensions in cm.
   :type dr: list[float]
   :param shape: List of 3 elements [Lx, Ly, Lz] specifying the length of each dimension.
   :type shape: list[int]

   .. py:method:: compute_padded_shape()

      Computes the padded shape of an object required when rotating the object (to avoid anything getting cut off).




.. py:class:: SPECTProjMeta(projection_shape, angles, radii=None)

   Bases: :py:obj:`pytomography.metadata.metadata.ProjMeta`

   Metadata for projection space in SPECT imaging

   :param projection_shape: 2D shape of each projection
   :type projection_shape: Sequence
   :param angles: The angles for each 2D projection
   :type angles: Sequence
   :param radii: Specifies the radial distance of the detector corresponding to each angle in `angles`; only required in certain cases (i.e. PSF correction). Defaults to None.
   :type radii: Sequence, optional

   .. py:method:: compute_padded_shape()

      Computes the padded shape of an object required when rotating the object (to avoid anything getting cut off).




.. py:class:: SPECTPSFMeta(sigma_fit_params, sigma_fit = lambda r, a, b: a * r + b, kernel_dimensions = '2D', min_sigmas = 3)

   Metadata for PSF correction. PSF blurring is implemented using Gaussian blurring with :math:`\sigma(r) = f(r,p)` where :math:`r` is the distance from the detector, :math:`\sigma` is the width of the Gaussian blurring at that location, and :math:`f(r,p)` is the ``sigma_fit`` function which takes in additional parameters :math:`p` called ``sigma_fit_params``. (By default, ``sigma_fit`` is a linear curve). As such, :math:`\frac{1}{\sigma\sqrt{2\pi}}e^{-r^2/(2\sigma(r)^2)}` is the point spread function. Blurring is implemented using convolutions with a specified kernel size.

   :param sigma_fit_params: Parameters to the sigma fit function
   :type sigma_fit_params: float
   :param sigma_fit: Function used to model blurring as a function of radial distance. Defaults to a 2 parameter linear model.
   :type sigma_fit: function
   :param kernel_dimensions: If '1D', blurring is done seperately in each axial plane (so only a 1 dimensional convolution is used). If '2D', blurring is mixed between axial planes (so a 2D convolution is used). Defaults to '2D'.
   :type kernel_dimensions: str
   :param min_sigmas: This is the number of sigmas to consider in PSF correction. PSF are modelled by Gaussian functions whose extension is infinite, so we need to crop the Gaussian when computing this operation numerically. Note that the blurring width is depth dependent, but the kernel size used for PSF blurring is constant. As such, this parameter is used to fix the kernel size such that all locations have at least ``min_sigmas`` of a kernel size.
   :type min_sigmas: float, optional

   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: PETLMProjMeta(detector_ids, scanner_LUT, tof_meta = None, weights = None, detector_ids_sensitivity = None, weights_sensitivity = None)

   Metadata required for PET listmode modeling. PET listmode projection actually requires two different projectors: the system matrix that projects to all detected crystal pair LORs (which is denoted as :math:`H`) and the system matrix that projects to all valid LORs (denoted as :math:`\tilde{H}`). The system matrix :math:`H` is used for forward/back projection in reconstruction algorithms, while :math:`\tilde{H}` is used for computing the normalization image :math:`\tilde{H}^T 1`.
   :param detector_ids: :math:`N \times 2` (non-TOF) or :math:`N \times 3` (TOF) tensor that provides detector ID pairs (and TOF bin) for coincidence events. This information is used to construct :math:`H`.
   :type detector_ids: torch.Tensor
   :param scanner_LUT: scanner lookup table that provides spatial coordinates for all detector ID pairs
   :type scanner_LUT: torch.Tensor
   :param tof_meta: PET time-of-flight metadata used to modify :math:`H` for time of flight projection. If None, then time of flight is not used. Defaults to None.
   :type tof_meta: PETTOFMeta | None, optional
   :param weights: weights used to scale projections after forward projection and before back projection; these modify the system matrix :math:`H`. While such weights can be used to apply attenuation/normalization correction, they aren't required in the absence of randoms/scatter; these correction need only be performed using ``weights_sensitivity``. If provided, these weights must have the number of elements as the first dimension of ``detector_ids``. If none, then no scaling is done. Defaults to None.
   :type weights: torch.tensor | None, optional
   :param detector_ids_sensitivity: valid detector ids used to generate the sensitivity image :math:`\tilde{H}^T 1`. As such, these are used to construct :math:`\tilde{H}`. If None, then assumes all detector ids (specified by ``scanner_LUT``) are valid. Defaults to None.
   :type detector_ids_sensitivity: torch.tensor | None, optional
   :param weights_sensitivity: weights used for scaling projections in the computation of the sensitivity image, if the weights are given as :math:`w` then the sensitivty image becomes :math:`\tilde{H}^T w`; these modify the system matrix :math:`\tilde{H}`. These weights are used for attenuation/normalization correction. If ``detector_ids_sensitivity`` is provided, then ``weights_sensitivity`` should have the same shape. If ``detector_ids_sensitivity`` is not provided, then ``weights_sensitivity`` should be the same length as all possible combinations of detectors in the ``scanner_LUT``. If None, then no scaling is performed. Defaults to None.
   :type weights_sensitivity: torch.tensor | None, optional


.. py:class:: PETTOFMeta(num_bins, bin_width, fwhm, n_sigmas = 3, bin_type = 'symmetric')

   Class for PET time of flight metadata. Contains information such as spatial binning and resolution.

   :param num_bins: Number of bins used to discretize time of flight data
   :type num_bins: int
   :param bin_width: Bin width of time of flight bins in mm.
   :type bin_width: float
   :param fwhm: FWHM corresponding to TOF uncertainty in mm.
   :type fwhm: float
   :param n_sigmas: Number of sigmas to consider when using TOF projection. Defaults to 3.
   :type n_sigmas: float
   :param bin_type: How the bins are arranged. Currently, the only option is symmetry, which means the bins are distributed symmetrically (evenly on each side) between the center of all LOR pairs. Defaults to 'symmetric'.
   :type bin_type: str, optional


