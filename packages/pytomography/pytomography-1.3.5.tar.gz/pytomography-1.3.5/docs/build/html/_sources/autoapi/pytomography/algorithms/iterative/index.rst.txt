:py:mod:`pytomography.algorithms.iterative`
===========================================

.. py:module:: pytomography.algorithms.iterative

.. autoapi-nested-parse::

   This module contains classes that implement ordered-subset maximum liklihood iterative reconstruction algorithms.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pytomography.algorithms.iterative.OSML
   pytomography.algorithms.iterative.OSEMOSL
   pytomography.algorithms.iterative.BSREM
   pytomography.algorithms.iterative.OSEM
   pytomography.algorithms.iterative.KEM




.. py:class:: OSML(projections, system_matrix, object_initial = None, scatter = 0, prior = None)

   Parent class for all variants of ordered subset maximum liklihood algorithms. All child classes must implement the ``__call__`` method to perform reconstruction.

   :param projections: photopeak window projection data :math:`g` to be reconstructed
   :type projections: torch.Tensor
   :param system_matrix: system matrix that models the imaging system. In particular, corresponds to :math:`H` in :math:`g=Hf`.
   :type system_matrix: SystemMatrix
   :param object_initial: the initial object guess :math:`f^{0,0}`. If None, then initial guess consists of all 1s. Defaults to None.
   :type object_initial: torch.tensor[batch_size, Lx, Ly, Lz]
   :param scatter: estimate of scatter contribution :math:`s`. Defaults to 0.
   :type scatter: torch.Tensor
   :param prior: the Bayesian prior; used to compute :math:`\beta \frac{\partial V}{\partial f}`. If ``None``, then this term is 0. Defaults to None.
   :type prior: Prior, optional

   .. py:method:: get_subset_splits(n_subsets)

      Returns a list of subsets (where each subset contains indicies corresponding to different angles). For example, if the projections consisted of 6 total angles, then ``get_subsets_splits(2)`` would return ``[[0,2,4],[1,3,5]]``.

      :param n_subsets: number of subsets used in OSEM
      :type n_subsets: int

      :returns: list of index arrays for each subset
      :rtype: list


   .. py:method:: __call__(n_iters, n_subsets, callbacks = None)
      :abstractmethod:

      Abstract method for performing reconstruction: must be implemented by subclasses.

      :param n_iters: Number of iterations
      :type n_iters: int
      :param n_subsets: Number of subsets
      :type n_subsets: int
      :param callbacks: CallBacks to be evaluated after each subiteration. Defaults to None.
      :type callbacks: CallBack, optional



.. py:class:: OSEMOSL(projections, system_matrix, object_initial = None, scatter = 0, prior = None)

   Bases: :py:obj:`OSML`

   Implementation of the ordered subset expectation algorithm using the one-step-late method to include prior information: :math:`\hat{f}^{n,m+1} = \left[\frac{1}{H_m^T 1  + \beta \frac{\partial V}{\partial \hat{f}}|_{\hat{f}=\hat{f}^{n,m}}} H_m^T \left(\frac{g_m}{H_m\hat{f}^{n,m}+s}\right)\right] \hat{f}^{n,m}`.

   :param proj: projection data :math:`g` to be reconstructed
   :type proj: torch.Tensor
   :param system_matrix: System matrix :math:`H` used in :math:`g=Hf`.
   :type system_matrix: SystemMatrix
   :param object_initial: represents the initial object guess :math:`f^{0,0}` for the algorithm in object space
   :type object_initial: torch.tensor[batch_size, Lx, Ly, Lz]
   :param scatter: estimate of scatter contribution :math:`s`.
   :type scatter: torch.Tensor
   :param prior: the Bayesian prior; computes :math:`\beta \frac{\partial V}{\partial f}`. If ``None``, then this term is 0. Defaults to None.
   :type prior: Prior, optional

   .. py:method:: _set_recon_name(n_iters, n_subsets)

      Set the unique identifier for the type of reconstruction performed. Useful when saving reconstructions to DICOM files

      :param n_iters: Number of iterations
      :type n_iters: int
      :param n_subsets: Number of subsets
      :type n_subsets: int


   .. py:method:: __call__(n_iters, n_subsets, callback = None)

      Performs the reconstruction using ``n_iters`` iterations and ``n_subsets`` subsets.

      :param n_iters: Number of iterations
      :type n_iters: int
      :param n_subsets: Number of subsets
      :type n_subsets: int
      :param callback: Callback function to be evaluated after each subiteration. Defaults to None.
      :type callback: CallBack, optional

      :returns: reconstructed object
      :rtype: torch.tensor[batch_size, Lx, Ly, Lz]



.. py:class:: BSREM(projections, system_matrix, object_initial = None, scatter = 0, prior = None, relaxation_function = lambda x: 1 / (x + 1), scaling_matrix_type = 'subind_norm')

   Bases: :py:obj:`OSML`

   Implementation of the block-sequential-regularized (BSREM) reconstruction algorithm: :math:`\hat{f}^{n,m+1} = \hat{f}^{n,m} + \alpha_n D \left[H_m^T \left(\frac{g_m}{H_m \hat{f}^{n,m} + s} -1 \right) - \beta \nabla_{f^{n,m}} V \right]`. The implementation of this algorithm corresponds to Modified BSREM-II with :math:`U=\infty`, :math:`t=0`, and :math:`\epsilon=0` (see https://ieeexplore.ieee.org/document/1207396). There is one difference in this implementation: rather than using FBP to get an initial estimate (as is done in the paper), a single iteration of OSEM is used; this initialization is required here due to the requirement for global scaling (see discussion on page 620 of paper).

   :param proj: projection data :math:`g` to be reconstructed
   :type proj: torch.Tensor
   :param object_initial: represents the initial object guess :math:`f^{0,0}` for the algorithm in object space
   :type object_initial: torch.tensor[batch_size, Lx, Ly, Lz]
   :param system_matrix: System matrix :math:`H` used in :math:`g=Hf`.
   :type system_matrix: SystemMatrix
   :param scatter: estimate of scatter contribution :math:`s`.
   :type scatter: torch.Tensor
   :param prior: the Bayesian prior; computes :math:`\beta \frac{\partial V}{\partial f}`. If ``None``, then this term is 0. Defaults to None.
   :type prior: Prior, optional
   :param relaxation_function: Sequence :math:`\alpha_n` used for relaxation. Defaults to :math:`\alpha_n=1/(n+1)`.
   :type relaxation_function: Callable, optional
   :param scaling_matrix_type: The form of the scaling matrix :math:`D` used. If ``subind_norm`` (sub-iteration independent + normalized), then :math:`D=\left(S_m/M \cdot H^T 1 \right)^{-1}`. If ``subdep_norm`` (sub-iteration dependent + normalized) then :math:`D = \left(H_m^T 1\right)^{-1}`. See section III.D in the paper above for a discussion on this.
   :type scaling_matrix_type: str, optional

   .. py:method:: _set_recon_name(n_iters, n_subsets)

      Set the unique identifier for the type of reconstruction performed. Useful for saving to DICOM files

      :param n_iters: Number of iterations
      :type n_iters: int
      :param n_subsets: Number of subsets
      :type n_subsets: int


   .. py:method:: __call__(n_iters, n_subsets, callback = None)

      Performs the reconstruction using ``n_iters`` iterations and ``n_subsets`` subsets.

      :param n_iters: Number of iterations
      :type n_iters: int
      :param n_subsets: Number of subsets
      :type n_subsets: int
      :param callback: Callback function to be called after each subiteration. Defaults to None.
      :type callback: CallBack, optional

      :returns: reconstructed object
      :rtype: torch.tensor[batch_size, Lx, Ly, Lz]



.. py:class:: OSEM(projections, system_matrix, object_initial = None, scatter = 0)

   Bases: :py:obj:`OSEMOSL`

   Implementation of the ordered subset expectation maximum algorithm :math:`\hat{f}^{n,m+1} = \left[\frac{1}{H_m^T 1} H_m^T \left(\frac{g_m}{H_m\hat{f}^{n,m}+s}\right)\right] \hat{f}^{n,m}`.

   :param proj: projection data :math:`g` to be reconstructed
   :type proj: torch.Tensor
   :param object_initial: represents the initial object guess :math:`f^{0,0}` for the algorithm in object space
   :type object_initial: torch.tensor[batch_size, Lx, Ly, Lz]
   :param system_matrix: System matrix :math:`H` used in :math:`g=Hf`.
   :type system_matrix: SystemMatrix
   :param scatter: estimate of scatter contribution :math:`s`.
   :type scatter: torch.Tensor


.. py:class:: KEM(projections, system_matrix, kem_transform, object_initial = None, scatter = 0)

   Bases: :py:obj:`OSEM`

   Implementation of the KEM reconstruction algorithm given by :math:`\hat{\alpha}^{n,m+1} = \left[\frac{1}{K^T H_m^T 1} K^T H_m^T \left(\frac{g_m}{H_m K \hat{\alpha}^{n,m}+s}\right)\right] \hat{\alpha}^{n,m}` and where the final predicted object is :math:`\hat{f}^{n,m} = K \hat{\alpha}^{n,m}`.

   :param proj: projection data :math:`g` to be reconstructed
   :type proj: torch.Tensor
   :param system_matrix: System matrix :math:`H` used in :math:`g=Hf`.
   :type system_matrix: SystemMatrix
   :param kem_transform: The transform corresponding to the matrix :math:`K`.
   :type kem_transform: KEMTransform
   :param object_initial: represents the initial object guess :math:`f^{0,0}` for the algorithm in object space
   :type object_initial: torch.tensor[batch_size, Lx, Ly, Lz]
   :param scatter: estimate of scatter contribution :math:`s`.
   :type scatter: torch.Tensor

   .. py:method:: __call__(n_iters, n_subsets, callback = None)

      Performs the reconstruction using ``n_iters`` iterations and ``n_subsets`` subsets.

      :param n_iters: Number of iterations
      :type n_iters: int
      :param n_subsets: Number of subsets
      :type n_subsets: int
      :param callback: Callback function to be called after each subiteration. Defaults to None.
      :type callback: CallBack, optional

      :returns: reconstructed object
      :rtype: torch.tensor[batch_size, Lx, Ly, Lz]



