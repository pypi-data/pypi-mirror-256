:py:mod:`pytomography.callbacks`
================================

.. py:module:: pytomography.callbacks

.. autoapi-nested-parse::

   Callbacks can be used to compute various metrics on a reconstructed object throughout each iteration in an iterative reconstruction algorithm. For example, you may want to look at the noise in the liver as a function of iteration number in OSEM. A callback is simply a class which can take in an object and perform an operation. Callbacks are optional input to reconstruction algorithms; the ``run`` method of a callback is called after each subiteration of an iterative reconstruction algorithm. All user-defined callbacks should inherit from the base class ``CallBack``. A subclass of this class could be used to compute noise-bias curves provided the ``__init__`` method was redefined to take in some ground truth, and the run method was redefined to compare the obj to the ground truth.



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   callback/index.rst
   likelihood/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   pytomography.callbacks.Callback
   pytomography.callbacks.LogLikelihoodCallback




.. py:class:: Callback

   Abstract class used for callbacks. Subclasses must redefine the ``__init__`` and ``run`` methods. If a callback is used as an argument in an iterative reconstruction algorihtm, the ``__run__`` method is called after each subiteration.


   .. py:method:: run(obj, n_iter)
      :abstractmethod:

      Abstract method for ``run``.

      :param obj: An object which one can compute various statistics from.
      :type obj: torch.tensor[batch_size, Lx, Ly, Lz]
      :param n_iter: The iteration number
      :type n_iter: int



.. py:class:: LogLikelihoodCallback(projections, system_matrix, prior = None)

   Bases: :py:obj:`pytomography.callbacks.callback.Callback`

   Computes the log-liklihood :math:`\sum \left(g\log(Hf) - Hf - \beta V(f) \right)` after a given iteration.

   :param projections: Data corresponding to measured projections
   :type projections: torch.tensor
   :param system_matrix: System matrix of imaging system.
   :type system_matrix: SystemMatrix
   :param prior: Prior used in Bayesian algorithm. Defaults to None.
   :type prior: Prior, optional

   .. py:method:: run(object, n_iter)

      Method used to compute the log liklihood

      :param object: Object on which the liklihood is computed
      :type object: torch.tensor
      :param n_iter: Iteration number
      :type n_iter: int



