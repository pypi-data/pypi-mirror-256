:py:mod:`pytomography.projectors.SPECT.spect_system_matrix`
===========================================================

.. py:module:: pytomography.projectors.SPECT.spect_system_matrix


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pytomography.projectors.SPECT.spect_system_matrix.SPECTSystemMatrix
   pytomography.projectors.SPECT.spect_system_matrix.SPECTSystemMatrixMaskedSegments




.. py:class:: SPECTSystemMatrix(obj2obj_transforms, proj2proj_transforms, object_meta, proj_meta, n_parallel=1)

   Bases: :py:obj:`pytomography.projectors.system_matrix.SystemMatrix`

   System matrix for SPECT imaging. By default, this applies to parallel hole collimators, but appropriate use of `proj2proj_transforms` can allow this system matrix to also model converging/diverging collimator configurations as well.

   :param obj2obj_transforms: Sequence of object mappings that occur before forward projection.
   :type obj2obj_transforms: Sequence[Transform]
   :param proj2proj_transforms: Sequence of proj mappings that occur after forward projection.
   :type proj2proj_transforms: Sequence[Transform]
   :param object_meta: SPECT Object metadata.
   :type object_meta: SPECTObjectMeta
   :param proj_meta: SPECT projection metadata.
   :type proj_meta: SPECTProjMeta
   :param n_parallel: Number of projections to use in parallel when applying transforms. More parallel events may speed up reconstruction time, but also increases GPU usage. Defaults to 1.
   :type n_parallel: int

   .. py:method:: compute_normalization_factor(subset_idx = None)

      Function used to get normalization factor :math:`H^T_m 1` corresponding to projection subset :math:`m`.

      :param subset_idx: Index of subset. If none, then considers all projections. Defaults to None.
      :type subset_idx: int | None, optional

      :returns: normalization factor :math:`H^T_m 1`
      :rtype: torch.Tensor


   .. py:method:: set_n_subsets(n_subsets)

      Sets the subsets for this system matrix given ``n_subsets`` total subsets.

      :param n_subsets: number of subsets used in OSEM
      :type n_subsets: int


   .. py:method:: get_projection_subset(projections, subset_idx)

      Gets the subset of projections :math:`g_m` corresponding to index :math:`m`.

      :param projections: full projections :math:`g`
      :type projections: torch.tensor
      :param subset_idx: subset index :math:`m`
      :type subset_idx: int

      :returns: subsampled projections :math:`g_m`
      :rtype: torch.tensor


   .. py:method:: get_weighting_subset(subset_idx)

      Computes the relative weighting of a given subset (given that the projection space is reduced). This is used for scaling parameters relative to :math:`H_m^T 1` in reconstruction algorithms, such as prior weighting :math:`\beta`

      :param subset_idx: Subset index
      :type subset_idx: int

      :returns: Weighting for the subset.
      :rtype: float


   .. py:method:: forward(object, subset_idx = None)

      Applies forward projection to ``object`` for a SPECT imaging system.

      :param object: The object to be forward projected
      :type object: torch.tensor[batch_size, Lx, Ly, Lz]
      :param subset_idx: Only uses a subset of angles :math:`g_m` corresponding to the provided subset index :math:`m`. If None, then defaults to the full projections :math:`g`.
      :type subset_idx: int, optional

      :returns: forward projection estimate :math:`g_m=H_mf`
      :rtype: torch.tensor


   .. py:method:: backward(proj, subset_idx = None, return_norm_constant = False)

      Applies back projection to ``proj`` for a SPECT imaging system.

      :param proj: projections :math:`g` which are to be back projected
      :type proj: torch.tensor
      :param subset_idx: Only uses a subset of angles :math:`g_m` corresponding to the provided subset index :math:`m`. If None, then defaults to the full projections :math:`g`.
      :type subset_idx: int, optional
      :param return_norm_constant: Whether or not to return :math:`H_m^T 1` along with back projection. Defaults to 'False'.
      :type return_norm_constant: bool

      :returns: the object :math:`\hat{f} = H_m^T g_m` obtained via back projection.
      :rtype: torch.tensor



.. py:class:: SPECTSystemMatrixMaskedSegments(obj2obj_transforms, proj2proj_transforms, object_meta, proj_meta, masks)

   Bases: :py:obj:`SPECTSystemMatrix`

   SPECT system matrix where the object space is a vector of length :math:`N` consisting of the mean activities for each masks in ``masks``. This system matrix can be used in reconstruction algorithms to obtain maximum liklihood estimations for the average value of :math:`f` inside each of the masks.

   :param obj2obj_transforms: Sequence of object mappings that occur before forward projection.
   :type obj2obj_transforms: Sequence[Transform]
   :param proj2proj_transforms: Sequence of proj mappings that occur after forward projection.
   :type proj2proj_transforms: Sequence[Transform]
   :param object_meta: SPECT Object metadata.
   :type object_meta: SPECTObjectMeta
   :param proj_meta: SPECT proj metadata.
   :type proj_meta: SPECTProjMeta
   :param masks: Masks corresponding to each segmented region.
   :type masks: torch.Tensor

   .. py:method:: forward(activities, angle_subset = None)

      Implements forward projection :math:`HUa` on a vector of activities :math:`a` corresponding to `self.masks`.

      :param activities: Activities in each mask region.
      :type activities: torch.tensor[batch_size, n_masks]
      :param angle_subset: Only uses a subset of angles (i.e. only certain values of :math:`j` in formula above) when back projecting. Useful for ordered-subset reconstructions. Defaults to None, which assumes all angles are used.
      :type angle_subset: list, optional

      :returns: Forward projected projections where Ltheta is specified by `self.proj_meta` and `angle_subset`.
      :rtype: torch.tensor[batch_size, Ltheta, Lx, Lz]


   .. py:method:: backward(proj, angle_subset = None, prior = None, normalize = False, return_norm_constant = False)

      Implements back projection :math:`U^T H^T g` on projections :math:`g`, returning a vector of activities for each mask region.

      :param proj: projections which are to be back projected
      :type proj: torch.tensor[batch_size, Ltheta, Lr, Lz]
      :param angle_subset: Only uses a subset of angles (i.e. only certain values of :math:`j` in formula above) when back projecting. Useful for ordered-subset reconstructions. Defaults to None, which assumes all angles are used.
      :type angle_subset: list, optional
      :param prior: If included, modifes normalizing factor to :math:`\frac{1}{\sum_j H_{ij} + P_i}` where :math:`P_i` is given by the prior. Used, for example, during in MAP OSEM. Defaults to None.
      :type prior: Prior, optional
      :param normalize: Whether or not to divide result by :math:`\sum_j H_{ij}`
      :type normalize: bool
      :param return_norm_constant: Whether or not to return :math:`1/\sum_j H_{ij}` along with back projection. Defaults to 'False'.
      :type return_norm_constant: bool

      :returns: the activities in each mask region.
      :rtype: torch.tensor[batch_size, n_masks]



