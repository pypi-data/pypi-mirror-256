// ==================================================
// RTL generated by RapidStream
//
// Copyright 2024 RapidStream Design Automation, Inc.
// All Rights Reserved.
// ==================================================
`timescale 1 ns / 1 ps
`default_nettype none

// first-word fall-through (FWFT) FIFO that is friendly for floorplanning
module __rs_hs_pipeline #(
    parameter DATA_WIDTH = 32,
    parameter DEPTH = 24,
    parameter PIPELINE_READY_IN_HEAD = 1,
    parameter PIPELINE_VALID_AND_DATA_IN_HEAD = 0,
    parameter PIPELINE_BODY_LEVEL = 2,
    parameter MEM_STYLE = 0   // 0: SRL, 1: ULTRA, 2: BLOCK
) (
    (* RS_CLK *)  input wire clk,
    (* RS_RST *)  input wire reset,

    // inbound
    (* RS_HS = "inbound.ready" *)  output wire                  if_full_n,
    (* RS_HS = "inbound.valid" *)  input  wire                  if_write,
    (* RS_HS = "inbound.data"  *)  input  wire [DATA_WIDTH-1:0] if_din,

    // outbound
    (* RS_HS = "outbound.valid" *)  output wire                  if_empty_n,
    (* RS_HS = "outbound.ready" *)  input  wire                  if_read,
    (* RS_HS = "outbound.data"  *)  output wire [DATA_WIDTH-1:0] if_dout
);

    parameter GRACE_PERIOD = PIPELINE_BODY_LEVEL * 2 + PIPELINE_READY_IN_HEAD + PIPELINE_VALID_AND_DATA_IN_HEAD;
    parameter REAL_DEPTH = GRACE_PERIOD + DEPTH + 4;
    parameter REAL_ADDR_WIDTH  = $clog2(REAL_DEPTH);

    wire                  head_outbound_valid;
    wire                  head_outbound_ready;
    wire [DATA_WIDTH-1:0] head_outbound_data ;

    wire                  body_outbound_valid;
    wire                  body_outbound_ready;
    wire [DATA_WIDTH-1:0] body_outbound_data ;

    __rs_hs_pipeline_head #(
        .DATA_WIDTH(DATA_WIDTH),
        .PIPELINE_READY(PIPELINE_READY_IN_HEAD),
        .PIPELINE_VALID_AND_DATA(PIPELINE_VALID_AND_DATA_IN_HEAD)
    ) head (
        .clk(clk),
        .reset(reset),

        // inbound
        .if_full_n  (if_full_n),
        .if_write   (if_write),
        .if_din     (if_din),

        // outbound
        .if_empty_n (head_outbound_valid),
        .if_read    (head_outbound_ready),
        .if_dout    (head_outbound_data)
    );

    __rs_hs_pipeline_body #(
        .DATA_WIDTH(DATA_WIDTH),
        .LEVEL(PIPELINE_BODY_LEVEL)
    ) body (
        .clk(clk),
        .reset(reset),

        // inbound
        .if_full_n  (head_outbound_ready),
        .if_write   (head_outbound_valid),
        .if_din     (head_outbound_data),

        // outbound
        .if_empty_n(body_outbound_valid),
        .if_read   (body_outbound_ready),
        .if_dout   (body_outbound_data)
    );

    __rs_hs_pipeline_tail #(
        .DATA_WIDTH(DATA_WIDTH),
        .ADDR_WIDTH(REAL_ADDR_WIDTH),
        .DEPTH(REAL_DEPTH),
        .GRACE_PERIOD(GRACE_PERIOD),
        .MEM_STYLE(MEM_STYLE)
    ) tail (
        .clk(clk),
        .reset(reset),

        // inbound
        .if_full_n  (body_outbound_ready),
        .if_write   (body_outbound_valid),
        .if_din     (body_outbound_data),

        // outbound
        .if_empty_n(if_empty_n),
        .if_read   (if_read),
        .if_dout   (if_dout)
    );


endmodule   // __rs_hs_pipeline


`default_nettype wire
