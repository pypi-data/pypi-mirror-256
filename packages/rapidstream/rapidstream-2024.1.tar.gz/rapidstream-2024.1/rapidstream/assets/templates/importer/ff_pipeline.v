// ==================================================
// RTL generated by RapidStream
//
// Copyright 2024 RapidStream Design Automation, Inc.
// All Rights Reserved.
// ==================================================
`timescale 1 ns / 1 ps


module __rs_ff_pipeline #(
  parameter DATA_WIDTH = 32,
  parameter HEAD_LEVEL = 0,
  parameter BODY_LEVEL = 2,
  parameter TAIL_LEVEL = 0
) (
  input wire clk,
  input  wire [DATA_WIDTH-1:0] if_din,
  output wire [DATA_WIDTH-1:0] if_dout
);

  wire [DATA_WIDTH-1:0] head_dout;
  wire [DATA_WIDTH-1:0] body_dout;

  __rs_feed_forward_reg_group #(
    .DATA_WIDTH(DATA_WIDTH),
    .LEVEL     (HEAD_LEVEL)
  ) head (
    .clk     (clk),
    .if_din  (if_din),
    .if_dout (head_dout)
  );

  __rs_feed_forward_reg_group #(
    .DATA_WIDTH(DATA_WIDTH),
    .LEVEL     (BODY_LEVEL)
  ) body (
    .clk     (clk),
    .if_din  (head_dout),
    .if_dout (body_dout)
  );

  __rs_feed_forward_reg_group #(
    .DATA_WIDTH(DATA_WIDTH),
    .LEVEL     (TAIL_LEVEL)
  ) tail (
    .clk     (clk),
    .if_din  (body_dout),
    .if_dout (if_dout)
  );

endmodule

/////////////////////////////////////////////////////////////////

module __rs_feed_forward_reg_group #(
  parameter DATA_WIDTH = 32,
  parameter LEVEL      = 2
) (
  input wire clk,
  input  wire [DATA_WIDTH-1:0] if_din,
  output wire [DATA_WIDTH-1:0] if_dout
);
  wire [DATA_WIDTH-1:0] data    [LEVEL:0];

  genvar i;
  generate
    if (LEVEL > 0) begin
      for (i = 0; i < LEVEL; i = i + 1) begin : inst
        __rs_feed_forward_reg #(
          .DATA_WIDTH(DATA_WIDTH)
        ) unit (
          .clk     (clk),
          .if_dout (data[i+1]),
          .if_din  (data[i])
        );
      end

      // write
      assign data[0] = if_din;     // input

      // read
      assign if_dout = data[LEVEL];     // output

    end

    // LEVEL == 0
    else begin
      assign if_dout = if_din;     // output
    end

  endgenerate

endmodule

module __rs_feed_forward_reg #(
  parameter DATA_WIDTH = 32
) (
  input wire clk,
  input  wire [DATA_WIDTH-1:0] if_din,
  (* keep = "true" *)
  output reg  [DATA_WIDTH-1:0] if_dout
);

  always @ (posedge clk) begin
    if_dout <= if_din;
  end

endmodule

//////////////////////////////
