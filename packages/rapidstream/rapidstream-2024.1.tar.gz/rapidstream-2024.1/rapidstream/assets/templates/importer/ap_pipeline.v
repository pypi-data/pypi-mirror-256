// ==================================================
// RTL generated by RapidStream
//
// Copyright 2024 RapidStream Design Automation, Inc.
// All Rights Reserved.
// ==================================================
`timescale 1 ns / 1 ps


module __rs_ap_ctrl_pipeline #(
    parameter HEAD_LEVEL = 0,
    parameter BODY_LEVEL = 2
) (
  input wire clk,
  input wire reset,

  // write
  output wire                  if_full_n,
  input  wire                  if_write,

  // read
  output wire                  if_empty_n,
  input  wire                  if_read
);
    parameter GRACE_PERIOD = BODY_LEVEL * 2;

    wire                  head_outbound_valid;
    wire                  head_outbound_ready;

    wire                  body_outbound_valid;
    wire                  body_outbound_ready;

    __rs_ap_ctrl_pipeline_head_or_body #(
        .LEVEL(HEAD_LEVEL)
    ) head (
        .clk(clk),
        .reset(reset),

        // inbound
        .if_full_n  (if_full_n),
        .if_write   (if_write),

        // outbound
        .if_empty_n (head_outbound_valid),
        .if_read    (head_outbound_ready)
    );

    __rs_ap_ctrl_pipeline_head_or_body #(
        .LEVEL(BODY_LEVEL)
    ) body (
        .clk(clk),
        .reset(reset),

        // inbound
        .if_full_n  (head_outbound_ready),
        .if_write   (head_outbound_valid),

        // outbound
        .if_empty_n(body_outbound_valid),
        .if_read   (body_outbound_ready)
    );

    __rs_ap_ctrl_pipeline_tail #(
        .GRACE_PERIOD(GRACE_PERIOD)
    ) tail (
        .clk(clk),
        .reset(reset),

        // inbound
        .if_full_n  (body_outbound_ready),
        .if_write   (body_outbound_valid),

        // outbound
        .if_empty_n(if_empty_n),
        .if_read   (if_read)
    );

endmodule   // __rs_relay_station


// make the module interface FIFO-like to simplify later codegen
// The ap_start signal must remain High until ap_ready goes High. Once ap_ready goes
// High:
// => If ap_start remains High the design will start the next transaction.
// => If ap_start is taken Low, the design will complete the current transaction and
// halt operation.
// Since we are pipeline the ap_ready and ap_start, there will be a delay between when
// ap_ready is first asserted and when ap_start was dropped.
// This module ensures that the ap_start exposed to the sink will become low in the next
// cycle after ap_ready is high.
// The tradeoff is that there will be a cooling period of GRACE_PERIOD cycles before
// the sink module can be triggerred again. However, this generally will not affect
// the design performance at all in dataflow designs.
module __rs_ap_ctrl_pipeline_tail #(
    parameter GRACE_PERIOD = 4
) (
    input wire clk,
    input wire reset,

    // write
    output wire                  if_full_n,
    input  wire                  if_write,

    // read
    output wire                  if_empty_n,
    input  wire                  if_read
);
    parameter STATE_IDLE = 2'b00;
    parameter STATE_HOLDING = 2'b01;

    reg [1:0] state = STATE_IDLE;

    // the width is more than useful, vivado will opt away
    reg [GRACE_PERIOD-1: 0] counter;

    wire ap_ready_hold = state == STATE_HOLDING;

    wire ap_start_from_upstream = if_write;
    wire ap_ready_from_downstream = if_read;

    // when ap_ready is being held, disable the ap_start to downstream
    wire ap_start_to_downstream = ap_start_from_upstream & (~ap_ready_hold);
    assign if_empty_n = ap_start_to_downstream;

    // pass the original (not held) ap_ready to upstream
    wire ap_ready_to_upstream = ap_ready_from_downstream;
    assign if_full_n = ap_ready_to_upstream;

    always @(posedge clk) begin
        if (reset) begin
            state <= STATE_IDLE;
            counter <= 0;
        end
        else if (state == STATE_IDLE) begin
            if(ap_ready_from_downstream) begin
                state <= STATE_HOLDING;
                counter <= 1;
            end
        end
        else if(state == STATE_HOLDING) begin
            // reset the counter if ap_ready asserted again
            if (ap_ready_from_downstream) begin
                $display("WARNING: ap_ready asserted again during hold");
                counter <= 1;
            end
            // hold finished
            else if (counter == GRACE_PERIOD) begin
                state <= STATE_IDLE;
                counter <= 0;
            end
            // holding
            else begin
                counter <= counter + 1;
            end
        end
    end


endmodule


module __rs_ap_ctrl_pipeline_head_or_body #(
    parameter LEVEL      = 2
) (
  input wire clk,
  input wire reset,

  // write
  output wire                  if_full_n,
  input  wire                  if_write,

  // read
  output wire                  if_empty_n,
  input  wire                  if_read
);

  wire                  full_n  [LEVEL:0];
  wire                  empty_n [LEVEL:0];

  genvar i;
  generate
    for (i = 0; i < LEVEL; i = i + 1) begin : inst
        __rs_fifo_reg #(
          .DATA_WIDTH(1)
        ) unit (
          .clk(clk),
          .reset(reset),

          // connect to fifo[i+1]
          .if_empty_n(empty_n[i+1]),
          .if_read   (full_n[i+1]),
          .if_dout   (),

          // connect to fifo[i-1]
          .if_full_n  (full_n[i]),
          .if_write   (empty_n[i]),
          .if_din     (1'b0)
        );
    end

    // write
    // must not write if full_n is 0
    assign if_full_n  = full_n[0];  // output
    assign empty_n[0] = if_write;   // **** no gating by full_n ****

    // read
    assign if_empty_n    = empty_n[LEVEL];  // output
    assign full_n[LEVEL] = if_read;         // input

  endgenerate

endmodule   // __rs_relay_station
