# generated by datamodel-codegen:
#   filename:  data_lab.json

from __future__ import annotations

from enum import Enum
from typing import Optional, Sequence, Union

from pydantic import BaseModel, Extra, Field, conint


class EnclaveSpecification(BaseModel):
    attestationProtoBase64: str
    id: str
    workerProtocol: conint(ge=0)


class FormatType(Enum):
    STRING = 'STRING'
    INTEGER = 'INTEGER'
    FLOAT = 'FLOAT'
    EMAIL = 'EMAIL'
    DATE_ISO8601 = 'DATE_ISO8601'
    PHONE_NUMBER_E164 = 'PHONE_NUMBER_E164'
    HASH_SHA256_HEX = 'HASH_SHA256_HEX'


class HashingAlgorithm(Enum):
    SHA256_HEX = 'SHA256_HEX'


class Type3(Enum):
    SUPPORTED = 'SUPPORTED'


class RequirementFlagValueItem3(BaseModel):
    type: Type3


class Type4(Enum):
    DATASET = 'DATASET'


class RequirementFlagValueItem4(BaseModel):
    type: Type4


class Type5(Enum):
    PROPERTY = 'PROPERTY'


class RequirementFlagValueItem5(BaseModel):
    type: Type5
    value: str


class RequirementFlagValue(BaseModel):
    __root__: Union[
        RequirementFlagValueItem3, RequirementFlagValueItem4, RequirementFlagValueItem5
    ]


class DataLabComputeV0(BaseModel):
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecification
    id: str
    matchingIdFormat: FormatType
    matchingIdHashingAlgorithm: Optional[Optional[HashingAlgorithm]] = None
    name: str
    numEmbeddings: conint(ge=0)
    publisherEmail: str
    pythonEnclaveSpecification: EnclaveSpecification


class DataLabComputeV1(DataLabComputeV0):
    pass


class KnownOrUnknownRequirementFlagValue1(BaseModel):
    __root__: Optional[RequirementFlagValue]


class RequirementFlag1(BaseModel):
    details: KnownOrUnknownRequirementFlagValue1
    name: str


class Requirements(BaseModel):
    optional: Sequence[RequirementFlag1]
    required: Sequence[RequirementFlag1]


class DataLabComputeItem(BaseModel):
    class Config:
        extra = Extra.forbid

    v0: DataLabComputeV0


class DataLabComputeItem1(BaseModel):
    class Config:
        extra = Extra.forbid

    v1: DataLabComputeV1


class DataLabCompute(BaseModel):
    __root__: Union[DataLabComputeItem, DataLabComputeItem1]


class DataLabComputeOrUnknown(BaseModel):
    __root__: Optional[DataLabCompute]


class DataLabV0(BaseModel):
    compute: DataLabComputeOrUnknown
    features: Sequence[str]
    provides: Requirements


class DataLabItem(BaseModel):
    class Config:
        extra = Extra.forbid

    v0: DataLabV0


class DataLab(BaseModel):
    __root__: DataLabItem = Field(..., title='DataLab')
