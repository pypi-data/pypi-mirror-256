# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_inst.ipynb.

# %% auto 0
__all__ = ['T', 'P', 'adata', 'adatas', 'array', 'artist', 'augmenter', 'bool01', 'boolic', 'boolindex', 'bools', 'booltensor',
           'brownianintervial', 'bsrarray', 'bsrmatrix', 'builtinfunctype', 'catindex', 'colormap', 'cooarray',
           'coomatrix', 'cscarray', 'cscmatrix', 'csrarray', 'csrmatrix', 'cv2vidcap', 'dataframe', 'datasource',
           'datatype', 'device', 'diaarray', 'diamatrix', 'dictitems', 'dictkeys', 'dictvalues', 'dim1', 'dim2', 'dim3',
           'dim4', 'dimmed', 'dokarray', 'dokmatrix', 'dtype', 'floatq', 'floats', 'floattensor', 'functiontype',
           'graphtype', 'groupkey', 'ichain', 'image', 'indexlike', 'indextype', 'intq', 'ints', 'inttensor', 'iprod',
           'iterbool', 'iternum', 'iterstr', 'itertype', 'lilarray', 'lilmatrix', 'logger', 'lscolormap', 'mapping',
           'matrix', 'memfmt', 'moduleloader', 'modulespec', 'moduletype', 'mplaxes', 'mplpatch', 'nan', 'nanq', 'nans',
           'nantensor', 'neuraldynamics', 'neuralode', 'neuralsde', 'nilstr', 'nnmodule', 'none', 'notnilstr',
           'notstrbytes', 'nparray', 'npdatasource', 'npempty', 'npmatrix', 'num', 'numq', 'nums', 'numstr', 'odefunc',
           'param', 'pathlike', 'pdcatindex', 'pddataframe', 'pddelegate', 'pdindex', 'pdseries', 'pilimage',
           'pldatamodule', 'plmodule', 'presfmt', 'ptdataloader', 'ptdataset', 'ptdevice', 'ptmodule', 'ptsize',
           'pttensor', 'pttn', 'pttype', 'real', 'realq', 'reals', 'recarray', 'richcons', 'richprog', 'richtask',
           'richtext', 'richtree', 'sdefunc', 'sdeito', 'serialized', 'serieslike', 'seriestype', 'shaped', 'sig',
           'size', 'sparray', 'sparse', 'sparsearray', 'sparsematrix', 'spmatrix', 'strbytes', 'strq', 'strs',
           'strtmpl', 'tensor', 'tqdmauto', 'typerapp', 'trackbacktype', 'wrappertype', 'vidcap', 'ziplong', 'BoolFunc',
           'BoolCall', 'BoolCalls', 'BoolFuncQ', 'BoolCallQ', 'Numeric', 'Numbers', 'NumStr', 'EmptyString',
           'NotEmptyEmptyString', 'StrTmpl', 'StrLike', 'Pttn', 'PttnDict', 'StrBytes', 'NotStrBytes', 'PathType',
           'PathLike', 'DirPath', 'DirNames', 'FileNames', 'WalkTuple', 'WalkParts', 'EnumAuto', 'EnumDict',
           'EnumMember', 'Intum', 'Strum', 'Inhum', 'ByteLike', 'Literals', 'TypingLike', 'GuardLike', 'Module',
           'Loader', 'ModuleSpec', 'Sig', 'Param', 'Logger', 'ArgsType', 'SysExcInfoType', 'FormatStyle', 'ClsInt',
           'ClsSet', 'ClsStr', 'ClsObj', 'ClsBool', 'ClsBoolish', 'ClsCall', 'ClsType', 'ClsList', 'ClsFloat',
           'ClsNumber', 'ClsComplex', 'TypeLike', 'GuardFunc', 'StrGuard', 'IterStr', 'IterNum', 'IterBool', 'ListStr',
           'ListNum', 'ListBool', 'Strs', 'Nums', 'Bools', 'SetStr', 'SetNum', 'SetBool', 'SliceSpec', 'SliceSpecs',
           'Slc', 'Slcs', 'RichTree', 'RichText', 'RichCons', 'RichProg', 'RichTask', 'TQDM', 'Axes', 'ColorMap',
           'CBarPos', 'Grid', 'TyperApp', 'Adata', 'Adatas', 'AnnData', 'AnnDatas', 'Size', 'DType', 'TType', 'TrcType',
           'TorchType', 'TorchDType', 'DataType', 'Tens', 'Tensor', 'TrcTensor', 'NanTensor', 'IntTens', 'BoolTens',
           'FloatTens', 'IntTensor', 'BoolTensor', 'FloatTensor', 'Device', 'TorchLayer', 'TorchModule', 'Dataset',
           'DataLoader', 'DataModule', 'Img', 'Image', 'ImageLike', 'ImageSize', 'ImgSize', 'Video', 'VideoCapture',
           'VidCap', 'VideoSize', 'VidSize', 'Coordinate', 'Coord', 'Point', 'XYPos', 'Width', 'Height', 'Rect', 'BBox',
           'BoundingBox', 'RGB', 'RGBA', 'Color', 'PathFormatFunc', 'Mixin', 'NPArray', 'ndarray', 'NPMatrix',
           'ndmatrix', 'DataSource', 'Idx', 'Index', 'CIdx', 'CIndex', 'CatIndex', 'CategoricalIndex', 'BoolIndex',
           'BIdx', 'BooleanIndex', 'Series', 'DFrame', 'DataFrame', 'DataFrames', 'IndexLike', 'SeriesLike', 'IterLike',
           'SPArray', 'SPMatrix', 'AnyQ', 'IntQ', 'SetQ', 'StrQ', 'ObjQ', 'BoolQ', 'DictQ', 'CallQ', 'TypeQ', 'ListQ',
           'IterQ', 'FloatQ', 'TupleQ', 'NumberQ', 'ComplexQ', 'StrLikeQ', 'NumStrQ', 'PttnQ', 'PatternQ', 'LoggerQ',
           'ModuleQ', 'PathLikeQ', 'ClsAnyQ', 'ClsIntQ', 'ClsSetQ', 'ClsStrQ', 'ClsObjQ', 'ClsBoolQ', 'ClsCallQ',
           'ClsTypeQ', 'ClsListQ', 'ClsIterQ', 'ClsFloatQ', 'ClsNumberQ', 'ClsComplexQ', 'RichTreeQ', 'RichTextQ',
           'RichConsQ', 'RichProgQ', 'RichTaskQ', 'TQDMQ', 'IdxQ', 'IndexQ', 'SeriesQ', 'DataFrameQ', 'CatQ', 'CIdxQ',
           'CatIndexQ', 'BIdxQ', 'BoolIndexQ', 'IndexLikeQ', 'NPArrayQ', 'NPMatrixQ', 'SPArrayQ', 'SPMatrixQ', 'AxesQ',
           'DTypeQ', 'DeviceQ', 'TensorQ', 'IntTensorQ', 'BoolTensorQ', 'FloatTensorQ', 'TensQ', 'IntTensQ',
           'BoolTensQ', 'FloatTensQ', 'DatasetQ', 'DataLoaderQ', 'DataModuleQ', 'VidCapQ', 'ImgSizeQ']

# %% ../nbs/00_inst.ipynb 6
import os, pathlib, inspect, importlib
from enum import IntEnum, StrEnum, EnumMeta, _EnumDict, member
from importlib.abc import Loader

# %% ../nbs/00_inst.ipynb 8
from types import ModuleType, TracebackType

from typing import (
    Any, Dict, List, Set, Type, Union, Tuple, Callable, Literal, 
    TypeVar, ClassVar, TypeAlias, ParamSpec, Optional,
    Iterable, ForwardRef, Mapping, TypeGuard
)
T = TypeVar('T')
P = ParamSpec('P')

# %% ../nbs/00_inst.ipynb 10
#| export


# %% ../nbs/00_inst.ipynb 12
from ltyp import (
    itertype,
    boolic, bool01, iterbool, bools, 
    intq, ints, floatq, floats, real, realq, reals, num, numq, nums, iternum, numstr,
    none, nan, nanq, nans, 
    pttn, strtmpl, strq, nilstr, strbytes, notnilstr, notstrbytes, strs, iterstr, 
    moduleloader, modulespec, 
    pathlike, sig, param, logger, ichain, iprod, ziplong, dictkeys, dictvalues, dictitems, 
    moduletype, wrappertype, builtinfunctype, trackbacktype, functiontype, mapping, 
    richtree, richtext, richcons, richprog, richtask, tqdmauto, typerapp,
    artist, colormap, lscolormap, mplpatch, mplaxes,
    
    cv2vidcap, pilimage, vidcap, image,
    
    npmatrix, nparray, recarray, npempty,
    sparray, spmatrix, cscarray, cscmatrix, cooarray, coomatrix, csrarray, csrmatrix, 
    diaarray, diamatrix, dokarray, dokmatrix, lilarray, lilmatrix, bsrarray, bsrmatrix,
    sparsearray, sparsematrix, sparse,
    array, matrix,
    
    groupkey, 
    pddelegate, 
    pdindex, pdcatindex, boolindex, catindex, 
    indextype, indexlike, pdseries, 
    seriestype, serieslike, serialized, pddataframe, dataframe,
    
    pttype, 
    memfmt, presfmt,
    ptsize,
    ptdevice,
    pttensor, inttensor, booltensor, floattensor, nantensor, tensor,
    ptmodule, plmodule, nnmodule,
    ptdataset, pldatamodule, ptdataloader,
    
    neuralode, neuralsde, neuraldynamics,
    odefunc, sdefunc, sdeito, brownianintervial, 
    augmenter,
    
    dtype, device, size, npdatasource, datasource,
    adata, adatas,
    graphtype, datatype, shaped,
    
    dimmed, dim1, dim2, dim3, dim4,
    
    
)

from typs import Prototype, Opt, Not

# %% ../nbs/00_inst.ipynb 15
#| export


# %% ../nbs/00_inst.ipynb 17
adata = adata
adatas = adatas
array = array
artist = artist
augmenter = augmenter
bool01 = bool01
boolic = boolic
boolindex = boolindex
bools = bools
booltensor = booltensor
brownianintervial = brownianintervial
bsrarray = bsrarray
bsrmatrix = bsrmatrix
builtinfunctype = builtinfunctype
catindex = catindex
colormap = colormap
cooarray = cooarray
coomatrix = coomatrix
cscarray = cscarray
cscmatrix = cscmatrix
csrarray = csrarray
csrmatrix = csrmatrix
cv2vidcap = cv2vidcap
dataframe = dataframe
datasource = datasource
datatype = datatype
device = device
diaarray = diaarray
diamatrix = diamatrix
dictitems = dictitems
dictkeys = dictkeys
dictvalues = dictvalues
dim1 = dim1
dim2 = dim2
dim3 = dim3
dim4 = dim4
dimmed = dimmed
dokarray = dokarray
dokmatrix = dokmatrix
dtype = dtype
floatq = floatq
floats = floats
floattensor = floattensor
functiontype = functiontype
graphtype = graphtype
groupkey = groupkey
ichain = ichain
image = image
indexlike = indexlike
indextype = indextype
intq = intq
ints = ints
inttensor = inttensor
iprod = iprod
iterbool = iterbool
iternum = iternum
iterstr = iterstr
itertype = itertype
lilarray = lilarray
lilmatrix = lilmatrix
logger = logger
lscolormap = lscolormap
mapping = mapping
matrix = matrix
memfmt = memfmt
moduleloader = moduleloader
modulespec = modulespec
moduletype = moduletype
mplaxes = mplaxes
mplpatch = mplpatch
nan = nan
nanq = nanq
nans = nans
nantensor = nantensor
neuraldynamics = neuraldynamics
neuralode = neuralode
neuralsde = neuralsde
nilstr = nilstr
nnmodule = nnmodule
none = none
notnilstr = notnilstr
notstrbytes = notstrbytes
nparray = nparray
npdatasource = npdatasource
npempty = npempty
npmatrix = npmatrix
num = num
numq = numq
nums = nums
numstr = numstr
odefunc = odefunc
param = param
pathlike = pathlike
pdcatindex = pdcatindex
pddataframe = pddataframe
pddelegate = pddelegate
pdindex = pdindex
pdseries = pdseries
pilimage = pilimage
pldatamodule = pldatamodule
plmodule = plmodule
presfmt = presfmt
ptdataloader = ptdataloader
ptdataset = ptdataset
ptdevice = ptdevice
ptmodule = ptmodule
ptsize = ptsize
pttensor = pttensor
pttn = pttn
pttype = pttype
real = real
realq = realq
reals = reals
recarray = recarray
richcons = richcons
richprog = richprog
richtask = richtask
richtext = richtext
richtree = richtree
sdefunc = sdefunc
sdeito = sdeito
serialized = serialized
serieslike = serieslike
seriestype = seriestype
shaped = shaped
sig = sig
size = size
sparray = sparray
sparse = sparse
sparsearray = sparsearray
sparsematrix = sparsematrix
spmatrix = spmatrix
strbytes = strbytes
strq = strq
strs = strs
strtmpl = strtmpl
tensor = tensor
tqdmauto = tqdmauto
typerapp = typerapp
trackbacktype = trackbacktype
wrappertype = wrappertype
vidcap = vidcap
ziplong = ziplong

# %% ../nbs/00_inst.ipynb 19
BoolFunc: TypeAlias = Callable[P, bool01]
'''A type alias for a function that returns a boolean.'''

BoolCall: TypeAlias = Union[bool01, BoolFunc]
'''A type alias for a boolean or a callable that returns a boolean.'''

BoolCalls: TypeAlias = List[BoolCall]
'''A type alias for a list of booleans or callables that each returns a boolean.''';

BoolFuncQ: TypeAlias = Optional[BoolFunc]

BoolCallQ: TypeAlias = Optional[BoolCall]

# %% ../nbs/00_inst.ipynb 21
Numeric = num

Numbers = nums

NumStr = numstr

# %% ../nbs/00_inst.ipynb 23
EmptyString = nilstr
NotEmptyEmptyString = notnilstr
 
StrTmpl: TypeAlias = strtmpl
StrLike: TypeAlias = Union[str, 'strfix', 'fuzstr', 'nymstr', 'synset', 'brvstr', 'strfix']

Pttn: TypeAlias = pttn
PttnDict: TypeAlias = dict[str, pttn]


StrBytes = strbytes
NotStrBytes = notstrbytes

# %% ../nbs/00_inst.ipynb 25
PathType: TypeAlias = Union[pathlib.Path, pathlib.PosixPath]
PathLike: TypeAlias = Union[str, os.PathLike, pathlib.Path, PathType]

# %% ../nbs/00_inst.ipynb 27
DirPath:   TypeAlias = PathLike
DirNames:  TypeAlias = List[PathLike]
FileNames: TypeAlias = List[PathLike]
WalkTuple: TypeAlias = Tuple[DirPath, DirNames, FileNames]
WalkParts: TypeAlias = Iterable[WalkTuple]

# %% ../nbs/00_inst.ipynb 29
EnumAuto: TypeAlias = member
EnumDict: TypeAlias = _EnumDict
EnumMember: TypeAlias = member

Intum: TypeAlias = Union[IntEnum, 'LitIntEnum', 'Intum']
Strum: TypeAlias = Union[StrEnum, 'LitStrEnum', 'Strum', 'LiteralEnum']

Inhum = ForwardRef('Inhum', module='inhum', is_class=True)

# %% ../nbs/00_inst.ipynb 31
ByteLike: TypeAlias = Union[bytes, 'BytesUnit', 'Bytes']

# %% ../nbs/00_inst.ipynb 34
Literals = TypeVar('Literals')
TypingLike: TypeAlias = Union['TTyp', 'TType', 'TypingUnit', 'Typing']
GuardLike: TypeAlias = Union['TTypGuard', 'TTypeGuard']

# %% ../nbs/00_inst.ipynb 36
Module: TypeAlias = moduletype

# %% ../nbs/00_inst.ipynb 38
Loader: TypeAlias = moduleloader
ModuleSpec: TypeAlias = modulespec

# %% ../nbs/00_inst.ipynb 40
Sig:   TypeAlias = sig
Param: TypeAlias = param

# %% ../nbs/00_inst.ipynb 42
Logger: TypeAlias = logger

ArgsType: TypeAlias = type[tuple[object, ...]] | type[Mapping[str, object]]

SysExcInfoType: TypeAlias = \
    type[tuple[type[BaseException], BaseException, TracebackType | None]] | \
    type[tuple[None, None, None]]

FormatStyle: TypeAlias = Literal['%', '{', '$']

# %% ../nbs/00_inst.ipynb 44
ClsInt = ClassVar[int]
ClsSet = ClassVar[set]
ClsStr = ClassVar[str]
ClsObj = ClassVar[object]

ClsBool = ClassVar[bool]
ClsBoolish = ClassVar[bool01]
ClsCall = ClassVar[Callable]

ClsType = ClassVar[type]
ClsList = ClassVar[list]

ClsFloat = ClassVar[float]
ClsNumber = ClassVar[num]
ClsComplex = ClassVar[complex]

# %% ../nbs/00_inst.ipynb 46
TypeLike:  TypeAlias = Union[Type, TypeAlias, Type[T]]
GuardFunc: TypeAlias = Callable[P, TypeGuard[TypeLike]]
StrGuard: TypeAlias = Callable[[str], TypeGuard[str]]

# %% ../nbs/00_inst.ipynb 48
IterStr: TypeAlias = iterstr
IterNum: TypeAlias = iternum
IterBool: TypeAlias = bools

# %% ../nbs/00_inst.ipynb 50
ListStr: TypeAlias = strs
ListNum: TypeAlias = nums
ListBool: TypeAlias = bools

Strs: TypeAlias = strs
Nums: TypeAlias = nums
Bools: TypeAlias = bools

# %% ../nbs/00_inst.ipynb 52
SetStr: TypeAlias = Set[str]
SetNum: TypeAlias = Set[num]
SetBool: TypeAlias = Set[bool01]

# %% ../nbs/00_inst.ipynb 54
SliceSpec: TypeAlias = Union[slice, tuple]
SliceSpecs: TypeAlias = Tuple[SliceSpec, ...]

Slc: TypeAlias = SliceSpec
Slcs: TypeAlias = SliceSpecs

# %% ../nbs/00_inst.ipynb 56
RichTree: TypeAlias = richtree
RichText: TypeAlias = richtext
RichCons: TypeAlias = richcons
RichProg: TypeAlias = richprog
RichTask: TypeAlias = richtask

# %% ../nbs/00_inst.ipynb 58
TQDM: TypeAlias = tqdmauto

# %% ../nbs/00_inst.ipynb 60
Axes: TypeAlias = mplaxes
ColorMap: TypeAlias = colormap

CBarPos: TypeAlias = Tuple[float, float, float, float]
'''tuple of (left, bottom, width, height)''';

Grid: TypeAlias = Tuple[int, int]
'''the number of rows and columns of a grid''';

# %% ../nbs/00_inst.ipynb 62
TyperApp: TypeAlias = typerapp

# %% ../nbs/00_inst.ipynb 64
Adata: TypeAlias = adata
Adatas: TypeAlias = adatas

AnnData: TypeAlias = adata
AnnDatas: TypeAlias = adatas

# %% ../nbs/00_inst.ipynb 66
Size: TypeAlias = tuple[int, ...]
Axes: TypeAlias = Union[int, tuple[int, ...]]

# %% ../nbs/00_inst.ipynb 68
dtype: TypeAlias = dtype
DType: TypeAlias = dtype

TType: TypeAlias = dtype
TrcType: TypeAlias = dtype

TorchType: TypeAlias = dtype
TorchDType: TypeAlias = dtype

DataType: TypeAlias = dtype

# %% ../nbs/00_inst.ipynb 70
Tens: TypeAlias = tensor
Tensor: TypeAlias = tensor
TrcTensor: TypeAlias = tensor

# %% ../nbs/00_inst.ipynb 71
NanTensor = nantensor

IntTens: TypeAlias = inttensor
BoolTens: TypeAlias = booltensor
FloatTens: TypeAlias = floattensor

IntTensor: TypeAlias = inttensor
BoolTensor: TypeAlias = booltensor
FloatTensor: TypeAlias = floattensor

# %% ../nbs/00_inst.ipynb 73
Device: TypeAlias = device

# %% ../nbs/00_inst.ipynb 75
TorchLayer: TypeAlias = ptmodule
TorchModule: TypeAlias = ptmodule

# %% ../nbs/00_inst.ipynb 77
Dataset: TypeAlias = ptdataset
DataLoader: TypeAlias = ptdataloader

# %% ../nbs/00_inst.ipynb 79
DataModule: TypeAlias = pldatamodule

# %% ../nbs/00_inst.ipynb 82
pilimage = pilimage

# %% ../nbs/00_inst.ipynb 84
Img: TypeAlias = image
Image: TypeAlias = image
ImageLike: TypeAlias = Union[array, Image]

ImageSize: TypeAlias = Union[Tuple[int, int], Tuple[int, int, int]]
ImgSize: TypeAlias = ImageSize

# %% ../nbs/00_inst.ipynb 86
cv2vidcap = cv2vidcap

# %% ../nbs/00_inst.ipynb 88
Video: TypeAlias = vidcap
VideoCapture: TypeAlias = Video
VidCap: TypeAlias = Video

VideoSize: TypeAlias = Union[Tuple[int, int, int], Tuple[int, int, int, int]]
VidSize: TypeAlias = VideoSize

# %% ../nbs/00_inst.ipynb 90
Coordinate: TypeAlias = Tuple[Numeric, ...]
Coord: TypeAlias = Coordinate
Point: TypeAlias = Coordinate

XYPos: TypeAlias = Tuple[int, int]

Width: TypeAlias = int
'''the width of an object'''
Height: TypeAlias = int
'''the height of an object'''
Rect: TypeAlias = Tuple[Width, Height]
'''the width and height of a rectangle'''

BBox: TypeAlias = Tuple[XYPos, XYPos]
BoundingBox: TypeAlias = BBox
Size: TypeAlias = Tuple[int, ...]

# %% ../nbs/00_inst.ipynb 92
RGB: TypeAlias = Tuple[int, int, int]
RGBA: TypeAlias = Tuple[int, int, int, int]

Color: TypeAlias = Union[RGB, RGBA]

# %% ../nbs/00_inst.ipynb 95
PathFormatFunc: TypeAlias = Callable[[os.PathLike, strq, strq, strq], str]

# %% ../nbs/00_inst.ipynb 97
Mixin: TypeAlias =  Union[Tuple[Type, Callable], 'MixinType']

# %% ../nbs/00_inst.ipynb 99
NPArray: TypeAlias = nparray
ndarray: TypeAlias = nparray

NPMatrix: TypeAlias = npmatrix
ndmatrix: TypeAlias = npmatrix

DataSource: TypeAlias = npdatasource

# %% ../nbs/00_inst.ipynb 101
Idx: TypeAlias = pdindex
Index: TypeAlias = pdindex

CIdx: TypeAlias = pdcatindex
CIndex: TypeAlias = pdcatindex
CatIndex: TypeAlias = pdcatindex
CategoricalIndex: TypeAlias = pdcatindex

# %% ../nbs/00_inst.ipynb 102
BoolIndex = boolindex

BIdx: TypeAlias = BoolIndex
BooleanIndex: TypeAlias = BoolIndex

# %% ../nbs/00_inst.ipynb 103
Series: TypeAlias = pdseries

DFrame: TypeAlias = pddataframe
DataFrame: TypeAlias = pddataframe
DataFrames: TypeAlias = List[pddataframe]

# %% ../nbs/00_inst.ipynb 105
IndexLike = indexlike
SeriesLike = serieslike
IterLike: TypeAlias = Union[Iterable, serieslike, indexlike]

# %% ../nbs/00_inst.ipynb 107
SPArray: TypeAlias = sparray
SPMatrix: TypeAlias = spmatrix

# %% ../nbs/00_inst.ipynb 110
AnyQ: TypeAlias = Optional[Any]
IntQ: TypeAlias = Optional[int]
SetQ: TypeAlias = Optional[set]
StrQ: TypeAlias = Optional[str]
ObjQ: TypeAlias = Optional[object]

BoolQ: TypeAlias = Optional[bool01]
DictQ: TypeAlias = Optional[dict]
CallQ: TypeAlias = Optional[Callable]
TypeQ: TypeAlias = Optional[Type]
ListQ: TypeAlias = Optional[list]
IterQ: TypeAlias = Optional[Iterable]
FloatQ: TypeAlias = Optional[float]
TupleQ: TypeAlias = Optional[tuple]
NumberQ: TypeAlias = Optional[num]
ComplexQ: TypeAlias = Optional[complex]

StrLikeQ: TypeAlias = Optional[StrLike]
NumStrQ: TypeAlias = Optional[numstr]

# %% ../nbs/00_inst.ipynb 112
PttnQ: TypeAlias = Optional[pttn]
PatternQ: TypeAlias = Optional[pttn]

# %% ../nbs/00_inst.ipynb 114
LoggerQ: TypeAlias = Optional[Logger]

# %% ../nbs/00_inst.ipynb 116
ModuleQ: TypeAlias = Optional[Module]

PathLikeQ: TypeAlias = Optional[PathLike]

# %% ../nbs/00_inst.ipynb 118
BoolFuncQ: TypeAlias = Optional[BoolFunc]

BoolCallQ: TypeAlias = Optional[BoolCall]

# %% ../nbs/00_inst.ipynb 120
ClsAnyQ = ClassVar[AnyQ]
ClsIntQ = ClassVar[IntQ]
ClsSetQ = ClassVar[SetQ]
ClsStrQ = ClassVar[StrQ]
ClsObjQ = ClassVar[ObjQ]
ClsBoolQ = ClassVar[BoolQ]
ClsCallQ = ClassVar[CallQ]
ClsTypeQ = ClassVar[TypeQ]
ClsListQ = ClassVar[ListQ]
ClsIterQ = ClassVar[IterQ]
ClsFloatQ = ClassVar[FloatQ]
ClsNumberQ = ClassVar[NumberQ]
ClsComplexQ = ClassVar[ComplexQ]

StrLikeQ: TypeAlias = Optional[StrLike]

# %% ../nbs/00_inst.ipynb 122
RichTreeQ: TypeAlias = Optional[RichTree]
RichTextQ: TypeAlias = Optional[RichText]
RichConsQ: TypeAlias = Optional[RichCons]
RichProgQ: TypeAlias = Optional[RichProg]
RichTaskQ: TypeAlias = Optional[RichTask]
TQDMQ: TypeAlias = Optional[TQDM]

# %% ../nbs/00_inst.ipynb 124
IdxQ: TypeAlias = Optional[Idx]
IndexQ: TypeAlias = Optional[Index]
SeriesQ: TypeAlias = Optional[Series]
DataFrameQ: TypeAlias = Optional[DataFrame]

# %% ../nbs/00_inst.ipynb 125
CatQ: TypeAlias = Optional[CatIndex]
CIdxQ: TypeAlias = Optional[CatIndex]
CatIndexQ: TypeAlias = Optional[CatIndex]


BIdxQ: TypeAlias = Optional[BoolIndex]
BoolIndexQ: TypeAlias = Optional[BoolIndex]
IndexLikeQ: TypeAlias = Optional[IndexLike]

# %% ../nbs/00_inst.ipynb 126
NPArrayQ: TypeAlias = Optional[NPArray]
NPMatrixQ: TypeAlias = Optional[NPMatrix]

SPArrayQ: TypeAlias = Optional[SPArray]
SPMatrixQ: TypeAlias = Optional[SPMatrix]

# %% ../nbs/00_inst.ipynb 128
AxesQ: TypeAlias = Optional[Axes]

# %% ../nbs/00_inst.ipynb 129
DTypeQ: TypeAlias = Optional[DType]
DeviceQ: TypeAlias = Optional[Device]

TensorQ: TypeAlias = Optional[Tensor]
IntTensorQ: TypeAlias = Optional[IntTensor]
BoolTensorQ: TypeAlias = Optional[BoolTensor]
FloatTensorQ: TypeAlias = Optional[FloatTensor]


TensQ: TypeAlias = Optional[Tensor]
IntTensQ: TypeAlias = Optional[IntTensor]
BoolTensQ: TypeAlias = Optional[BoolTensor]
FloatTensQ: TypeAlias = Optional[FloatTensor]

# %% ../nbs/00_inst.ipynb 130
DatasetQ: TypeAlias = Optional[Dataset]
DataLoaderQ: TypeAlias = Optional[DataLoader]
DataModuleQ: TypeAlias = Optional[DataModule]

# %% ../nbs/00_inst.ipynb 132
VidCapQ: TypeAlias = Optional[VidCap]
ImgSizeQ: TypeAlias = Optional[ImgSize]
