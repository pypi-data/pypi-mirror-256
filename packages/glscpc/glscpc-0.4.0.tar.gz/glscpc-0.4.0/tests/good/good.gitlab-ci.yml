include:
  - local: gl-templates/utils.yml

# GitLab CI file
stages:
  - build python
  - build image
  - test
  - deploy

# Use official Python image
default:
  image: python:3.12

variables:
  # Update all docker images at once.
  DOCKER_IMAGE: "docker:23.0.1"
  CONTAINER_NAME: "$CI_REGISTRY_IMAGE/glscpc"
  # Change cache directories to be inside the project directory since we can only cache local items.
  XDG_CACHE_HOME: "$CI_PROJECT_DIR/.cache"
  PIP_CACHE_DIR: "$XDG_CACHE_HOME/pip"
  PRE_COMMIT_HOME: "$XDG_CACHE_HOME/pre-commit"
  # Disable keyring for publishing hatch packages.
  PYTHON_KEYRING_BACKEND: "keyring.backends.null.Keyring"

cache:
  paths:
    - .cache

# Run pre-commit & build package
build package:
  stage: build python
  before_script:
    - pip install hatch pre-commit
  script:
    - hatch build
    - SKIP=gitlabci-lint pre-commit run --all-files
  artifacts:
    paths:
      - dist

# Tests on all supported Python versions
test:
  image: python:${PY_VERSION}
  parallel:
    matrix:
      - PY_VERSION:
        # Maintain parity with pyproject.toml
        - "3.12"
        - "3.11"
        - "3.10"
        - "3.9"
        - "3.8"
  stage: test
  dependencies:
    - build package
  script:
    # These commands all serve as tests, at least as long as there is no decent real test framework implemented.
    # Install should work, including all dependencies
    - pip install --upgrade --upgrade-strategy eager "$(find dist -name '*.whl' | head -n1)[shellcheck]"
    # If --version or --help fail, it's likely an issue with importing unsupported in an old python version
    - glscpc --version
    - glscpc --help
    # Running on our own file should result in no issues
    - glscpc
    # All files under tests should result in issues being detected.
    - |
      for FILE in tests/*.yml; do
        if glscpc -v -f "$FILE";
          then echo "Did not find issues in example file $FILE?";
          exit 1;
        fi
      done
