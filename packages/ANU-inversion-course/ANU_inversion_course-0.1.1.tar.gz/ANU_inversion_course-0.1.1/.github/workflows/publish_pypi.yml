name: Upload to PyPI

on:
  # workflow_dispatch:
  #   inputs:
  #     pypi_repo:
  #       description: 'Repo to upload to (testpypi or pypi)'
  #       default: 'testpypi'
  #       required: true
  workflow_dispatch:
  push:
    paths:
      - "_version.py"

jobs:
  ######################## SOURCE DISTRIBUTION #########################
  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      
      - name: Install Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Set up environment
        run: |
          $CONDA/bin/conda install scikit-build

      - name: Build and check sdist
        run: |
          $CONDA/bin/python setup.py sdist
      
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          path: dist/*.tar.gz

  ######################## BINARY DISTRIBUTION #########################
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        # disable macos wheels until we find a solution for locating libgfortran.5.dylib:
        # a similar issue decription: https://github.com/lanl/ExactPack/issues/2
        # os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Symlink gfortran for macOS
        if: runner.os == 'macOS'
        run: |
          # make sure gfortran is available
          # https://github.com/actions/virtual-environments/issues/2524
          # https://github.com/cbg-ethz/dce/blob/master/.github/workflows/pkgdown.yaml
          sudo ln -s /usr/local/bin/gfortran-10 /usr/local/bin/gfortran
          sudo mkdir /usr/local/gfortran
          sudo ln -s /usr/local/Cellar/gcc@10/*/lib/gcc/10 /usr/local/gfortran/lib
          gfortran --version

      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.3.1
        env:
          CIBW_ARCHS_MACOS: x86_64 arm64
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: ""
          CIBW_SKIP: pp* *-win32 *-manylinux_i686 *-musllinux_*

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          path: wheelhouse/*.whl

  ######################## UPLOAD TO PYPI #########################
  publish_pypi:
    name: Upload source distribution and wheels to PyPI
    needs: [build_sdist, build_wheels]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Extract Release Version
        id: release_version
        run: |
          set -e
          echo ::set-output name=version::$(python -c "import _version as v; print(v.__version__)")

      - name: Create release tag
        uses: rickstaa/action-create-tag@v1.3.0
        with:
          tag: "v${{ steps.release_version.outputs.version }}"
          force_push_tag: true

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist

      - name: Publish package to TestPyPI
        uses: pypa/gh-action-pypi-publish@v1.4.1
        with:
          user: __token__
          password: ${{ secrets.TEST_PYPI_TOKEN }}
          repository_url: https://test.pypi.org/legacy/
          verbose: true
        # if: ${{ github.event.inputs.pypi_repo == 'testpypi' }}

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@v1.4.1
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
          verbose: true
        # if: ${{ github.event.inputs.pypi_repo == 'pypi' }}
      
