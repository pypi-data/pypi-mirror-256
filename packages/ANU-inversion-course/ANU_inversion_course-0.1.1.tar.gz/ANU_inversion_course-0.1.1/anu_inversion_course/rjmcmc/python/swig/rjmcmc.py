# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_rjmcmc')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_rjmcmc')
    _rjmcmc = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_rjmcmc', [dirname(__file__)])
        except ImportError:
            import _rjmcmc
            return _rjmcmc
        try:
            _mod = imp.load_module('_rjmcmc', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _rjmcmc = swig_import_helper()
    del swig_import_helper
else:
    import _rjmcmc
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def rjmcmc_seed(s):
    return _rjmcmc.rjmcmc_seed(s)
rjmcmc_seed = _rjmcmc.rjmcmc_seed
class dataset1d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dataset1d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dataset1d, name)
    __repr__ = _swig_repr
    __swig_setmethods__["d"] = _rjmcmc.dataset1d_d_set
    __swig_getmethods__["d"] = _rjmcmc.dataset1d_d_get
    if _newclass:
        d = _swig_property(_rjmcmc.dataset1d_d_get, _rjmcmc.dataset1d_d_set)

    def __init__(self, *args):
        this = _rjmcmc.new_dataset1d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set_xrange(self, xmin, xmax):
        return _rjmcmc.dataset1d_set_xrange(self, xmin, xmax)

    def get_xmin(self):
        return _rjmcmc.dataset1d_get_xmin(self)

    def get_xmax(self):
        return _rjmcmc.dataset1d_get_xmax(self)

    def set_yrange(self, ymin, ymax):
        return _rjmcmc.dataset1d_set_yrange(self, ymin, ymax)

    def get_ymin(self):
        return _rjmcmc.dataset1d_get_ymin(self)

    def get_ymax(self):
        return _rjmcmc.dataset1d_get_ymax(self)

    def set_lambda_std(self, std):
        return _rjmcmc.dataset1d_set_lambda_std(self, std)

    def get_lambda_std(self):
        return _rjmcmc.dataset1d_get_lambda_std(self)

    def set_lambda_range(self, lambdamin, lambdamax):
        return _rjmcmc.dataset1d_set_lambda_range(self, lambdamin, lambdamax)

    def get_lambda_min(self):
        return _rjmcmc.dataset1d_get_lambda_min(self)

    def get_lambda_max(self):
        return _rjmcmc.dataset1d_get_lambda_max(self)
    __swig_destroy__ = _rjmcmc.delete_dataset1d
    __del__ = lambda self: None
dataset1d_swigregister = _rjmcmc.dataset1d_swigregister
dataset1d_swigregister(dataset1d)

class resultset1d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, resultset1d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, resultset1d, name)
    __repr__ = _swig_repr
    __swig_setmethods__["r"] = _rjmcmc.resultset1d_r_set
    __swig_getmethods__["r"] = _rjmcmc.resultset1d_r_get
    if _newclass:
        r = _swig_property(_rjmcmc.resultset1d_r_get, _rjmcmc.resultset1d_r_set)
    __swig_destroy__ = _rjmcmc.delete_resultset1d
    __del__ = lambda self: None

    def proposed(self):
        return _rjmcmc.resultset1d_proposed(self)

    def acceptance(self):
        return _rjmcmc.resultset1d_acceptance(self)

    def partitions(self):
        return _rjmcmc.resultset1d_partitions(self)

    def order_histogram(self):
        return _rjmcmc.resultset1d_order_histogram(self)

    def partition_histogram(self):
        return _rjmcmc.resultset1d_partition_histogram(self)

    def partition_location_histogram(self):
        return _rjmcmc.resultset1d_partition_location_histogram(self)

    def x(self):
        return _rjmcmc.resultset1d_x(self)

    def y(self):
        return _rjmcmc.resultset1d_y(self)

    def mean(self):
        return _rjmcmc.resultset1d_mean(self)

    def median(self):
        return _rjmcmc.resultset1d_median(self)

    def mode(self):
        return _rjmcmc.resultset1d_mode(self)

    def credible_min(self):
        return _rjmcmc.resultset1d_credible_min(self)

    def credible_max(self):
        return _rjmcmc.resultset1d_credible_max(self)

    def misfit(self):
        return _rjmcmc.resultset1d_misfit(self)

    def lambda_history(self):
        return _rjmcmc.resultset1d_lambda_history(self)

    def histogram(self):
        return _rjmcmc.resultset1d_histogram(self)

    def __init__(self):
        """__init__(resultset1d self) -> resultset1d"""
        this = _rjmcmc.new_resultset1d()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
resultset1d_swigregister = _rjmcmc.resultset1d_swigregister
resultset1d_swigregister(resultset1d)

class resultset1dfm(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, resultset1dfm, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, resultset1dfm, name)
    __repr__ = _swig_repr
    __swig_setmethods__["r"] = _rjmcmc.resultset1dfm_r_set
    __swig_getmethods__["r"] = _rjmcmc.resultset1dfm_r_get
    if _newclass:
        r = _swig_property(_rjmcmc.resultset1dfm_r_get, _rjmcmc.resultset1dfm_r_set)
    __swig_destroy__ = _rjmcmc.delete_resultset1dfm
    __del__ = lambda self: None

    def proposed(self):
        return _rjmcmc.resultset1dfm_proposed(self)

    def acceptance(self):
        return _rjmcmc.resultset1dfm_acceptance(self)

    def partitions(self):
        return _rjmcmc.resultset1dfm_partitions(self)

    def partition_histogram(self):
        return _rjmcmc.resultset1dfm_partition_histogram(self)

    def partition_location_histogram(self):
        return _rjmcmc.resultset1dfm_partition_location_histogram(self)

    def x(self):
        return _rjmcmc.resultset1dfm_x(self)

    def mean(self, li=0):
        return _rjmcmc.resultset1dfm_mean(self, li)

    def median(self, li=0):
        return _rjmcmc.resultset1dfm_median(self, li)

    def mode(self, li=0):
        return _rjmcmc.resultset1dfm_mode(self, li)

    def credible_min(self, li=0):
        return _rjmcmc.resultset1dfm_credible_min(self, li)

    def credible_max(self, li=0):
        return _rjmcmc.resultset1dfm_credible_max(self, li)

    def global_parameter(self, gi):
        return _rjmcmc.resultset1dfm_global_parameter(self, gi)

    def misfit(self):
        return _rjmcmc.resultset1dfm_misfit(self)

    def __init__(self):
        """__init__(resultset1dfm self) -> resultset1dfm"""
        this = _rjmcmc.new_resultset1dfm()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
resultset1dfm_swigregister = _rjmcmc.resultset1dfm_swigregister
resultset1dfm_swigregister(resultset1dfm)


def regression_single1d(dataset, burnin=10000, total=50000, max_order=5, xsamples=100, ysamples=100, credible_interval=0.95):
    """regression_single1d(dataset1d dataset, int burnin=10000, int total=50000, int max_order=5, int xsamples=100, int ysamples=100, double credible_interval=0.95) -> resultset1d"""
    return _rjmcmc.regression_single1d(dataset, burnin, total, max_order, xsamples, ysamples, credible_interval)

def regression_single1d_sampled(dataset, callback, burnin=10000, total=50000, max_order=5, xsamples=100, ysamples=100, credible_interval=0.95):
    """regression_single1d_sampled(dataset1d dataset, PyObject * callback, int burnin=10000, int total=50000, int max_order=5, int xsamples=100, int ysamples=100, double credible_interval=0.95) -> resultset1d"""
    return _rjmcmc.regression_single1d_sampled(dataset, callback, burnin, total, max_order, xsamples, ysamples, credible_interval)

def regression_part1d_zero(dataset, pd, burnin=10000, total=50000, max_partitions=20, xsamples=100, ysamples=100, credible_interval=0.95):
    """regression_part1d_zero(dataset1d dataset, double pd, int burnin=10000, int total=50000, int max_partitions=20, int xsamples=100, int ysamples=100, double credible_interval=0.95) -> resultset1d"""
    return _rjmcmc.regression_part1d_zero(dataset, pd, burnin, total, max_partitions, xsamples, ysamples, credible_interval)

def regression_part1d_natural(dataset, pv, pd, burnin=10000, total=50000, max_partitions=20, xsamples=100, ysamples=100, credible_interval=0.95):
    """regression_part1d_natural(dataset1d dataset, double pv, double pd, int burnin=10000, int total=50000, int max_partitions=20, int xsamples=100, int ysamples=100, double credible_interval=0.95) -> resultset1d"""
    return _rjmcmc.regression_part1d_natural(dataset, pv, pd, burnin, total, max_partitions, xsamples, ysamples, credible_interval)

def regression_part1d(dataset, pd, burnin=10000, total=50000, max_partitions=20, max_order=5, xsamples=100, ysamples=100, credible_interval=0.95):
    """regression_part1d(dataset1d dataset, double pd, int burnin=10000, int total=50000, int max_partitions=20, int max_order=5, int xsamples=100, int ysamples=100, double credible_interval=0.95) -> resultset1d"""
    return _rjmcmc.regression_part1d(dataset, pd, burnin, total, max_partitions, max_order, xsamples, ysamples, credible_interval)

def regression_part1d_sampled(dataset, callback, pd, burnin=10000, total=50000, max_partitions=20, max_order=5, xsamples=100, ysamples=100, credible_interval=0.95):
    """regression_part1d_sampled(dataset1d dataset, PyObject * callback, double pd, int burnin=10000, int total=50000, int max_partitions=20, int max_order=5, int xsamples=100, int ysamples=100, double credible_interval=0.95) -> resultset1d"""
    return _rjmcmc.regression_part1d_sampled(dataset, callback, pd, burnin, total, max_partitions, max_order, xsamples, ysamples, credible_interval)

def forwardmodel_part1d(local_parameters, global_parameters, loglikelihood_cb, minx, maxx, pd, burnin=10000, total=50000, max_partitions=20, xsamples=100, ysamples=100, credible_interval=0.95):
    """forwardmodel_part1d(PyObject * local_parameters, PyObject * global_parameters, PyObject * loglikelihood_cb, double minx, double maxx, double pd, int burnin=10000, int total=50000, int max_partitions=20, int xsamples=100, int ysamples=100, double credible_interval=0.95) -> resultset1dfm"""
    return _rjmcmc.forwardmodel_part1d(local_parameters, global_parameters, loglikelihood_cb, minx, maxx, pd, burnin, total, max_partitions, xsamples, ysamples, credible_interval)
# This file is compatible with both classic and new-style classes.


