# AUTOGENERATED! DO NOT EDIT! File to edit: ../00_core.ipynb.

# %% auto 0
__all__ = ['config', 'set_env_variables', 'get_config', 'hello_world', 'cli']

# %% ../00_core.ipynb 5
# standard libs
import os
import re

# Common to template
# add into settings.ini, requirements, package name is python-dotenv, for conda build ensure `conda config --add channels conda-forge`
import dotenv # for loading config from .env files, https://pypi.org/project/python-dotenv/
import envyaml # Allows to loads env vars into a yaml file, https://github.com/thesimj/envyaml
import fastcore # To add functionality related to nbdev development, https://github.com/fastai/fastcore/
from fastcore.script import call_parse

# Project specific libraries

# %% ../00_core.ipynb 8
def set_env_variables(config_path) -> bool:
    # Order of precedence: environment variables > .env file > default values
    # When developing, making a change to the config will not be reflected until the environment is restarted

    # Set the env vars first, this is needed for the card.yaml to replace ENV variables
    if config_path is not None:
        dotenv.load_dotenv(config_path)

    dotenv.load_dotenv("./config/config.default.env")

    return True

# %% ../00_core.ipynb 10
def get_config(config_path) -> dict:
    # First sets environment with variables from config_path, then uses those variables to fill in appropriate values in the config.yaml file, the yaml file is then returned as a dict
    set_env_variables(config_path)
    config:dict = envyaml.EnvYAML(os.environ.get("CORE_YAML_CONFIG_FILE", "./config/config.default.yaml"), strict=False).export()
    return config

# %% ../00_core.ipynb 12
config = get_config(os.environ.get("CORE_CONFIG_FILE"))

# %% ../00_core.ipynb 16
def hello_world(name: str) -> str:
    return(f"Hello World! My name is {name}")

# %% ../00_core.ipynb 22
# add into settings.ini, requirements, package name is fastcore, for conda build ensure `conda config --add channels fastai`

@call_parse
def cli(
    name: str, # Your name
    config_file:str=None, # config file to set env vars from
    ) -> bool:
    """
    This will print Hello World! with your name
    """
    config = get_config(config_file) # Set env vars and get config variables

    print(hello_world(name))
    return True

