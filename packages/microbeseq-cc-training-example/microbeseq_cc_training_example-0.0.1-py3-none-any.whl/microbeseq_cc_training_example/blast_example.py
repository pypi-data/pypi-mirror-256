# AUTOGENERATED! DO NOT EDIT! File to edit: ../01_blast_example.ipynb.

# %% auto 0
__all__ = ['set_env_variables', 'get_config', 'hello_world', 'parse_sample_sheet', 'prepare_blast_input', 'run_blast',
           'collect_data', 'insert_data_in_sqlite', 'send_message', 'run_blast_on_samplesheet', 'cli']

# %% ../01_blast_example.ipynb 5
# standard libs
import os
import re
import sys

# Common to template
# add into settings.ini, requirements, package name is python-dotenv, for conda build ensure `conda config --add channels conda-forge`
import dotenv # for loading config from .env files, https://pypi.org/project/python-dotenv/
import envyaml # Allows to loads env vars into a yaml file, https://github.com/thesimj/envyaml
import fastcore # To add functionality related to nbdev development, https://github.com/fastai/fastcore/
from fastcore.script import call_parse

# Project specific libraries
import pandas
import subprocess
import sqlite3
from itertools import chain
import requests

# %% ../01_blast_example.ipynb 8
def set_env_variables(config_path) -> bool:
    # Order of precedence: environment variables > .env file > default values
    # When developing, making a change to the config will not be reflected until the environment is restarted

    # Set the env vars first, this is needed for the card.yaml to replace ENV variables
    if config_path is not None:
        dotenv.load_dotenv(config_path)

    dotenv.load_dotenv("./config/config.default.env")

    return True

# %% ../01_blast_example.ipynb 10
def get_config(config_path) -> dict:
    # First sets environment with variables from config_path, then uses those variables to fill in appropriate values in the config.yaml file, the yaml file is then returned as a dict
    set_env_variables(config_path)
    config:dict = envyaml.EnvYAML(os.environ.get("CORE_YAML_CONFIG_FILE", "./config/config.default.yaml"), strict=False).export()
    return config

# %% ../01_blast_example.ipynb 12
#config = get_config(os.environ.get("CORE_CONFIG_FILE"))
#print(config)

# %% ../01_blast_example.ipynb 16
def hello_world(name: str) -> str:
    return(f"Hello World! My name is {name}")

def parse_sample_sheet(sample_sheet_path:str):
    try:
        tsv_object = pandas.read_csv(sample_sheet_path, sep='\t')
    except Exception as e:
        print(e.message)
    return tsv_object

def prepare_blast_input(sample_sheet_path, fasta_path, missing_fasta):
    # Load config variables
    # Load samplesheet
    sample_sheet = pandas.read_csv(sample_sheet_path,sep='\t')
 
    # Create dataframe containing sample_id and fasta path. Write file containing list of samples missing a fasta file.
    blast_input = []
    missing_fasta = []
    for index, row in sample_sheet.iterrows():
        sample_id = row["SampleID"]
        fasta_file = os.path.join(fasta_path, sample_id + ".fasta")
        if (os.path.isfile(fasta_file)):
            blast_input.append([sample_id, fasta_file])
        else:
            missing_fasta.append(sample_id)
 
    if len(missing_fasta) > 0:
        with open(missing_fasta_path, 'w') as f:
            f.write(missing_fasta)
 
    blast_input_df = pandas.DataFrame(blast_input, columns=["sample_id", "fasta_path"])
 
    return blast_input_df

def run_blast(sample_pd_series, db:str, output_dir:str):
    sample_fasta = sample_pd_series['fasta_path']
    sample_id = sample_pd_series['sample_id']
    cmd = f'blastn -db {db} -query {sample_fasta} -out {output_dir}/{sample_id}.out -outfmt 6'
    #print(cmd)
    process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, shell=True, env=os.environ, encoding='utf-8')
    process_out, process_err = process.communicate()
    sys.stdout.write("{}\n".format(process_out))
    sys.stderr.write("{}\n".format(process_err))
    return None


def collect_data(output_dir, threshold=90):
    output_files = [os.path.join(output_dir, i) for i in os.listdir(output_dir) if re.match(".*.out", i)]
    #print(os.listdir(output_dir))
    header = ['qseqid', 'sseqid', 'pident', 'length', 'mismatch', 'gapopen', 'qstart', 'qend', 'sstart', 'send', 'evalue', 'bitscore']
    tsvs = [pandas.read_csv(i, names=header, sep='\t') for i in output_files]
    conc_tsv = pandas.concat(tsvs, axis=0)
    #print(conc_tsv.dtypes)
    filt_tsv = conc_tsv.loc[conc_tsv['pident'] >= threshold]
    filt_tsv.to_csv(os.path.join(output_dir, 'filtered_results.tsv'))
    return filt_tsv
    

def insert_data_in_sqlite(sqlite_db, filt_tsv):
    connection = sqlite3.connect(sqlite_db) # will chreate if doesn't exist according to stackexhcnage
    cursor = connection.cursor()
    create_cmd = '''create table if not exists blast_test (qseqid TEXT PRIMARY KEY,sseqid TEXT,pident REAL,length INTEGER,mismatch INTEGER)'''
    cursor.execute(create_cmd)
    insert_query = '''INSERT INTO blast_test (qseqid, sseqid, pident,length, mismatch) VALUES (?, ?, ?, ?, ?)'''
    existing_primary_key = cursor.execute('''SELECT qseqid from blast_test''').fetchall()
    primary_key_set = set(chain.from_iterable(existing_primary_key))
    df_new = filt_tsv[~filt_tsv['qseqid'].isin(primary_key_set)]
    print(df_new)
    if df_new.shape[0] > 0:
        new_keys_str = ', '.join(df_new['qseqid'].tolist()) + ' added to sqlite db'
    else:
        new_keys_str = 'no new keys to add to sqlite'
    tuples = [tuple(i) for i in df_new[['qseqid', 'sseqid', 'pident', 'length', 'mismatch']].to_numpy()]
    for i in tuples:
        cursor.execute(insert_query, i)
    connection.commit()
    cursor.close()
    return new_keys_str

def send_message(webhook:str, message:str):
    requests.post(webhook, json={'text':message})
    return None
    

def run_blast_on_samplesheet(config):
    db = config['blast']['input']['db']
    output_dir = config['blast']['output']['output_dir']
    threshold = config['blast']['input'].get('threshold')
    sqlite_db = config['blast']['output']['sqlite_db']
    sample_sheet_path = config["blast"]["input"]["sample_sheet_path"]
    fasta_path = config["blast"]["input"]["fasta_path"]
    missing_fasta = config["blast"]["output"]["missing_fasta"]
    webhook = config["blast"]["input"]['webhook']
    print(threshold)
    sample_df: pandas.DataFrame = prepare_blast_input(sample_sheet_path, fasta_path, missing_fasta)
    #print(sample_df)
    sample_df.apply(run_blast, args=(db, output_dir), axis=1)
    filt_tsv = collect_data(config['blast']['output']['output_dir'], threshold)
    inserted_keys = insert_data_in_sqlite(sqlite_db, filt_tsv)
    print(inserted_keys)
    send_message(webhook, inserted_keys)
    return True


# %% ../01_blast_example.ipynb 21
# add into settings.ini, requirements, package name is fastcore, for conda build ensure `conda config --add channels fastai`

@call_parse
def cli(
    #sample_sheet:str=None,
    #name: str, # Your name
    config_path:str=None, # config file to set env vars from
    threshold:int=None
    ) -> bool:
    """
    This will print Hello World! with your name
    """
    #global config
    config = get_config(config_path) # Set env vars and get config variables
    if threshold is not None:
        threshold = config['blast']['input']['threshold'] = threshold

    #print(hello_world(name))
    print(run_blast_on_samplesheet(config))
    return True

