"""
Unit tests for the ``reg.py`` module.
"""
import numpy as np
import pytest

from egse.reg import Register
from egse.reg import RegisterMap
from egse.reg import RegisterValue
from egse.reg import compare_register_maps
from egse.reg import decode_ccd_order
from egse.reg import encode_ccd_order


def test_reg_0():
    reg_map = RegisterMap('N-FEE')

    print(f"reg_0_config = {reg_map.get_register_data('reg_0_config')}")

    assert reg_map.get_register_data('reg_0_config') == b'\x11\x9d\x00\x00'

    assert reg_map.get_value('reg_0_config', 'v_start') == 0
    assert reg_map.get_value('reg_0_config', 'v_end') == 4509


def test_construction():

    # This register map is loaded from the n_fee_register.yaml file
    # and is populated with the default values

    reg_map = RegisterMap('N-FEE')

    assert reg_map.get_value('reg_1_config', 'charge_injection_gap') == 0

    reg_map.set_value('reg_1_config', 'charge_injection_gap', 5)
    assert reg_map.get_value('reg_1_config', 'charge_injection_gap') == 5

    assert reg_map.get_value('reg_0_config', 'v_start') == 0
    assert reg_map.get_value('reg_0_config', 'v_end') == 4509

    assert reg_map.get_value('reg_2_config', 'parallel_toi_period') == 1125

    assert reg_map.get_value('reg_5_config', 'Trap_Pumping_Dwell_counter') == 12500

    reg: Register = reg_map.get_register('reg_5_config')
    var: RegisterValue = reg['Trap_Pumping_Dwell_counter']

    data = reg_map.get_data(reg.address, 4)

    assert var.get_value(data) == 12500

    # An empty register map is created, no registers defined and all values are set to zero

    reg_map = RegisterMap()

    assert reg_map


def test_initialisation():

    # This memory map is a real memory map that was loaded from the N-FEE, but without the HK values

    mem_map = bytearray(
        b'\x11\xa7\x11\x94\x00\x00\x00\x00\xe4\x0f\xa4e\x08\xf6\x00\x00\x18j}\x8c>\xe00\xd4\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00e\xcd\\\xcc\xcee\xe6^\xcc\xc1\x9a\xcc\x05\x00\x00\x01\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06@\x00\x00\x03\xe8\x07\xd0\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
        b'\x00\x00\x00')

    reg_map = RegisterMap("N-FEE", memory_map=mem_map)

    assert reg_map.get_value('reg_1_config', 'charge_injection_gap') == 0

    reg_map.set_value('reg_1_config', 'charge_injection_gap', 5)
    assert reg_map.get_value('reg_1_config', 'charge_injection_gap') == 5

    assert reg_map.get_value('reg_0_config', 'v_start') == 4500
    assert reg_map.get_value('reg_0_config', 'v_end') == 4519

    assert reg_map.get_value('reg_2_config', 'parallel_toi_period') == 1125

    assert reg_map.get_value('reg_5_config', 'Trap_Pumping_Dwell_counter') == 12500


def test_str():
    reg_map = RegisterMap("N-FEE")
    assert "sensor_sel" in str(reg_map)


def test_memory_map():

    # This won't work, you can only specify a initial memory map for N-FEE or F-FEE

    reg_map = RegisterMap("Just a Memory Map", memory_map=bytearray([1,2,3,4,5,6,7,8]))
    mem_map = reg_map.get_memory_map_as_ndarray()

    # The memory map should not have been initialised with the above bytearray, so all values
    # should be initialised to 0.

    assert mem_map[0] == 0
    assert mem_map[3] == 0
    assert mem_map[7] == 0

    # Testing memory map for N-FEE

    reg_map = RegisterMap("N-FEE")

    mem_map_1 = reg_map.get_memory_map_as_ndarray()

    reg_map.set_value("reg_6_config", "ccd1_win_list_ptr", 0xCAFEBABE)

    assert reg_map.get_value("reg_6_config", "ccd1_win_list_ptr") == 0xCAFEBABE

    mem_map_2 = reg_map.get_memory_map_as_ndarray()

    # mem_map_1 should not have been changed!

    assert np.array_equal(mem_map_1[0x18:0x1C], [0x0, 0x0, 0x0, 0x0])
    assert np.array_equal(mem_map_2[0x18:0x1C], [0xCA, 0xFE, 0xBA, 0xBE])


def test_decodings():

    assert decode_ccd_order(encode_ccd_order(["CCD1", "CCD2", "CCD3", "CCD4"])) == \
           "ccd_order=0b11100100 (228) CCD1 -> CCD2 -> CCD3 -> CCD4"
    assert decode_ccd_order(encode_ccd_order(["CCD4", "CCD3", "CCD2", "CCD1"])) == \
           "ccd_order=0b00011011 ( 27) CCD4 -> CCD3 -> CCD2 -> CCD1"
    assert decode_ccd_order(encode_ccd_order(["CCD1", "CCD2", "CCD2", "CCD1"])) == \
           "ccd_order=0b00010100 ( 20) CCD1 -> CCD2 -> CCD2 -> CCD1"
    assert decode_ccd_order(encode_ccd_order(["CCD3", "CCD3", "CCD3", "CCD3"])) == \
           "ccd_order=0b10101010 (170) CCD3 -> CCD3 -> CCD3 -> CCD3"
    assert decode_ccd_order(encode_ccd_order(["CCD1", "CCD1", "CCD1", "CCD1"])) == \
           "ccd_order=0b00000000 (  0) CCD1 -> CCD1 -> CCD1 -> CCD1"


def test_key_errors():

    reg_map = RegisterMap('N-FEE')

    with pytest.raises(KeyError):
        reg = reg_map.get_register('UNKNOWN')

    reg = reg_map.get_register('reg_4_config')

    with pytest.raises(KeyError):
        reg_map.set_value(reg.name, 'UNKNOWN', 2049)

    with pytest.raises(KeyError):
        reg_map.get_value('UNKNOWN', 'packet_size')

    with pytest.raises(KeyError):
        reg_map["reg_4_config"]

    # When the key is a variable name that is known we can just use it without
    # also giving the register name.

    assert reg_map["packet_size"] == reg_map["reg_4_config", "packet_size"] == 32140

    # Just giving the variable name will not work we have a variable name that occurs
    # in multiple registers. That should throw a KeyError.

    with pytest.raises(KeyError):
        reg_map["ccd2_vrd_config"]

    with pytest.raises(KeyError):
        reg_map["packet_size"] = 1024

    with pytest.raises(KeyError):
        reg_map[("reg_42_config", "packet_size")] = 1024

    with pytest.raises(KeyError):
        reg_map[("reg_4_config", "packets_size")] = 1024

    assert reg_map[("reg_4_config", "packet_size")] == 32140

    # This also works without specifying the '()' for a tuple

    assert reg_map["reg_4_config", "packet_size"] == 32140

    reg_map[("reg_4_config", "packet_size")] = 1024

    assert reg_map[("reg_4_config", "packet_size")] == 1024

    reg = RegisterMap()

    with pytest.raises(KeyError):
        reg.get_value('unknown', 'no_value')


def test_get_data():

    reg_map = RegisterMap()

    data = reg_map.get_data(0x0000, 4)

    with pytest.raises(IndexError):
        data = reg_map.get_data(0x0000_1000, 4)


def test_ambiguous_names():

    reg = RegisterMap('N-FEE')

    # The following name is ambiguous: it is both in reg_18_config and reg_19_config

    assert reg.get_value('reg_18_config', 'ccd2_vrd_config') == 101
    assert reg.get_value('reg_19_config', 'ccd2_vrd_config') == 14


def test_add_register():

    reg_map = RegisterMap(size=0xFFFF)

    # Unfortunately, CAFE is not 32-bit aligned :)

    with pytest.raises(ValueError):
        _ = Register('reg_42', 0xCAFE)

    reg = Register('reg_42', 0xCAF4)
    var = RegisterValue(reg, 'new_key', 2, 6, 0b010101)

    reg[var.name] = var

    reg_map.add_register(reg)

    assert reg_map.get_value('reg_42', 'new_key') == 0b010101


def test_get_register():

    reg_map = RegisterMap('N-FEE')

    reg: Register = reg_map.get_register('reg_9_config')
    assert reg.name == 'reg_9_config'

    var: RegisterValue = reg['ccd2_win_list_ptr']
    assert var.name == 'ccd2_win_list_ptr'

    print(f"{var!r}")

    assert var.__repr__() == f"{var!r}"
    assert var.__repr__().startswith(f"Register('{reg.name}', '{var.name}'")


def test_set_register_data():

    reg_map = RegisterMap('N-FEE')

    reg_map.set_register_data('reg_4_config', b'\xFF\xFF\xFF\xFF')

    assert int.from_bytes(reg_map.get_register_data('reg_4_config'), 'big') == 0xFFFFFFFF


def test_get_item():

    reg_map = RegisterMap('N-FEE')

    assert reg_map[('reg_2_config', 'parallel_toi_period')] == 1125
    assert reg_map[('reg_0_config', 'v_end')] == 4509

    reg_map = RegisterMap('F-FEE')

    assert reg_map[('DEB_STATUS', 'PLL_STATUS')] == 0


def test_set_item():

    reg_map = RegisterMap(size=0xDDDD)

    reg: Register = Register('reg_42', 0x0FAC)
    var: RegisterValue = RegisterValue(reg, 'new_key', 2, 6, 0b010101)
    reg[var.name] = var

    reg_map.add_register(reg)
    reg_map[('reg_42', 'new_key')] = 0b101010

    assert reg_map[('reg_42', 'new_key')] == 0b101010


def test_bit_variables():
    reg_map = create_register_map()

    b = reg_map.get_register_data('reg_1')

    assert len(b) == 4
    assert b == bytes([0b1101_1001, 0b1001_1011, 0b1000_1111, 0b1111_0001])


def test_compare_register_maps():

    reg_map_1 = create_register_map()
    reg_map_2 = create_register_map()

    diff = compare_register_maps(reg_map_1, reg_map_2)
    assert len(diff) == 0

    reg_map_2.set_value("reg_1", "val_1", 0b0111_0000_0000_1110)
    diff = compare_register_maps(reg_map_1, reg_map_2)
    assert diff[0] == 'reg_1:val_1: 0x8ff1 -> 0x700e'

    # I change reg_map_1 here! not reg_map_2
    reg_map_1.set_value("reg_2", "val_2", 5)

    diff = compare_register_maps(reg_map_1, reg_map_2)
    assert diff[1] == 'reg_2:val_2: 0x05 -> 0x02'


def test_as_dict():

    reg_map_1 = create_register_map()
    _dict = reg_map_1.as_dict()

    assert _dict["reg_1"]["val_1"] == 0b1000_1111_1111_0001
    assert _dict["reg_1"]["val_2"] == 0b1101_1001_1001_1011

    assert _dict["reg_2"]["val_1"] == 0b0001
    assert _dict["reg_2"]["val_2"] == 0b0010
    assert _dict["reg_2"]["val_3"] == 0b0100
    assert _dict["reg_2"]["val_4"] == 0b1000


def test_set_data():
    reg_map = create_register_map()

    with pytest.raises(ValueError):
        reg_map.set_data(0x0005, bytes([0xA, 0xB, 0xC, 0xD]))

    reg_map.set_data(0x0008, bytes([0xA, 0xB, 0xC, 0xD]))
    assert reg_map.get_data(0x0008, 4) == bytes([10,11,12,13])


def create_register_map() -> RegisterMap:
    reg_map = RegisterMap()

    reg: Register = Register('reg_1', 0x0000)

    var: RegisterValue = RegisterValue(reg, 'val_1', 0, 16, 0b1000_1111_1111_0001)
    reg[var.name] = var

    var: RegisterValue = RegisterValue(reg, 'val_2', 16, 16, 0b1101_1001_1001_1011)
    reg[var.name] = var

    reg_map.add_register(reg)

    reg: Register = Register('reg_2', 0x0004)

    var: RegisterValue = RegisterValue(reg, 'val_1', 0, 4, 0b0001)
    reg[var.name] = var

    var: RegisterValue = RegisterValue(reg, 'val_2', 4, 4, 0b0010)
    reg[var.name] = var

    var: RegisterValue = RegisterValue(reg, 'val_3', 8, 4, 0b0100)
    reg[var.name] = var

    var: RegisterValue = RegisterValue(reg, 'val_4', 12, 4, 0b1000)
    reg[var.name] = var

    reg_map.add_register(reg)

    return reg_map
