start: dfg (sm)*

// ********************************************************************************
// State Machine
// ********************************************************************************
sm: "scchart" name ("\"" name* "\"")? "{" (idcl | vdcl | statlist)* "}"

sm_statlist: "region" name ("\"" (name)? "\"")? "{" state+ "}" -> statlist

state: ("initial" | "final")? "state" name ("\"" (name)?  "\"")? action*

action: "immediate" "if" expr "do" statement "go to" name



// ********************************************************************************
// DFG
// ********************************************************************************
dfg: libs? "scchart" name ("\"" name? "\"")? "{" (idcl | vdcl | statlist)* "}"

libs: ("import" "\"" name "\"" )+

idcl: (var_input | var_output | var_in_out)* -> idcl

vdcl: var_local -> vdcl

dcllist: declaration -> dcllist

inst_dcllist: inst_declaration -> dcllist

inst_declaration: inst_datatype variable

declaration: datatype ((",")? variable ("=" expr )?)*

var_input: ("input" dcllist )*

var_output: ("output" dcllist )*

var_in_out: ("input output" dcllist)*

var_local: ("ref" inst_dcllist | dcllist)*

variable: NAME | NAME"."macro_out

name: /\b.+\b/

NAME: /(?!(region|ref|dataflow|input|output|true|false|if\b))[a-zA-Z_]\w*/

// ********************************************************************************
// POU Declaration List
// ********************************************************************************
module_name: NAME -> name

// ********************************************************************************
// Datatypes
// ********************************************************************************
inst_datatype: /(?!(region|ref|dataflow|input|output|bool|int|float\b))[a-zA-Z_]\w*/ -> datatype
datatype: TYPE_BOOL | TYPE_INT | TYPE_DINT | TYPE_UINT | TYPE_REAL | TYPE_TIME | array | macro_name

TYPE_BOOL: "bool"
TYPE_INT: "int"
TYPE_DINT: "int"
TYPE_UINT: "int"
TYPE_REAL: "float"
TYPE_TIME: "int"
array: "ARRAY" "[1" ".." INT "]" "OF" datatype
macro_name: /(?!(region|ref|dataflow|input|output|bool|int|float\b))[a-zA-Z_]\w*/


// ********************************************************************************
// Arithmetic operators
// ********************************************************************************
multiply_with: "("expr("*" expr)*")"
divide_by: "("expr("/" expr)*")"
modulo: expr "%" expr
adding: "("expr ("+" expr)*")"
subtracting: "("expr("-" expr)*")"


// ********************************************************************************
// Functions/User-POUs
// ********************************************************************************
macro: NAME "=" "{" macro_parameter  ("," macro_parameter)* ("}")? (")." macro_out)?  ("seq")? //vorher: ");"
    |NAME "(" expr ("," expr)* (")")? (")." macro_out)? (");")? //~0..30
macro_out: NAME
macro_parameter: expr


// ********************************************************************************
// Boolean operators
// ********************************************************************************
nott: "!" "(" expr ")"
and: "("expr "&"expr ("&"expr)* ")"
xor: "(" "("expr")""^""("expr")"")"
or: "(" expr "|"expr ("|"expr)* ")"


// ********************************************************************************
// Numeric operators
// ********************************************************************************
less_or_equal: expr "<=" expr
greater_or_equal: expr ">=" expr
less_than: expr "<" expr
greater_than: expr ">" expr


// ********************************************************************************
// Equality
// ********************************************************************************
equality: expr "==" expr
inequality: expr "!=" expr


// ********************************************************************************
// General expressions
// ********************************************************************************
expr: equality
	| variable ("[" INT "]")?
	| multiply_with
	| divide_by
	| modulo
	| adding
	| subtracting
	| "(" expr ")"
	| constant
	| nott
	| and
	| xor
	| or
	| sel
	| inequality
	| less_or_equal
	| greater_or_equal
	| less_than
	| greater_than
	| false
	| true
    | macro

false: FALSE
true: TRUE

minus_expression.3: "-" expr


// ********************************************************************************
// Statementlist
// ********************************************************************************
constant: NUMBER | MS_DURATION
constant_int: INT

statlist: "dataflow" "{" statement* "}"

statement: expr | immediate_assignment | if_statement	| case_statement | macro | for_statement | while_statement	| repeat_statement | exit_statement | return_statement //| nothing_statement


// ********************************************************************************
// Assignments
// ********************************************************************************
immediate_assignment: variable("["constant_int"]")? "=" expr ("seq")?
	| variable("["constant_int"]")? "=" minus_expression


// ********************************************************************************
// selection statement
// ********************************************************************************
if_statement: "IF" expr "THEN" statlist ( "ELSE" statlist )? "END_IF" ";"
| "IF" expr "THEN" statlist elsif_statement ( "ELSE" statlist )? "END_IF" ";"

elsif_statement: "ELSIF" expr "THEN" statlist? (elsif_statement)*//~0..30

sel: "(" "(" expr_if ")" "?" "(" expr_t ")" ":" "(" expr_f ")" ")"
expr_if: expr
expr_t: expr
expr_f: expr

//case_statement: "CASE" expr "OF" case_element case_element~0..10 ( "ELSE" statlist )? "END_CASE" ";"
case_statement: "CASE" expr "OF" case_element case_element* ( "ELSE" statlist )? "END_CASE" ";"


case_element: case_list ":" statlist?

case_list: case_list_element ( "," case_list_element )*//~0..30

case_list_element: subrange
                 | constant_int
                 | dotted_name

subrange: constant_int ":" constant_int
dotted_name: constant_int ".." constant_int


// ********************************************************************************
// iteration statements
// ********************************************************************************
for_statement: "FOR" variable ":=" expr "TO" expr ( "BY" expr )? "DO" statlist "END_FOR" ";"

while_statement: "WHILE" expr "DO" statlist "END_WHILE" ";"

repeat_statement: "REPEAT" statlist "UNTIL" expr "END_REPEAT" ";"

exit_statement: "EXIT" ";"

return_statement: "RETURN" ";"


// ********************************************************************************
// Additional Terminals and rules
// ********************************************************************************
MS_DURATION: "T#"NUMBER"s"
FALSE: "false"
TRUE: "true"
DDEL1: "("
DDEL2: ")"


//nothing_statement: NOTHING
NOTHING: ";"

// ********************************************************************************
// Lark statements
// ********************************************************************************
MULTI_LINE_COMMENT: /\(\*.*?\*\)/s
SINGLE_LINE_COMMENT: /\s*/ "//" /[^\n]/*

%ignore WS
%ignore MULTI_LINE_COMMENT
%ignore SINGLE_LINE_COMMENT
%ignore " "  // Ignore spaces
%import common.NUMBER
%import common.INT
%import common.WS
%import common.NEWLINE
%ignore NEWLINE
