"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _Decoding:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _DecodingEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Decoding.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    DEFAULT: _Decoding.ValueType  # 0
    """decoding will be defined by the pipeline config"""

    GREEDY: _Decoding.ValueType  # 1
    """greedy decoding will be used independently on pipeline config"""

    BEAM_SEARCH_WITH_LM: _Decoding.ValueType  # 2
    """beam search will be used independently on pipeline config"""

    BEAM_SEARCH: _Decoding.ValueType  # 3
    """beam search without LM head, to configure decoding mode for seq2seq models."""

class Decoding(_Decoding, metaclass=_DecodingEnumTypeWrapper):
    """/////////////////////////
            Enums         //
    /////////////////////////

    The decoding configuration
    """
    pass

DEFAULT: Decoding.ValueType  # 0
"""decoding will be defined by the pipeline config"""

GREEDY: Decoding.ValueType  # 1
"""greedy decoding will be used independently on pipeline config"""

BEAM_SEARCH_WITH_LM: Decoding.ValueType  # 2
"""beam search will be used independently on pipeline config"""

BEAM_SEARCH: Decoding.ValueType  # 3
"""beam search without LM head, to configure decoding mode for seq2seq models."""

global___Decoding = Decoding


class _InferenceBackend:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _InferenceBackendEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_InferenceBackend.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    INFERENCE_BACKEND_UNKNOWN: _InferenceBackend.ValueType  # 0
    """Not set"""

    INFERENCE_BACKEND_PYTORCH: _InferenceBackend.ValueType  # 1
    """Run pytorch model"""

    INFERENCE_BACKEND_FLAX: _InferenceBackend.ValueType  # 2
    """Run flax model"""

class InferenceBackend(_InferenceBackend, metaclass=_InferenceBackendEnumTypeWrapper):
    pass

INFERENCE_BACKEND_UNKNOWN: InferenceBackend.ValueType  # 0
"""Not set"""

INFERENCE_BACKEND_PYTORCH: InferenceBackend.ValueType  # 1
"""Run pytorch model"""

INFERENCE_BACKEND_FLAX: InferenceBackend.ValueType  # 2
"""Run flax model"""

global___InferenceBackend = InferenceBackend


class TranscribeRequestConfig(google.protobuf.message.Message):
    """/////////////////////////
    Configuration Message //
    /////////////////////////

    Configuration for a request to transcribe audio
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    S2T_PIPELINE_ID_FIELD_NUMBER: builtins.int
    DECODING_FIELD_NUMBER: builtins.int
    LANGUAGE_MODEL_NAME_FIELD_NUMBER: builtins.int
    POST_PROCESSING_FIELD_NUMBER: builtins.int
    UTTERANCE_DETECTION_FIELD_NUMBER: builtins.int
    PYANNOTE_FIELD_NUMBER: builtins.int
    RETURN_OPTIONS_FIELD_NUMBER: builtins.int
    LANGUAGE_FIELD_NUMBER: builtins.int
    TASK_FIELD_NUMBER: builtins.int
    s2t_pipeline_id: typing.Text
    """Required. id of the pipeline (model setup) that will generate audio"""

    decoding: global___Decoding.ValueType
    """Optional. decoding type"""

    language_model_name: typing.Text
    """Name of the language model"""

    @property
    def post_processing(self) -> global___PostProcessingOptions:
        """The postprocessing options"""
        pass
    @property
    def utterance_detection(self) -> global___UtteranceDetectionOptions:
        """The utterance detection options"""
        pass
    @property
    def pyannote(self) -> global___Pyannote:
        """Voice activity detection with pyannote"""
        pass
    @property
    def return_options(self) -> global___TranscriptionReturnOptions:
        """The transcribe return options"""
        pass
    language: typing.Text
    """Optional. Specify language of transcription to return"""

    task: typing.Text
    """Optional. Specify task of s2t model, e.g. 'transcribe' and 'translate'"""

    def __init__(self,
        *,
        s2t_pipeline_id: typing.Text = ...,
        decoding: global___Decoding.ValueType = ...,
        language_model_name: typing.Text = ...,
        post_processing: typing.Optional[global___PostProcessingOptions] = ...,
        utterance_detection: typing.Optional[global___UtteranceDetectionOptions] = ...,
        pyannote: typing.Optional[global___Pyannote] = ...,
        return_options: typing.Optional[global___TranscriptionReturnOptions] = ...,
        language: typing.Optional[typing.Text] = ...,
        task: typing.Optional[typing.Text] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_language",b"_language","_task",b"_task","language",b"language","language_model_name",b"language_model_name","oneof_language_model_name",b"oneof_language_model_name","oneof_post_processing",b"oneof_post_processing","oneof_return_options",b"oneof_return_options","oneof_utterance_detection",b"oneof_utterance_detection","post_processing",b"post_processing","pyannote",b"pyannote","return_options",b"return_options","task",b"task","utterance_detection",b"utterance_detection","voice_activity_detection",b"voice_activity_detection"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_language",b"_language","_task",b"_task","decoding",b"decoding","language",b"language","language_model_name",b"language_model_name","oneof_language_model_name",b"oneof_language_model_name","oneof_post_processing",b"oneof_post_processing","oneof_return_options",b"oneof_return_options","oneof_utterance_detection",b"oneof_utterance_detection","post_processing",b"post_processing","pyannote",b"pyannote","return_options",b"return_options","s2t_pipeline_id",b"s2t_pipeline_id","task",b"task","utterance_detection",b"utterance_detection","voice_activity_detection",b"voice_activity_detection"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_language",b"_language"]) -> typing.Optional[typing_extensions.Literal["language"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_task",b"_task"]) -> typing.Optional[typing_extensions.Literal["task"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["oneof_language_model_name",b"oneof_language_model_name"]) -> typing.Optional[typing_extensions.Literal["language_model_name"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["oneof_post_processing",b"oneof_post_processing"]) -> typing.Optional[typing_extensions.Literal["post_processing"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["oneof_return_options",b"oneof_return_options"]) -> typing.Optional[typing_extensions.Literal["return_options"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["oneof_utterance_detection",b"oneof_utterance_detection"]) -> typing.Optional[typing_extensions.Literal["utterance_detection"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["voice_activity_detection",b"voice_activity_detection"]) -> typing.Optional[typing_extensions.Literal["pyannote"]]: ...
global___TranscribeRequestConfig = TranscribeRequestConfig

class TranscriptionReturnOptions(google.protobuf.message.Message):
    """Configuration of the return values of a transcribe request"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    RETURN_START_OF_SPEECH_FIELD_NUMBER: builtins.int
    RETURN_AUDIO_FIELD_NUMBER: builtins.int
    RETURN_CONFIDENCE_SCORE_FIELD_NUMBER: builtins.int
    RETURN_ALTERNATIVE_TRANSCRIPTIONS_FIELD_NUMBER: builtins.int
    RETURN_ALTERNATIVE_TRANSCRIPTIONS_NR_FIELD_NUMBER: builtins.int
    RETURN_ALTERNATIVE_WORDS_FIELD_NUMBER: builtins.int
    RETURN_ALTERNATIVE_WORDS_NR_FIELD_NUMBER: builtins.int
    RETURN_WORD_TIMING_FIELD_NUMBER: builtins.int
    return_start_of_speech: builtins.bool
    """should server make response indicating that the beginning of the speech was detected"""

    return_audio: builtins.bool
    """should s2t server return audio bytes of transcribed utterance"""

    return_confidence_score: builtins.bool
    """Whether or not to return confidence scores"""

    return_alternative_transcriptions: builtins.bool
    """Whether or not to return alternative results from beam-search"""

    return_alternative_transcriptions_nr: builtins.int
    """Optional. Number of alternative transcriptions results from beam-search or greedy-search"""

    return_alternative_words: builtins.bool
    """Whether or not to return alternative results from beam-search"""

    return_alternative_words_nr: builtins.int
    """Optional. Number of alternative words to results"""

    return_word_timing: builtins.bool
    """Optional. Whether or not to return timestamps of start and end of the words. Only used in TranscribeFile."""

    def __init__(self,
        *,
        return_start_of_speech: builtins.bool = ...,
        return_audio: builtins.bool = ...,
        return_confidence_score: builtins.bool = ...,
        return_alternative_transcriptions: builtins.bool = ...,
        return_alternative_transcriptions_nr: builtins.int = ...,
        return_alternative_words: builtins.bool = ...,
        return_alternative_words_nr: builtins.int = ...,
        return_word_timing: builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["return_alternative_transcriptions",b"return_alternative_transcriptions","return_alternative_transcriptions_nr",b"return_alternative_transcriptions_nr","return_alternative_words",b"return_alternative_words","return_alternative_words_nr",b"return_alternative_words_nr","return_audio",b"return_audio","return_confidence_score",b"return_confidence_score","return_start_of_speech",b"return_start_of_speech","return_word_timing",b"return_word_timing"]) -> None: ...
global___TranscriptionReturnOptions = TranscriptionReturnOptions

class UtteranceDetectionOptions(google.protobuf.message.Message):
    """Configuration of the options to detect utterances"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    TRANSCRIBE_NOT_FINAL_FIELD_NUMBER: builtins.int
    NEXT_CHUNK_TIMEOUT_FIELD_NUMBER: builtins.int
    transcribe_not_final: builtins.bool
    """Return also immediate transcription results"""

    next_chunk_timeout: builtins.float
    """if time between audio chunks exceeds next_chunk_timeout, stream will be stopped"""

    def __init__(self,
        *,
        transcribe_not_final: builtins.bool = ...,
        next_chunk_timeout: builtins.float = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["oneof_transcribe_not_final",b"oneof_transcribe_not_final","transcribe_not_final",b"transcribe_not_final"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["next_chunk_timeout",b"next_chunk_timeout","oneof_transcribe_not_final",b"oneof_transcribe_not_final","transcribe_not_final",b"transcribe_not_final"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["oneof_transcribe_not_final",b"oneof_transcribe_not_final"]) -> typing.Optional[typing_extensions.Literal["transcribe_not_final"]]: ...
global___UtteranceDetectionOptions = UtteranceDetectionOptions

class PostProcessingOptions(google.protobuf.message.Message):
    """Configuration of the post-processing options"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    SPELLING_CORRECTION_FIELD_NUMBER: builtins.int
    NORMALIZE_FIELD_NUMBER: builtins.int
    CONFIG_FIELD_NUMBER: builtins.int
    spelling_correction: builtins.bool
    """Whether to use spelling correction"""

    normalize: builtins.bool
    """Whether to disable normalization"""

    @property
    def config(self) -> global___PostProcessing:
        """Post-processing configuration specifying the active post-processors in the pipeline, as well as their individual
        configuration. If not set, all values are replaced by the ones in current pipeline.
        """
        pass
    def __init__(self,
        *,
        spelling_correction: builtins.bool = ...,
        normalize: builtins.bool = ...,
        config: typing.Optional[global___PostProcessing] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["config",b"config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["config",b"config","normalize",b"normalize","spelling_correction",b"spelling_correction"]) -> None: ...
global___PostProcessingOptions = PostProcessingOptions

class Transcription(google.protobuf.message.Message):
    """/////////////////////////
     TRANSCRIPTION TYPE  //
    /////////////////////////

    The transcription message
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    TRANSCRIPTION_FIELD_NUMBER: builtins.int
    CONFIDENCE_SCORE_FIELD_NUMBER: builtins.int
    WORDS_FIELD_NUMBER: builtins.int
    ALTERNATIVES_FIELD_NUMBER: builtins.int
    transcription: typing.Text
    """The transcribed text"""

    confidence_score: builtins.float
    """The corresponding confidence score. The confidence estimate between 0.0 and 1.0. A higher number
    indicates an estimated greater likelihood that the recognized words are correct.
    """

    @property
    def words(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___WordDetail]:
        """List of the words of transcription with their confidence scores and probable alternatives"""
        pass
    @property
    def alternatives(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___TranscriptionAlternative]:
        """List of alternative transcriptions, confidence scores, words timings and alternative words"""
        pass
    def __init__(self,
        *,
        transcription: typing.Text = ...,
        confidence_score: builtins.float = ...,
        words: typing.Optional[typing.Iterable[global___WordDetail]] = ...,
        alternatives: typing.Optional[typing.Iterable[global___TranscriptionAlternative]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["alternatives",b"alternatives","confidence_score",b"confidence_score","transcription",b"transcription","words",b"words"]) -> None: ...
global___Transcription = Transcription

class TranscriptionAlternative(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    TRANSCRIPT_FIELD_NUMBER: builtins.int
    CONFIDENCE_FIELD_NUMBER: builtins.int
    WORDS_FIELD_NUMBER: builtins.int
    transcript: typing.Text
    """The alternative transcribed text"""

    confidence: builtins.float
    """The corresponding confidence score to the alternative transcript."""

    @property
    def words(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___WordDetail]:
        """A list of word-specific information for each recognized word, including word timings, confidence score of
        the word and alternative words.
        """
        pass
    def __init__(self,
        *,
        transcript: typing.Text = ...,
        confidence: builtins.float = ...,
        words: typing.Optional[typing.Iterable[global___WordDetail]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["confidence",b"confidence","transcript",b"transcript","words",b"words"]) -> None: ...
global___TranscriptionAlternative = TranscriptionAlternative

class WordDetail(google.protobuf.message.Message):
    """WordDetail provides word-specific information for recognized words."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    START_TIME_FIELD_NUMBER: builtins.int
    END_TIME_FIELD_NUMBER: builtins.int
    WORD_FIELD_NUMBER: builtins.int
    CONFIDENCE_FIELD_NUMBER: builtins.int
    WORD_ALTERNATIVES_FIELD_NUMBER: builtins.int
    start_time: builtins.float
    """The start time of the spoken word relative to the beginning of the audio.
    The accuracy of the time offset can vary, and this is an experimental feature.
    """

    end_time: builtins.float
    """The end time of the spoken word relative to the beginning of the audio.
    The accuracy of the time offset can vary, and this is an experimental feature.
    """

    word: typing.Text
    """The recognized word corresponding to this set of information."""

    confidence: builtins.float
    """The corresponding confidence score to the word."""

    @property
    def word_alternatives(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___WordAlternative]:
        """List of alternative words and confidence scores of each."""
        pass
    def __init__(self,
        *,
        start_time: builtins.float = ...,
        end_time: builtins.float = ...,
        word: typing.Text = ...,
        confidence: builtins.float = ...,
        word_alternatives: typing.Optional[typing.Iterable[global___WordAlternative]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["confidence",b"confidence","end_time",b"end_time","start_time",b"start_time","word",b"word","word_alternatives",b"word_alternatives"]) -> None: ...
global___WordDetail = WordDetail

class WordAlternative(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    WORD_FIELD_NUMBER: builtins.int
    CONFIDENCE_FIELD_NUMBER: builtins.int
    word: typing.Text
    """The recognized word corresponding to this set of information."""

    confidence: builtins.float
    """The corresponding confidence score to the alternative word."""

    def __init__(self,
        *,
        word: typing.Text = ...,
        confidence: builtins.float = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["confidence",b"confidence","word",b"word"]) -> None: ...
global___WordAlternative = WordAlternative

class TranscribeStreamRequest(google.protobuf.message.Message):
    """/////////////////////
    TRANSCRIBE STREAM //
    /////////////////////

    Request to transcribe an audio stream
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    AUDIO_CHUNK_FIELD_NUMBER: builtins.int
    END_OF_STREAM_FIELD_NUMBER: builtins.int
    CONFIG_FIELD_NUMBER: builtins.int
    MUTE_AUDIO_FIELD_NUMBER: builtins.int
    audio_chunk: builtins.bytes
    """wav file to transcribe"""

    end_of_stream: builtins.bool
    """if it's the final chunk of the stream"""

    @property
    def config(self) -> global___TranscribeRequestConfig:
        """The configuration to override the default configuration"""
        pass
    mute_audio: builtins.bool
    """Whether or not to mute the audio signal. Defaults to false."""

    def __init__(self,
        *,
        audio_chunk: builtins.bytes = ...,
        end_of_stream: builtins.bool = ...,
        config: typing.Optional[global___TranscribeRequestConfig] = ...,
        mute_audio: builtins.bool = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["config",b"config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["audio_chunk",b"audio_chunk","config",b"config","end_of_stream",b"end_of_stream","mute_audio",b"mute_audio"]) -> None: ...
global___TranscribeStreamRequest = TranscribeStreamRequest

class TranscribeStreamResponse(google.protobuf.message.Message):
    """The response message of a stream transcription"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    TRANSCRIPTIONS_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    FINAL_FIELD_NUMBER: builtins.int
    RETURN_AUDIO_FIELD_NUMBER: builtins.int
    AUDIO_FIELD_NUMBER: builtins.int
    UTTERANCE_START_FIELD_NUMBER: builtins.int
    AUDIO_UUID_FIELD_NUMBER: builtins.int
    CONFIG_FIELD_NUMBER: builtins.int
    @property
    def transcriptions(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Transcription]:
        """List of transcriptions with confidence level"""
        pass
    time: builtins.float
    """The time the transcription took"""

    final: builtins.bool
    """Whether or not this transcription is final (transcribed texts might change if transcription is
    started before the end of an utterance).
    """

    return_audio: builtins.bool
    """is audio bytes of the utterance in response"""

    audio: builtins.bytes
    """audio bytes of the transcribed utterance"""

    utterance_start: builtins.bool
    """is it a start of the utterance"""

    audio_uuid: typing.Text
    """id of the transcribed audio file"""

    @property
    def config(self) -> global___TranscribeRequestConfig:
        """The configuration for the transcription"""
        pass
    def __init__(self,
        *,
        transcriptions: typing.Optional[typing.Iterable[global___Transcription]] = ...,
        time: builtins.float = ...,
        final: builtins.bool = ...,
        return_audio: builtins.bool = ...,
        audio: builtins.bytes = ...,
        utterance_start: builtins.bool = ...,
        audio_uuid: typing.Text = ...,
        config: typing.Optional[global___TranscribeRequestConfig] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["config",b"config","oneof_config",b"oneof_config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["audio",b"audio","audio_uuid",b"audio_uuid","config",b"config","final",b"final","oneof_config",b"oneof_config","return_audio",b"return_audio","time",b"time","transcriptions",b"transcriptions","utterance_start",b"utterance_start"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["oneof_config",b"oneof_config"]) -> typing.Optional[typing_extensions.Literal["config"]]: ...
global___TranscribeStreamResponse = TranscribeStreamResponse

class TranscribeFileRequest(google.protobuf.message.Message):
    """///////////////////
    TRANSCRIBE FILE //
    ///////////////////

    A request to transcribe an audio file
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    AUDIO_FILE_FIELD_NUMBER: builtins.int
    CONFIG_FIELD_NUMBER: builtins.int
    audio_file: builtins.bytes
    """wav file to transcribe"""

    @property
    def config(self) -> global___TranscribeRequestConfig:
        """The configuration to override the default configuration"""
        pass
    def __init__(self,
        *,
        audio_file: builtins.bytes = ...,
        config: typing.Optional[global___TranscribeRequestConfig] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["config",b"config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["audio_file",b"audio_file","config",b"config"]) -> None: ...
global___TranscribeFileRequest = TranscribeFileRequest

class TranscribeFileResponse(google.protobuf.message.Message):
    """The response message for a transcribe file request"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    TRANSCRIPTIONS_FIELD_NUMBER: builtins.int
    TIME_FIELD_NUMBER: builtins.int
    AUDIO_UUID_FIELD_NUMBER: builtins.int
    @property
    def transcriptions(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Transcription]:
        """List of transcriptions with confidence level"""
        pass
    time: builtins.float
    """The time the transcription took"""

    audio_uuid: typing.Text
    """id of the transcribed audio file"""

    def __init__(self,
        *,
        transcriptions: typing.Optional[typing.Iterable[global___Transcription]] = ...,
        time: builtins.float = ...,
        audio_uuid: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["audio_uuid",b"audio_uuid","time",b"time","transcriptions",b"transcriptions"]) -> None: ...
global___TranscribeFileResponse = TranscribeFileResponse

class S2tPipelineId(google.protobuf.message.Message):
    """////////////////////
    GET S2T PIPELINE //
    ////////////////////

    The pipeline id for a specific pipeline configuration
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    ID_FIELD_NUMBER: builtins.int
    id: typing.Text
    """id of the model that will generate audio"""

    def __init__(self,
        *,
        id: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["id",b"id"]) -> None: ...
global___S2tPipelineId = S2tPipelineId

class ListS2tPipelinesRequest(google.protobuf.message.Message):
    """//////////////////////
    LIST S2T PIPELINES //
    //////////////////////

    Request to list all speech-to-text pipelines. Optionally also filter criteria can be set
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    LANGUAGES_FIELD_NUMBER: builtins.int
    PIPELINE_OWNERS_FIELD_NUMBER: builtins.int
    DOMAINS_FIELD_NUMBER: builtins.int
    REGISTERED_ONLY_FIELD_NUMBER: builtins.int
    @property
    def languages(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Filter for languages"""
        pass
    @property
    def pipeline_owners(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Filter for pipeline owners"""
        pass
    @property
    def domains(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Filter for domains"""
        pass
    registered_only: builtins.bool
    """If true, return only registered pipelines.
    Default false: return registered and persisted (from config files) configs.
    """

    def __init__(self,
        *,
        languages: typing.Optional[typing.Iterable[typing.Text]] = ...,
        pipeline_owners: typing.Optional[typing.Iterable[typing.Text]] = ...,
        domains: typing.Optional[typing.Iterable[typing.Text]] = ...,
        registered_only: builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["domains",b"domains","languages",b"languages","pipeline_owners",b"pipeline_owners","registered_only",b"registered_only"]) -> None: ...
global___ListS2tPipelinesRequest = ListS2tPipelinesRequest

class ListS2tPipelinesResponse(google.protobuf.message.Message):
    """ListS2tPipelinesResponse is used to return a list of all speech-to-text pipelines."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    PIPELINE_CONFIGS_FIELD_NUMBER: builtins.int
    @property
    def pipeline_configs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Speech2TextConfig]:
        """A list of Speech2TextConfig message instances containing the configuration of each pipeline.
        Example: [{id: "pipeline_1", description: {language: "en"}, active: true, ...}, {id: "pipeline_2",
        description: {language: "fr"}, active: true, ...}]
        """
        pass
    def __init__(self,
        *,
        pipeline_configs: typing.Optional[typing.Iterable[global___Speech2TextConfig]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["pipeline_configs",b"pipeline_configs"]) -> None: ...
global___ListS2tPipelinesResponse = ListS2tPipelinesResponse

class ListS2tLanguagesRequest(google.protobuf.message.Message):
    """//////////////////////
    LIST S2T LANGUAGES //
    //////////////////////

    ListS2tLanguagesRequest is used to request a list of available languages. Optionally, filters can be set.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    DOMAINS_FIELD_NUMBER: builtins.int
    PIPELINE_OWNERS_FIELD_NUMBER: builtins.int
    @property
    def domains(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Filter for domains.  Example: ["medical", "finance"]"""
        pass
    @property
    def pipeline_owners(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Filter for pipeline owners.
        Example: ["ondewo", "partner_company"]
        """
        pass
    def __init__(self,
        *,
        domains: typing.Optional[typing.Iterable[typing.Text]] = ...,
        pipeline_owners: typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["domains",b"domains","pipeline_owners",b"pipeline_owners"]) -> None: ...
global___ListS2tLanguagesRequest = ListS2tLanguagesRequest

class ListS2tLanguagesResponse(google.protobuf.message.Message):
    """Response message to list available languages"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    LANGUAGES_FIELD_NUMBER: builtins.int
    @property
    def languages(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """available languages"""
        pass
    def __init__(self,
        *,
        languages: typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["languages",b"languages"]) -> None: ...
global___ListS2tLanguagesResponse = ListS2tLanguagesResponse

class ListS2tDomainsRequest(google.protobuf.message.Message):
    """////////////////////
    LIST S2T DOMAINS //
    ////////////////////

    Request message to list available domains. Optionally also filters can be set.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    LANGUAGES_FIELD_NUMBER: builtins.int
    PIPELINE_OWNERS_FIELD_NUMBER: builtins.int
    @property
    def languages(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Filter for languages"""
        pass
    @property
    def pipeline_owners(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Filter for pipeline owner"""
        pass
    def __init__(self,
        *,
        languages: typing.Optional[typing.Iterable[typing.Text]] = ...,
        pipeline_owners: typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["languages",b"languages","pipeline_owners",b"pipeline_owners"]) -> None: ...
global___ListS2tDomainsRequest = ListS2tDomainsRequest

class ListS2tDomainsResponse(google.protobuf.message.Message):
    """Response message to list available domains"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    DOMAINS_FIELD_NUMBER: builtins.int
    @property
    def domains(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """domains available. Example: ["medical", "finance"]"""
        pass
    def __init__(self,
        *,
        domains: typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["domains",b"domains"]) -> None: ...
global___ListS2tDomainsResponse = ListS2tDomainsResponse

class S2TGetServiceInfoResponse(google.protobuf.message.Message):
    """////////////////////
    GET SERVICE INFO //
    ////////////////////

    S2TGetServiceInfoResponse is used to return version information about the speech-to-text service.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    VERSION_FIELD_NUMBER: builtins.int
    version: typing.Text
    """Version number based on semantic versioning, e.g. "4.2.0"."""

    def __init__(self,
        *,
        version: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["version",b"version"]) -> None: ...
global___S2TGetServiceInfoResponse = S2TGetServiceInfoResponse

class Speech2TextConfig(google.protobuf.message.Message):
    """/////////////////////////////////
    SPEECH-2-TEXT PIPELINE CONFIG //
    /////////////////////////////////

    Speech2TextConfig is a configuration message for the speech-to-text pipeline
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    ID_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    ACTIVE_FIELD_NUMBER: builtins.int
    INFERENCE_FIELD_NUMBER: builtins.int
    STREAMING_SERVER_FIELD_NUMBER: builtins.int
    VOICE_ACTIVITY_DETECTION_FIELD_NUMBER: builtins.int
    POST_PROCESSING_FIELD_NUMBER: builtins.int
    LOGGING_FIELD_NUMBER: builtins.int
    id: typing.Text
    """Unique identifier for the configuration."""

    @property
    def description(self) -> global___S2TDescription:
        """Description of the speech-to-text system."""
        pass
    active: builtins.bool
    """Indicates if the configuration is active."""

    @property
    def inference(self) -> global___S2TInference:
        """Configuration for inference models."""
        pass
    @property
    def streaming_server(self) -> global___StreamingServer:
        """Configuration for the streaming server."""
        pass
    @property
    def voice_activity_detection(self) -> global___VoiceActivityDetection:
        """Configuration for voice activity detection."""
        pass
    @property
    def post_processing(self) -> global___PostProcessing:
        """Configuration for post-processing."""
        pass
    @property
    def logging(self) -> global___Logging:
        """Configuration for logging."""
        pass
    def __init__(self,
        *,
        id: typing.Text = ...,
        description: typing.Optional[global___S2TDescription] = ...,
        active: builtins.bool = ...,
        inference: typing.Optional[global___S2TInference] = ...,
        streaming_server: typing.Optional[global___StreamingServer] = ...,
        voice_activity_detection: typing.Optional[global___VoiceActivityDetection] = ...,
        post_processing: typing.Optional[global___PostProcessing] = ...,
        logging: typing.Optional[global___Logging] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["description",b"description","inference",b"inference","logging",b"logging","post_processing",b"post_processing","streaming_server",b"streaming_server","voice_activity_detection",b"voice_activity_detection"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["active",b"active","description",b"description","id",b"id","inference",b"inference","logging",b"logging","post_processing",b"post_processing","streaming_server",b"streaming_server","voice_activity_detection",b"voice_activity_detection"]) -> None: ...
global___Speech2TextConfig = Speech2TextConfig

class S2TDescription(google.protobuf.message.Message):
    """S2TDescription contains descriptive information about the speech-to-text pipeline."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    LANGUAGE_FIELD_NUMBER: builtins.int
    PIPELINE_OWNER_FIELD_NUMBER: builtins.int
    DOMAIN_FIELD_NUMBER: builtins.int
    COMMENTS_FIELD_NUMBER: builtins.int
    language: typing.Text
    """Language of the speech-to-text system."""

    pipeline_owner: typing.Text
    """Owner of the pipeline."""

    domain: typing.Text
    """Domain of the speech-to-text system."""

    comments: typing.Text
    """Comments about the system."""

    def __init__(self,
        *,
        language: typing.Text = ...,
        pipeline_owner: typing.Text = ...,
        domain: typing.Text = ...,
        comments: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["comments",b"comments","domain",b"domain","language",b"language","pipeline_owner",b"pipeline_owner"]) -> None: ...
global___S2TDescription = S2TDescription

class S2TInference(google.protobuf.message.Message):
    """S2TInference contains information about inference models used in the speech-to-text pipeline."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    ACOUSTIC_MODELS_FIELD_NUMBER: builtins.int
    LANGUAGE_MODELS_FIELD_NUMBER: builtins.int
    INFERENCE_BACKEND_FIELD_NUMBER: builtins.int
    @property
    def acoustic_models(self) -> global___AcousticModels:
        """Configuration for the acoustic models."""
        pass
    @property
    def language_models(self) -> global___LanguageModels:
        """Configuration for the language models."""
        pass
    inference_backend: global___InferenceBackend.ValueType
    """Configuration for the inference backend."""

    def __init__(self,
        *,
        acoustic_models: typing.Optional[global___AcousticModels] = ...,
        language_models: typing.Optional[global___LanguageModels] = ...,
        inference_backend: global___InferenceBackend.ValueType = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["acoustic_models",b"acoustic_models","language_models",b"language_models"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["acoustic_models",b"acoustic_models","inference_backend",b"inference_backend","language_models",b"language_models"]) -> None: ...
global___S2TInference = S2TInference

class AcousticModels(google.protobuf.message.Message):
    """AcousticModels contains information about different types of acoustic models."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    TYPE_FIELD_NUMBER: builtins.int
    WAV2VEC_FIELD_NUMBER: builtins.int
    WAV2VEC_TRITON_FIELD_NUMBER: builtins.int
    WHISPER_FIELD_NUMBER: builtins.int
    WHISPER_TRITON_FIELD_NUMBER: builtins.int
    type: typing.Text
    """Type of the acoustic model."""

    @property
    def wav2vec(self) -> global___Wav2Vec:
        """Configuration for the Wav2Vec model."""
        pass
    @property
    def wav2vec_triton(self) -> global___Wav2VecTriton:
        """Configuration for the Wav2Vec model using Triton."""
        pass
    @property
    def whisper(self) -> global___Whisper:
        """Configuration for the Whisper model."""
        pass
    @property
    def whisper_triton(self) -> global___WhisperTriton:
        """Configuration for the Whisper model using Triton."""
        pass
    def __init__(self,
        *,
        type: typing.Text = ...,
        wav2vec: typing.Optional[global___Wav2Vec] = ...,
        wav2vec_triton: typing.Optional[global___Wav2VecTriton] = ...,
        whisper: typing.Optional[global___Whisper] = ...,
        whisper_triton: typing.Optional[global___WhisperTriton] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["wav2vec",b"wav2vec","wav2vec_triton",b"wav2vec_triton","whisper",b"whisper","whisper_triton",b"whisper_triton"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["type",b"type","wav2vec",b"wav2vec","wav2vec_triton",b"wav2vec_triton","whisper",b"whisper","whisper_triton",b"whisper_triton"]) -> None: ...
global___AcousticModels = AcousticModels

class Whisper(google.protobuf.message.Message):
    """Whisper contains information about the Whisper model."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    MODEL_PATH_FIELD_NUMBER: builtins.int
    USE_GPU_FIELD_NUMBER: builtins.int
    LANGUAGE_FIELD_NUMBER: builtins.int
    TASK_FIELD_NUMBER: builtins.int
    model_path: typing.Text
    """Path to the model."""

    use_gpu: builtins.bool
    """Indicates if GPU is used."""

    language: typing.Text
    """Default language of the model."""

    task: typing.Text
    """Default task of the model."""

    def __init__(self,
        *,
        model_path: typing.Text = ...,
        use_gpu: builtins.bool = ...,
        language: typing.Text = ...,
        task: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["language",b"language","model_path",b"model_path","task",b"task","use_gpu",b"use_gpu"]) -> None: ...
global___Whisper = Whisper

class WhisperTriton(google.protobuf.message.Message):
    """WhisperTriton contains information about the Whisper model using Triton."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    PROCESSOR_PATH_FIELD_NUMBER: builtins.int
    TRITON_MODEL_NAME_FIELD_NUMBER: builtins.int
    TRITON_MODEL_VERSION_FIELD_NUMBER: builtins.int
    CHECK_STATUS_TIMEOUT_FIELD_NUMBER: builtins.int
    LANGUAGE_FIELD_NUMBER: builtins.int
    TASK_FIELD_NUMBER: builtins.int
    TRITON_SERVER_HOST_FIELD_NUMBER: builtins.int
    TRITON_SERVER_PORT_FIELD_NUMBER: builtins.int
    processor_path: typing.Text
    """Path to the processor."""

    triton_model_name: typing.Text
    """Name of the Triton model."""

    triton_model_version: typing.Text
    """Version of the Triton model."""

    check_status_timeout: builtins.int
    """Timeout for checking model status."""

    language: typing.Text
    """Default language of the model."""

    task: typing.Text
    """Default task of the model. E.g., transcribe, translate, etc."""

    triton_server_host: typing.Text
    """Host name of triton inference server that serves the WhisperTriton model"""

    triton_server_port: builtins.int
    """Port number of triton inference server that serves the WhisperTriton model"""

    def __init__(self,
        *,
        processor_path: typing.Text = ...,
        triton_model_name: typing.Text = ...,
        triton_model_version: typing.Text = ...,
        check_status_timeout: builtins.int = ...,
        language: typing.Text = ...,
        task: typing.Text = ...,
        triton_server_host: typing.Text = ...,
        triton_server_port: builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["check_status_timeout",b"check_status_timeout","language",b"language","processor_path",b"processor_path","task",b"task","triton_model_name",b"triton_model_name","triton_model_version",b"triton_model_version","triton_server_host",b"triton_server_host","triton_server_port",b"triton_server_port"]) -> None: ...
global___WhisperTriton = WhisperTriton

class Wav2Vec(google.protobuf.message.Message):
    """Wav2Vec contains information about the Wav2Vec model."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    MODEL_PATH_FIELD_NUMBER: builtins.int
    USE_GPU_FIELD_NUMBER: builtins.int
    model_path: typing.Text
    """Path to the model."""

    use_gpu: builtins.bool
    """Indicates if GPU is used."""

    def __init__(self,
        *,
        model_path: typing.Text = ...,
        use_gpu: builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["model_path",b"model_path","use_gpu",b"use_gpu"]) -> None: ...
global___Wav2Vec = Wav2Vec

class Wav2VecTriton(google.protobuf.message.Message):
    """Wav2VecTriton contains information about the Wav2Vec model using Triton."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    PROCESSOR_PATH_FIELD_NUMBER: builtins.int
    TRITON_MODEL_NAME_FIELD_NUMBER: builtins.int
    TRITON_MODEL_VERSION_FIELD_NUMBER: builtins.int
    CHECK_STATUS_TIMEOUT_FIELD_NUMBER: builtins.int
    TRITON_SERVER_HOST_FIELD_NUMBER: builtins.int
    TRITON_SERVER_PORT_FIELD_NUMBER: builtins.int
    processor_path: typing.Text
    """Path to the processor."""

    triton_model_name: typing.Text
    """Name of the Triton model."""

    triton_model_version: typing.Text
    """Version of the Triton model."""

    check_status_timeout: builtins.int
    """Timeout for checking model status."""

    triton_server_host: typing.Text
    """Host name of triton inference server that serves the Wav2VecTriton model"""

    triton_server_port: builtins.int
    """Port number of triton inference server that serves the Wav2VecTriton model"""

    def __init__(self,
        *,
        processor_path: typing.Text = ...,
        triton_model_name: typing.Text = ...,
        triton_model_version: typing.Text = ...,
        check_status_timeout: builtins.int = ...,
        triton_server_host: typing.Text = ...,
        triton_server_port: builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["check_status_timeout",b"check_status_timeout","processor_path",b"processor_path","triton_model_name",b"triton_model_name","triton_model_version",b"triton_model_version","triton_server_host",b"triton_server_host","triton_server_port",b"triton_server_port"]) -> None: ...
global___Wav2VecTriton = Wav2VecTriton

class PtFiles(google.protobuf.message.Message):
    """PtFiles contains information about PT files."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    PATH_FIELD_NUMBER: builtins.int
    STEP_FIELD_NUMBER: builtins.int
    path: typing.Text
    """Path to the PT files."""

    step: typing.Text
    """Step for the PT files."""

    def __init__(self,
        *,
        path: typing.Text = ...,
        step: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["path",b"path","step",b"step"]) -> None: ...
global___PtFiles = PtFiles

class CkptFile(google.protobuf.message.Message):
    """CkptFile contains information about checkpoint files."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    PATH_FIELD_NUMBER: builtins.int
    path: typing.Text
    """Path to the checkpoint file."""

    def __init__(self,
        *,
        path: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["path",b"path"]) -> None: ...
global___CkptFile = CkptFile

class LanguageModels(google.protobuf.message.Message):
    """LanguageModels contains information about language models."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    PATH_FIELD_NUMBER: builtins.int
    BEAM_SIZE_FIELD_NUMBER: builtins.int
    DEFAULT_LM_FIELD_NUMBER: builtins.int
    BEAM_SEARCH_SCORER_ALPHA_FIELD_NUMBER: builtins.int
    BEAM_SEARCH_SCORER_BETA_FIELD_NUMBER: builtins.int
    path: typing.Text
    """Path to the directory of language models."""

    beam_size: builtins.int
    """Beam size for the search algorithm."""

    default_lm: typing.Text
    """Default language model to be selected if none is given."""

    beam_search_scorer_alpha: builtins.float
    """Weight for the language model scorer (alpha)."""

    beam_search_scorer_beta: builtins.float
    """Weight for the word insertion penalty (beta)."""

    def __init__(self,
        *,
        path: typing.Text = ...,
        beam_size: builtins.int = ...,
        default_lm: typing.Text = ...,
        beam_search_scorer_alpha: builtins.float = ...,
        beam_search_scorer_beta: builtins.float = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["beam_search_scorer_alpha",b"beam_search_scorer_alpha","beam_search_scorer_beta",b"beam_search_scorer_beta","beam_size",b"beam_size","default_lm",b"default_lm","path",b"path"]) -> None: ...
global___LanguageModels = LanguageModels

class StreamingServer(google.protobuf.message.Message):
    """StreamingServer contains information about the streaming server."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    HOST_FIELD_NUMBER: builtins.int
    PORT_FIELD_NUMBER: builtins.int
    OUTPUT_STYLE_FIELD_NUMBER: builtins.int
    STREAMING_SPEECH_RECOGNITION_FIELD_NUMBER: builtins.int
    host: typing.Text
    """Hostname of the streaming server."""

    port: builtins.int
    """Port number of the streaming server."""

    output_style: typing.Text
    """Output style for the streaming server."""

    @property
    def streaming_speech_recognition(self) -> global___StreamingSpeechRecognition:
        """Configuration for streaming speech recognition."""
        pass
    def __init__(self,
        *,
        host: typing.Text = ...,
        port: builtins.int = ...,
        output_style: typing.Text = ...,
        streaming_speech_recognition: typing.Optional[global___StreamingSpeechRecognition] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["streaming_speech_recognition",b"streaming_speech_recognition"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["host",b"host","output_style",b"output_style","port",b"port","streaming_speech_recognition",b"streaming_speech_recognition"]) -> None: ...
global___StreamingServer = StreamingServer

class StreamingSpeechRecognition(google.protobuf.message.Message):
    """StreamingSpeechRecognition contains information about streaming speech recognition settings."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    TRANSCRIBE_NOT_FINAL_FIELD_NUMBER: builtins.int
    DECODING_METHOD_FIELD_NUMBER: builtins.int
    SAMPLING_RATE_FIELD_NUMBER: builtins.int
    MIN_AUDIO_CHUNK_SIZE_FIELD_NUMBER: builtins.int
    NEXT_CHUNK_TIMEOUT_FIELD_NUMBER: builtins.int
    transcribe_not_final: builtins.bool
    """Indicates whether to transcribe non-final results."""

    decoding_method: typing.Text
    """Decoding method for speech recognition."""

    sampling_rate: builtins.int
    """Sampling rate for audio input."""

    min_audio_chunk_size: builtins.int
    """Minimum audio chunk size for processing."""

    next_chunk_timeout: builtins.float
    """Timeout between audio chunks; if exceeded, the stream will be stopped."""

    def __init__(self,
        *,
        transcribe_not_final: builtins.bool = ...,
        decoding_method: typing.Text = ...,
        sampling_rate: builtins.int = ...,
        min_audio_chunk_size: builtins.int = ...,
        next_chunk_timeout: builtins.float = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["decoding_method",b"decoding_method","min_audio_chunk_size",b"min_audio_chunk_size","next_chunk_timeout",b"next_chunk_timeout","sampling_rate",b"sampling_rate","transcribe_not_final",b"transcribe_not_final"]) -> None: ...
global___StreamingSpeechRecognition = StreamingSpeechRecognition

class VoiceActivityDetection(google.protobuf.message.Message):
    """VoiceActivityDetection contains information about voice activity detection settings."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    ACTIVE_FIELD_NUMBER: builtins.int
    SAMPLING_RATE_FIELD_NUMBER: builtins.int
    PYANNOTE_FIELD_NUMBER: builtins.int
    active: typing.Text
    """Indicates if voice activity detection is active."""

    sampling_rate: builtins.int
    """Sampling rate for voice activity detection."""

    @property
    def pyannote(self) -> global___Pyannote:
        """Configuration for the Pyannote model."""
        pass
    def __init__(self,
        *,
        active: typing.Text = ...,
        sampling_rate: builtins.int = ...,
        pyannote: typing.Optional[global___Pyannote] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["pyannote",b"pyannote"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["active",b"active","pyannote",b"pyannote","sampling_rate",b"sampling_rate"]) -> None: ...
global___VoiceActivityDetection = VoiceActivityDetection

class Pyannote(google.protobuf.message.Message):
    """Pyannote contains configuration for the Pyannote voice activity detection model.
    Library: [pyannote-audio](https://github.com/pyannote/pyannote-audio/blob/develop/tutorials/voice_activity_detection.ipynb)
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    MODEL_NAME_FIELD_NUMBER: builtins.int
    MIN_AUDIO_SIZE_FIELD_NUMBER: builtins.int
    MIN_DURATION_OFF_FIELD_NUMBER: builtins.int
    MIN_DURATION_ON_FIELD_NUMBER: builtins.int
    TRITON_SERVER_HOST_FIELD_NUMBER: builtins.int
    TRITON_SERVER_PORT_FIELD_NUMBER: builtins.int
    model_name: typing.Text
    """Full name of the Pyannote model."""

    min_audio_size: builtins.int
    """Minimum audio size for processing."""

    min_duration_off: builtins.float
    """Fill inactive regions shorter than that many seconds.
    Example [notebook](https://github.com/pyannote/pyannote-audio/blob/develop/tutorials/voice_activity_detection.ipynb)
    """

    min_duration_on: builtins.float
    """Remove active regions shorter than that many seconds
    Example [notebook](https://github.com/pyannote/pyannote-audio/blob/develop/tutorials/voice_activity_detection.ipynb)
    """

    triton_server_host: typing.Text
    """Host name of triton inference server that serves the Pyannote model"""

    triton_server_port: builtins.int
    """Port number of triton inference server that serves the Pyannote model"""

    def __init__(self,
        *,
        model_name: typing.Text = ...,
        min_audio_size: builtins.int = ...,
        min_duration_off: builtins.float = ...,
        min_duration_on: builtins.float = ...,
        triton_server_host: typing.Text = ...,
        triton_server_port: builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["min_audio_size",b"min_audio_size","min_duration_off",b"min_duration_off","min_duration_on",b"min_duration_on","model_name",b"model_name","triton_server_host",b"triton_server_host","triton_server_port",b"triton_server_port"]) -> None: ...
global___Pyannote = Pyannote

class PostProcessing(google.protobuf.message.Message):
    """PostProcessing contains the configuration for post-processing."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    PIPELINE_FIELD_NUMBER: builtins.int
    POST_PROCESSORS_FIELD_NUMBER: builtins.int
    @property
    def pipeline(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """List of names of active post-processors."""
        pass
    @property
    def post_processors(self) -> global___PostProcessors:
        """Post-processor configurations."""
        pass
    def __init__(self,
        *,
        pipeline: typing.Optional[typing.Iterable[typing.Text]] = ...,
        post_processors: typing.Optional[global___PostProcessors] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["post_processors",b"post_processors"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["pipeline",b"pipeline","post_processors",b"post_processors"]) -> None: ...
global___PostProcessing = PostProcessing

class PostProcessors(google.protobuf.message.Message):
    """PostProcessors contains configurations for post-processors."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    SYM_SPELL_FIELD_NUMBER: builtins.int
    NORMALIZATION_FIELD_NUMBER: builtins.int
    @property
    def sym_spell(self) -> global___SymSpell:
        """Configuration of the SymSpell spelling correction."""
        pass
    @property
    def normalization(self) -> global___S2TNormalization:
        """Configuration of the normalization object."""
        pass
    def __init__(self,
        *,
        sym_spell: typing.Optional[global___SymSpell] = ...,
        normalization: typing.Optional[global___S2TNormalization] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["normalization",b"normalization","sym_spell",b"sym_spell"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["normalization",b"normalization","sym_spell",b"sym_spell"]) -> None: ...
global___PostProcessors = PostProcessors

class SymSpell(google.protobuf.message.Message):
    """SymSpell contains configuration for the SymSpell spelling correction."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    DICT_PATH_FIELD_NUMBER: builtins.int
    MAX_DICTIONARY_EDIT_DISTANCE_FIELD_NUMBER: builtins.int
    PREFIX_LENGTH_FIELD_NUMBER: builtins.int
    dict_path: typing.Text
    """Path to the dictionary used by symspell"""

    max_dictionary_edit_distance: builtins.int
    """The maximal edit-distance to consider for spelling correction (affects performance - bigger number
    takes longer to process!)
    """

    prefix_length: builtins.int
    """The length (number of characters) of the prefix to consider for filtering"""

    def __init__(self,
        *,
        dict_path: typing.Text = ...,
        max_dictionary_edit_distance: builtins.int = ...,
        prefix_length: builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["dict_path",b"dict_path","max_dictionary_edit_distance",b"max_dictionary_edit_distance","prefix_length",b"prefix_length"]) -> None: ...
global___SymSpell = SymSpell

class S2TNormalization(google.protobuf.message.Message):
    """S2TNormalization contains configuration for the speech-to-text normalization."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    LANGUAGE_FIELD_NUMBER: builtins.int
    language: typing.Text
    """Language for normalization of transcriptions."""

    def __init__(self,
        *,
        language: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["language",b"language"]) -> None: ...
global___S2TNormalization = S2TNormalization

class Logging(google.protobuf.message.Message):
    """Logging contains configuration for logging."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    TYPE_FIELD_NUMBER: builtins.int
    PATH_FIELD_NUMBER: builtins.int
    type: typing.Text
    """Type of logging."""

    path: typing.Text
    """Path for logging."""

    def __init__(self,
        *,
        type: typing.Text = ...,
        path: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["path",b"path","type",b"type"]) -> None: ...
global___Logging = Logging

class ListS2tLanguageModelsRequest(google.protobuf.message.Message):
    """/////////////////////////////////////////
    GET LIST OF AVAILABLE LANGUAGE MODELS //
    /////////////////////////////////////////

    ListS2tLanguageModelsRequest is used to request a list of available language models for specified pipelines.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    IDS_FIELD_NUMBER: builtins.int
    @property
    def ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """List of pipeline IDs to retrieve their available language models.
        Example: ["pipeline_1", "pipeline_2"]
        """
        pass
    def __init__(self,
        *,
        ids: typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["ids",b"ids"]) -> None: ...
global___ListS2tLanguageModelsRequest = ListS2tLanguageModelsRequest

class LanguageModelPipelineId(google.protobuf.message.Message):
    """LanguageModelPipelineId contains information about a pipeline and its available language models."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    PIPELINE_ID_FIELD_NUMBER: builtins.int
    MODEL_NAMES_FIELD_NUMBER: builtins.int
    pipeline_id: typing.Text
    """A pipeline ID. Example: "pipeline_1" """

    @property
    def model_names(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """A list of all available language models for the corresponding pipeline ID. Example: ["model_1", "model_2"]"""
        pass
    def __init__(self,
        *,
        pipeline_id: typing.Text = ...,
        model_names: typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["model_names",b"model_names","pipeline_id",b"pipeline_id"]) -> None: ...
global___LanguageModelPipelineId = LanguageModelPipelineId

class ListS2tLanguageModelsResponse(google.protobuf.message.Message):
    """ListS2tLanguageModelsResponse is used to return the available language models for specified pipelines."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    LM_PIPELINE_IDS_FIELD_NUMBER: builtins.int
    @property
    def lm_pipeline_ids(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___LanguageModelPipelineId]:
        """Response is a list of LanguageModelPipelineId, where each element contains a pipeline ID and its associated
        language models.
        Example: [{pipeline_id: "pipeline_1", model_names: ["model_1", "model_2"]}, {pipeline_id: "pipeline_2",
        model_names: ["model_3"]}]
        """
        pass
    def __init__(self,
        *,
        lm_pipeline_ids: typing.Optional[typing.Iterable[global___LanguageModelPipelineId]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["lm_pipeline_ids",b"lm_pipeline_ids"]) -> None: ...
global___ListS2tLanguageModelsResponse = ListS2tLanguageModelsResponse

class CreateUserLanguageModelRequest(google.protobuf.message.Message):
    """///////////////////////////////////
    CUSTOM LANGUAGE MODEL FEATURES  //
    ///////////////////////////////////

    CreateUserLanguageModelRequest is used to request the creation of a new user-specific language model.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    LANGUAGE_MODEL_NAME_FIELD_NUMBER: builtins.int
    language_model_name: typing.Text
    """Name of the language model to create. Example: "user_lm_1" """

    def __init__(self,
        *,
        language_model_name: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["language_model_name",b"language_model_name"]) -> None: ...
global___CreateUserLanguageModelRequest = CreateUserLanguageModelRequest

class DeleteUserLanguageModelRequest(google.protobuf.message.Message):
    """DeleteUserLanguageModelRequest is used to request the deletion of a user-specific language model."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    LANGUAGE_MODEL_NAME_FIELD_NUMBER: builtins.int
    language_model_name: typing.Text
    """Name of the language model to delete. Example: "user_lm_1" """

    def __init__(self,
        *,
        language_model_name: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["language_model_name",b"language_model_name"]) -> None: ...
global___DeleteUserLanguageModelRequest = DeleteUserLanguageModelRequest

class AddDataToUserLanguageModelRequest(google.protobuf.message.Message):
    """AddDataToUserLanguageModelRequest is used to request the addition of data to a user-specific language model."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    LANGUAGE_MODEL_NAME_FIELD_NUMBER: builtins.int
    ZIPPED_DATA_FIELD_NUMBER: builtins.int
    language_model_name: typing.Text
    """Name of the language model to which to add data. Example: "user_lm_1" """

    zipped_data: builtins.bytes
    """Zip file containing data in the form of text files.
    Example: A zip file with text files containing sentences or phrases in the target language.
    """

    def __init__(self,
        *,
        language_model_name: typing.Text = ...,
        zipped_data: builtins.bytes = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["language_model_name",b"language_model_name","zipped_data",b"zipped_data"]) -> None: ...
global___AddDataToUserLanguageModelRequest = AddDataToUserLanguageModelRequest

class TrainUserLanguageModelRequest(google.protobuf.message.Message):
    """TrainUserLanguageModelRequest is used to request the training of a user-specific language model."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    LANGUAGE_MODEL_NAME_FIELD_NUMBER: builtins.int
    ORDER_FIELD_NUMBER: builtins.int
    language_model_name: typing.Text
    """Name of the language model to train. Example: "user_lm_1" """

    order: builtins.int
    """Order n of the ngram. Example: 3 (for trigram model)"""

    def __init__(self,
        *,
        language_model_name: typing.Text = ...,
        order: builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["language_model_name",b"language_model_name","order",b"order"]) -> None: ...
global___TrainUserLanguageModelRequest = TrainUserLanguageModelRequest
