window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "approval", "modulename": "approval", "kind": "module", "doc": "<h1 id=\"django-approval\"><code>django-approval</code></h1>\n\n<p><img alt=\"Approval logo\" height=\"128\" src=\"../../approval-icon.svg\" title=\"Django Approval\" width=\"128\"/></p>\n\n<p><em>Manage changes to your model instances like a moderator.</em></p>\n\n<h2 id=\"how-to-install\">How to install</h2>\n\n<p>You can install this package via <code>pip</code> or similar tools:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>pip<span class=\"w\"> </span>install<span class=\"w\"> </span>django-approval\n</code></pre>\n</div>\n\n<hr />\n\n<h2 id=\"what-it-does\">What it does</h2>\n\n<p>This package allows a developer to make changes to some models subject to validation before they are\npersisted and visible for the public. It works by changing how some model instances are saved.</p>\n\n<p>If a model is marked as subject to validation, every change saved from instances of that model will be persisted\noutside the model, so that a reviewer can validate the changes or not. Once it's validated, the changes are propagated to\nthe object visible to the public.</p>\n\n<hr />\n\n<h2 id=\"how-to-use\">How to use</h2>\n\n<p>To make a model monitorable, you must follow two things:</p>\n\n<ol>\n<li>You make your model inherit from <code>approval.models.MonitoredModel</code></li>\n<li>You create a second model to hold moderation information for the original model, by creating a class inheriting from <code>approval.models.Sandbox</code> and using <code>approval.models.SandboxMeta</code> as a metaclass.</li>\n</ol>\n\n<h3 id=\"example-model-and-approval-config\">Example model and approval config</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">approval.models</span> <span class=\"kn\">import</span> <span class=\"n\">MonitoredModel</span><span class=\"p\">,</span> <span class=\"n\">Sandbox</span><span class=\"p\">,</span> <span class=\"n\">SandboxMeta</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.conf</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Entry</span><span class=\"p\">(</span><span class=\"n\">MonitoredModel</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Example of content entry.&quot;&quot;&quot;</span>\n    <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">AUTH_USER_MODEL</span><span class=\"p\">,</span> <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CASCADE</span><span class=\"p\">,</span> <span class=\"n\">related_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;entries&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">uuid</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">UUIDField</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=...</span><span class=\"p\">,</span> <span class=\"n\">verbose_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;UUID&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">is_visible</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">BooleanField</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">verbose_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;visible&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">created</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateTimeField</span><span class=\"p\">(</span><span class=\"n\">auto_now_add</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">verbose_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;created date&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">TextField</span><span class=\"p\">(</span><span class=\"n\">blank</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">verbose_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;description&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">TextField</span><span class=\"p\">(</span><span class=\"n\">blank</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">verbose_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;content&quot;</span><span class=\"p\">)</span>\n    <span class=\"o\">...</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">EntryApproval</span><span class=\"p\">(</span><span class=\"n\">Sandbox</span><span class=\"p\">,</span> <span class=\"n\">metaclass</span><span class=\"o\">=</span><span class=\"n\">SandboxMeta</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Content entry moderation sandbox.&quot;&quot;&quot;</span>\n    <span class=\"n\">base</span> <span class=\"o\">=</span> <span class=\"n\">Entry</span>  <span class=\"c1\"># Model to monitor, mandatory</span>\n    <span class=\"n\">approval_fields</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;description&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;content&quot;</span><span class=\"p\">]</span>  <span class=\"c1\"># fields to monitor</span>\n    <span class=\"n\">approval_store_fields</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;is_visible&quot;</span><span class=\"p\">]</span>  <span class=\"c1\"># fiels to not monitor, but to restore</span>\n    <span class=\"n\">approval_default</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;is_visible&quot;</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s2\">&quot;description&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">}</span>  <span class=\"c1\"># default values</span>\n    <span class=\"n\">auto_approve_staff</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n    <span class=\"n\">auto_approve_new</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n    <span class=\"n\">auto_approve_by_request</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n    <span class=\"n\">delete_on_approval</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_get_authors</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"p\">]</span>  <span class=\"c1\"># source refers to the source Entry instance</span>\n</code></pre>\n</div>\n\n<h3 id=\"attributes-and-methods\">Attributes and methods</h3>\n\n<ul>\n<li><code>base</code>: <strong>mandatory</strong>, lets you define to which model the <code>ForeignKey</code> of the approval sandbox will point.</li>\n<li><code>approval_fields</code>: <strong>mandatory</strong>, which fields should go to review upon change.</li>\n<li><code>approval_store_fields</code>: which extra fields should be stored in the approval sandbox, even though they do not trigger an approval cycle by themselves. Default is <code>[]</code>.</li>\n<li><code>approval_default</code>: dictionary of values that should be applied temporary for a new object until approval. Default is <code>dict()</code></li>\n<li><code>auto_approve_staff</code>: automatically approve changes if the instance author is staff. See <code>get_authors</code>. Default is <code>True</code></li>\n<li><code>auto_approve_new</code>: automatically approve changes for new instances. Default is <code>False</code>.</li>\n<li><code>auto_approve_by_request</code>: if the instance gets a <code>request</code> attribute, use it to determine the author of the content. Default is <code>True</code>.</li>\n<li><code>delete_on_approval</code>: if <code>True</code>, when an instance is approved, remove the approval info attached to the object. Not recommended, <code>False</code> by default.</li>\n</ul>\n\n<p>The <code>Sandbox</code> model must at least implement <code>_get_authors(self)</code>, that is used to know who\nare the authors of your instance (since automatic validation can be bypassed if the author is staff, for example).</p>\n\n<p>For the sake of creating new objects with moderation capabilities, <strong>you should have a visibility\nfield in your monitored model</strong>, and set its default value to <code>False</code> through the <code>approval_default</code> attribute\nof the approval model. It should mark new objects as invisible as long as a moderator has not reviewed them.</p>\n\n<hr />\n\n<h3 id=\"use-the-connected-user-as-the-author-of-a-change\">Use the connected user as the author of a change</h3>\n\n<p>You can use the currently authentified user to decide whether an object approval\nstatus can be directly dismissed or approved. You just have to define a <code>request</code>\nattribute on your <code>Entry</code> (or your own model) instance before saving it.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpRequest</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">view_edit_entry</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">HttpRequest</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Fake view to illustrate how it works.&quot;&quot;&quot;</span>\n    <span class=\"n\">entry</span> <span class=\"o\">=</span> <span class=\"o\">...</span>\n    <span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">request</span>\n    <span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<p>Auto-approval will look for a <code>request</code> attribute in the instance and use the\nlogged-in user to test if the instance can be approved or not. To enable this behaviour, you need to \ndefine <code>auto_approve_by_request = True</code> in your sandbox class (<code>EntryApproval</code> in the above example)</p>\n\n<h3 id=\"disable-automatic-approval-handling\">Disable automatic approval handling</h3>\n\n<p>Sometimes you want an environment where signals are not executed. You can disable\nsignals use for the approval application, and thus disable automatic handling of object\napproval. You have to define <code>APPROVAL_DISABLE_SIGNALS</code> in your <code>settings</code> module:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">APPROVAL_DISABLE_SIGNALS</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n</code></pre>\n</div>\n\n<hr />\n\n<h3 id=\"forms\">Forms</h3>\n\n<p>When using Django forms to edit an instance with approval data, by default, you would get\na form initialized with the information of the actual instance. This is normally correct, but\nwith approval monitoring, your changes are not saved into the instance, but in a sandbox.\nThat means that everytime you would want to edit your instance, you would always see the same data\nin the monitored fields.</p>\n\n<p>In order to be able too see your pending changes everytime you edit your instance through a form, \nyou have to add a mixin to your form as follows:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">django</span> <span class=\"kn\">import</span> <span class=\"n\">forms</span>\n<span class=\"kn\">from</span> <span class=\"nn\">approval.forms</span> <span class=\"kn\">import</span> <span class=\"n\">MonitoredForm</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">BookForm</span><span class=\"p\">(</span><span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">ModelForm</span><span class=\"p\">,</span> <span class=\"n\">MonitoredForm</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Entry</span>\n</code></pre>\n</div>\n\n<hr />\n\n<h3 id=\"considerations-for-use\">Considerations for use</h3>\n\n<p><strong>Warning</strong> : Monitored models should not be changed in a pre_save signal.</p>\n"}, {"fullname": "approval.admin", "modulename": "approval.admin", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "approval.admin.monitored", "modulename": "approval.admin.monitored", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "approval.admin.monitored.MonitoredAdmin", "modulename": "approval.admin.monitored", "qualname": "MonitoredAdmin", "kind": "class", "doc": "<p>ModelAdmin mixin for approval-controlled objects.</p>\n\n<p>This class should not be registered into the admin.\nInstead, developers should create a <code>ModelAdmin</code> class derived from this\nclass.</p>\n", "bases": "django.contrib.admin.options.ModelAdmin"}, {"fullname": "approval.admin.monitored.MonitoredAdmin.get_object", "modulename": "approval.admin.monitored", "qualname": "MonitoredAdmin.get_object", "kind": "function", "doc": "<p>Return the desired object, augmented with a request attribute.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">request</span>,</span><span class=\"param\">\t<span class=\"n\">object_id</span>,</span><span class=\"param\">\t<span class=\"n\">from_field</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">approval</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">monitored</span><span class=\"o\">.</span><span class=\"n\">MonitoredModel</span>:</span></span>", "funcdef": "def"}, {"fullname": "approval.admin.monitored.MonitoredAdmin.get_approval_status", "modulename": "approval.admin.monitored", "qualname": "MonitoredAdmin.get_approval_status", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">obj</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "approval.admin.monitored.MonitoredAdmin.media", "modulename": "approval.admin.monitored", "qualname": "MonitoredAdmin.media", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "approval.admin.sandbox", "modulename": "approval.admin.sandbox", "kind": "module", "doc": "<p>Django Admin configuration for approval.</p>\n\n<p>Attributes:\n    SandboxAdmin:\n        The <code>ApprovalAdmin</code> class configures the Administration interface\n        to help admins monitor all the changed still pending in every\n        approval-enabled model.</p>\n"}, {"fullname": "approval.admin.sandbox.SandboxAdmin", "modulename": "approval.admin.sandbox", "qualname": "SandboxAdmin", "kind": "class", "doc": "<p>Moderation of approval sandboxes.</p>\n", "bases": "django.contrib.admin.options.ModelAdmin"}, {"fullname": "approval.admin.sandbox.SandboxAdmin.list_select_related", "modulename": "approval.admin.sandbox", "qualname": "SandboxAdmin.list_select_related", "kind": "variable", "doc": "<p></p>\n", "default_value": "True"}, {"fullname": "approval.admin.sandbox.SandboxAdmin.list_display", "modulename": "approval.admin.sandbox", "qualname": "SandboxAdmin.list_display", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;id&#x27;, &#x27;source&#x27;, &#x27;moderator&#x27;, &#x27;approved&#x27;, &#x27;draft&#x27;, &#x27;updated&#x27;, &#x27;get_sandbox_data&#x27;]"}, {"fullname": "approval.admin.sandbox.SandboxAdmin.readonly_fields", "modulename": "approval.admin.sandbox", "qualname": "SandboxAdmin.readonly_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;source&#x27;]"}, {"fullname": "approval.admin.sandbox.SandboxAdmin.list_display_links", "modulename": "approval.admin.sandbox", "qualname": "SandboxAdmin.list_display_links", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;id&#x27;]"}, {"fullname": "approval.admin.sandbox.SandboxAdmin.list_filter", "modulename": "approval.admin.sandbox", "qualname": "SandboxAdmin.list_filter", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;approved&#x27;, &#x27;draft&#x27;, &#x27;updated&#x27;, &#x27;moderator__is_superuser&#x27;]"}, {"fullname": "approval.admin.sandbox.SandboxAdmin.actions", "modulename": "approval.admin.sandbox", "qualname": "SandboxAdmin.actions", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;do_deny&#x27;, &#x27;do_approve&#x27;]"}, {"fullname": "approval.admin.sandbox.SandboxAdmin.do_deny", "modulename": "approval.admin.sandbox", "qualname": "SandboxAdmin.do_deny", "kind": "function", "doc": "<p>Refuse selected approval requests.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span>, </span><span class=\"param\"><span class=\"n\">queryset</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "approval.admin.sandbox.SandboxAdmin.do_approve", "modulename": "approval.admin.sandbox", "qualname": "SandboxAdmin.do_approve", "kind": "function", "doc": "<p>Accept selected approval requests.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span>, </span><span class=\"param\"><span class=\"n\">queryset</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "approval.admin.sandbox.SandboxAdmin.get_sandbox_data", "modulename": "approval.admin.sandbox", "qualname": "SandboxAdmin.get_sandbox_data", "kind": "function", "doc": "<p>Return a human-readable version of the sandbox contents.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">obj</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "approval.admin.sandbox.SandboxAdmin.media", "modulename": "approval.admin.sandbox", "qualname": "SandboxAdmin.media", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "approval.apps", "modulename": "approval.apps", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "approval.apps.ApprovalConfig", "modulename": "approval.apps", "qualname": "ApprovalConfig", "kind": "class", "doc": "<p>AppConfig for Approval application.</p>\n", "bases": "django.apps.config.AppConfig"}, {"fullname": "approval.apps.ApprovalConfig.name", "modulename": "approval.apps", "qualname": "ApprovalConfig.name", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;approval&#x27;"}, {"fullname": "approval.apps.ApprovalConfig.label", "modulename": "approval.apps", "qualname": "ApprovalConfig.label", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;approval&#x27;"}, {"fullname": "approval.apps.ApprovalConfig.verbose_name", "modulename": "approval.apps", "qualname": "ApprovalConfig.verbose_name", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;approval&#x27;"}, {"fullname": "approval.apps.ApprovalConfig.default_auto_field", "modulename": "approval.apps", "qualname": "ApprovalConfig.default_auto_field", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;django.db.models.BigAutoField&#x27;"}, {"fullname": "approval.apps.ApprovalConfig.ready", "modulename": "approval.apps", "qualname": "ApprovalConfig.ready", "kind": "function", "doc": "<p>Initialize application when Django is ready.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "approval.forms", "modulename": "approval.forms", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "approval.forms.monitored", "modulename": "approval.forms.monitored", "kind": "module", "doc": "<p>Form mixins for approvable models.</p>\n"}, {"fullname": "approval.forms.monitored.logger", "modulename": "approval.forms.monitored", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger approval (DEBUG)&gt;"}, {"fullname": "approval.forms.monitored.MonitoredForm", "modulename": "approval.forms.monitored", "qualname": "MonitoredForm", "kind": "class", "doc": "<p>ModelForm mixin for monitored models.</p>\n"}, {"fullname": "approval.forms.monitored.MonitoredForm.__init__", "modulename": "approval.forms.monitored", "qualname": "MonitoredForm.__init__", "kind": "function", "doc": "<p>Form initializer for ApprovedModel.</p>\n\n<p>The form is initialized with the instance data fetched from the sandbox,\nso you can start editing the object from your last attempt.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "approval.listeners", "modulename": "approval.listeners", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "approval.listeners.monitored", "modulename": "approval.listeners.monitored", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "approval.listeners.monitored.logger", "modulename": "approval.listeners.monitored", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger approval (DEBUG)&gt;"}, {"fullname": "approval.listeners.monitored.before_save", "modulename": "approval.listeners.monitored", "qualname": "before_save", "kind": "function", "doc": "<p>Manage data in the approvable item before it is saved.</p>\n\n<p>For already created objects, update the sandbox with current object status,\nand then revert the changes in the object before saving. Then try automatic\nvalidation on the object.</p>\n\n<p>Args:\n    sender: Class of the instance to process.\n    instance: Instance to process.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">sender</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">django</span><span class=\"o\">.</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">instance</span><span class=\"p\">:</span> <span class=\"n\">approval</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">monitored</span><span class=\"o\">.</span><span class=\"n\">MonitoredModel</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "approval.listeners.monitored.after_save", "modulename": "approval.listeners.monitored", "qualname": "after_save", "kind": "function", "doc": "<p>Manage data in the approvable item after it has been saved for the first time</p>\n\n<p>For new objects, copy the status to the sandbox, and then\nset some fields in the original object to reflect approval defaults\n(generally, it means setting content to invisible or unpublished)</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>sender</strong>:  Generally, the class of the saved object</li>\n<li><strong>instance</strong>:  Instance of the saved object</li>\n<li><strong>raw</strong>:  --</li>\n<li><strong>created</strong>:  Is the instance new in the database ?</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">sender</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">django</span><span class=\"o\">.</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">instance</span><span class=\"p\">:</span> <span class=\"n\">django</span><span class=\"o\">.</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "approval.models", "modulename": "approval.models", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "approval.models.monitored", "modulename": "approval.models.monitored", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "approval.models.monitored.logger", "modulename": "approval.models.monitored", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger approval (DEBUG)&gt;"}, {"fullname": "approval.models.monitored.MonitoredModel", "modulename": "approval.models.monitored", "qualname": "MonitoredModel", "kind": "class", "doc": "<p>Moderated table mixin.</p>\n\n<p>If you want to mark a model to make it subject to a moderation stage,\nyou must make it inherit from <code>MonitoredModel</code>. No need to make it\nalso inherit from <code>django.db.models.Model</code>, since it's already\na parent class of the mixin.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"p\">:</span><span class=\"n\">linenos</span><span class=\"p\">:</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">approval.models</span> <span class=\"kn\">import</span> <span class=\"n\">MonitoredModel</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Post</span><span class=\"p\">(</span><span class=\"n\">MonitoredModel</span><span class=\"p\">):</span>  <span class=\"c1\"># Inherit from MonitoredModel</span>\n    <span class=\"c1\"># Add your own fields. Having a visibility field is a good idea.</span>\n    <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">AUTH_USER_MODEL</span><span class=\"p\">,</span> <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CASCADE</span><span class=\"p\">,</span> <span class=\"n\">related_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;entries&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">is_visible</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">BooleanField</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">verbose_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;visible&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">TextField</span><span class=\"p\">(</span><span class=\"n\">blank</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">verbose_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;content&quot;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Inheriting from <code>MonitoredModel</code> allows provided <code>pre-save</code> and <code>post-save</code> signal\nhooks to automatically manage your model.</p>\n", "bases": "django.db.models.base.Model"}, {"fullname": "approval.models.monitored.MonitoredModel.Meta", "modulename": "approval.models.monitored", "qualname": "MonitoredModel.Meta", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "approval.models.monitored.MonitoredModel.Meta.abstract", "modulename": "approval.models.monitored", "qualname": "MonitoredModel.Meta.abstract", "kind": "variable", "doc": "<p></p>\n", "default_value": "False"}, {"fullname": "approval.models.monitoring", "modulename": "approval.models.monitoring", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "approval.models.monitoring.logger", "modulename": "approval.models.monitoring", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger approval (DEBUG)&gt;"}, {"fullname": "approval.models.monitoring.SandboxMeta", "modulename": "approval.models.monitoring", "qualname": "SandboxMeta", "kind": "class", "doc": "<p>Metaclass to create a dynamic sandbox model.</p>\n", "bases": "django.db.models.base.ModelBase"}, {"fullname": "approval.models.monitoring.Sandbox", "modulename": "approval.models.monitoring", "qualname": "Sandbox", "kind": "class", "doc": "<p>Class providing attributes to configure a Sandbox model.</p>\n\n<p>To use this class, you need to create a model class that inherits from\nthis class, and use <code>SandboxBase</code> as a metaclass:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">EntryApproval</span><span class=\"p\">(</span><span class=\"n\">SandboxModel</span><span class=\"p\">,</span> <span class=\"n\">metaclass</span><span class=\"o\">=</span><span class=\"n\">SandboxBase</span><span class=\"p\">):</span>\n    <span class=\"n\">base</span> <span class=\"o\">=</span> <span class=\"n\">Entry</span>\n    <span class=\"n\">approval_fields</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;description&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;content&quot;</span><span class=\"p\">]</span>\n    <span class=\"n\">approval_store_fields</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;is_visible&quot;</span><span class=\"p\">]</span>\n    <span class=\"n\">approval_default</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;is_visible&quot;</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s2\">&quot;description&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">}</span>\n    <span class=\"n\">auto_approve_staff</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n    <span class=\"n\">auto_approve_new</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n    <span class=\"n\">auto_approve_by_request</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_get_authors</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Iterable</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n\n<p>Attributes:\n    base:\n        Monitored model class.\n    approval_fields (list[str]):\n        List of model field names on the base model that should\n        be monitored and should trigger the approval process.\n    approval_default:\n        When a new object is created and immediately needs approval,\n        define the default values for the source while waiting for\n        approval. For example, for a blog entry, you can set the default <code>published</code>\n        attribute to <code>False</code>.\n    approval_store_fields:\n        List of model field names that should be stored in the approval\n        state, even though the field is not monitored. Those fields will\n        be restored to the object when approved. Generally contains\n        fields used in approval_default.\n    auto_approve_staff:\n        If <code>True</code>, changes made by a staff member should be applied\n        immediately, bypassing moderation.\n    auto_approve_new:\n        If <code>True</code>, a new object created would bypass the approval\n        phase and be immediately persisted.\n    auto_approve_by_request:\n        If <code>True</code> the user in the object's request attribute, if any,\n        is used to test if the object can be automatically approved.\n        If <code>False</code>, use the default object author only.\n    delete_on_approval:\n        If <code>True</code>, the approval metadata will be deleted upon approval.\n        <code>False</code> by default, since you probably want to see who accepted\n        an entry and when.</p>\n"}, {"fullname": "approval.models.monitoring.Sandbox.base", "modulename": "approval.models.monitoring", "qualname": "Sandbox.base", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Type[django.db.models.base.Model]", "default_value": "None"}, {"fullname": "approval.models.monitoring.Sandbox.approval_fields", "modulename": "approval.models.monitoring", "qualname": "Sandbox.approval_fields", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[str]", "default_value": "[]"}, {"fullname": "approval.models.monitoring.Sandbox.approval_store_fields", "modulename": "approval.models.monitoring", "qualname": "Sandbox.approval_store_fields", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[str]", "default_value": "[]"}, {"fullname": "approval.models.monitoring.Sandbox.approval_default", "modulename": "approval.models.monitoring", "qualname": "Sandbox.approval_default", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, object]", "default_value": "{}"}, {"fullname": "approval.models.monitoring.Sandbox.auto_approve_staff", "modulename": "approval.models.monitoring", "qualname": "Sandbox.auto_approve_staff", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "approval.models.monitoring.Sandbox.auto_approve_new", "modulename": "approval.models.monitoring", "qualname": "Sandbox.auto_approve_new", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "approval.models.monitoring.Sandbox.auto_approve_by_request", "modulename": "approval.models.monitoring", "qualname": "Sandbox.auto_approve_by_request", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "approval.models.monitoring.Sandbox.delete_on_approval", "modulename": "approval.models.monitoring", "qualname": "Sandbox.delete_on_approval", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "approval.settings", "modulename": "approval.settings", "kind": "module", "doc": "<p>Default settings for the application.</p>\n"}, {"fullname": "approval.settings.APPROVAL_DISABLE_SIGNALS", "modulename": "approval.settings", "qualname": "APPROVAL_DISABLE_SIGNALS", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "approval.signals", "modulename": "approval.signals", "kind": "module", "doc": "<p>Signals sent by the application.</p>\n"}, {"fullname": "approval.signals.pre_approval", "modulename": "approval.signals", "qualname": "pre_approval", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;django.dispatch.dispatcher.Signal object&gt;"}, {"fullname": "approval.signals.post_approval", "modulename": "approval.signals", "qualname": "post_approval", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;django.dispatch.dispatcher.Signal object&gt;"}, {"fullname": "approval.templatetags", "modulename": "approval.templatetags", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "approval.templatetags.approval", "modulename": "approval.templatetags.approval", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "approval.templatetags.approval.register", "modulename": "approval.templatetags.approval", "qualname": "register", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;django.template.library.Library object&gt;"}, {"fullname": "approval.templatetags.approval.is_approval_pending", "modulename": "approval.templatetags.approval", "qualname": "is_approval_pending", "kind": "function", "doc": "<p>Get whether the instance has an approval pending.</p>\n\n<p>Returns:\n    <code>True</code>: if the object has changes pending.\n    <code>False</code>: if the object has nothing pending.\n    <code>None</code>: if the object is not a <code>MonitoredModel</code> instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instance</span><span class=\"p\">:</span> <span class=\"n\">approval</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">monitored</span><span class=\"o\">.</span><span class=\"n\">MonitoredModel</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "approval.templatetags.approval.is_approval_denied", "modulename": "approval.templatetags.approval", "qualname": "is_approval_denied", "kind": "function", "doc": "<p>Get whether the instance approval was rejected.</p>\n\n<p>Returns:\n    <code>True</code>: if the object has changes rejected.\n    <code>False</code>: if the object is not in that case.\n    <code>None</code>: if the object is not a <code>MonitoredModel</code> instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instance</span><span class=\"p\">:</span> <span class=\"n\">approval</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">monitored</span><span class=\"o\">.</span><span class=\"n\">MonitoredModel</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();