#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import os
import sys
import time
from argparse import ArgumentParser, RawDescriptionHelpFormatter

import rnalib
from rnalib import parse_args

"""Script to call rnalib tools."""

usage = f'''

  rnalib {rnalib.__version__} Copyright (C) 2024.  All rights reserved.

  Distributed on an "AS IS" basis without warranties
  or conditions of any kind, either express or implied.

USAGE
'''


def main(args, usage=usage):
    parser = {}
    # ============================================================================
    parser["tag_tc"] = ArgumentParser(description=usage, formatter_class=RawDescriptionHelpFormatter,
                                      epilog="Example: rnalib tag_tc -b <bam> -o ./test -c 'chr20' -q 20 "
                                             "-F 0 -Q 20")
    parser["tag_tc"].add_argument("-b", "--bam", type=str, required=True, dest="bam_file",
                                  metavar="bam", help="BAM file")
    parser["tag_tc"].add_argument("-o", "--out_prefix", type=str, required=False, dest="out_prefix",
                                  metavar="out_prefix",
                                  help="output out_prefix (default is bam_filepath w/o extension)")
    parser["tag_tc"].add_argument("-w", "--write_density_histogram", action="store_true", required=False,
                                  default=True,
                                  dest="write_density_histogram", help="write density histogram")
    parser["tag_tc"].add_argument("-t", "--tags", type=str, required=False, dest="tags",
                                  metavar="tags", help="BAM tags to be used for the output BAM file. "
                                                       "Default is {'ntc': 'xc', 'ntt': 'xt', 'col': 'YC'}")
    parser["tag_tc"].add_argument("-c", "--included_chrom", type=str, required=False,
                                  dest="included_chrom", metavar="included_chrom",
                                  help="chromosome(s) to be included. Default: all")
    parser["tag_tc"].add_argument("-s", "--snp_vcf", type=str, required=False, dest="snp_vcf_file",
                                  metavar="snp_vcf_file", help="VCF file containing variant calls. "
                                                               "T/C and A/G SNPs will be masked")
    parser["tag_tc"].add_argument("-f", "--fractional_counts", action="store_true", required=False,
                                  dest="fractional_counts", help="fractional counts")
    parser["tag_tc"].add_argument("-q", "--min_mapping_quality", type=int, required=False,
                                  dest="min_mapping_quality", default=0,
                                  metavar="min_mapping_quality", help="minimum mapping quality")
    parser["tag_tc"].add_argument("-F", "--flag_filter", type=int, required=False, dest="flag_filter",
                                  default=rnalib.DEFAULT_FLAG_FILTER,
                                  metavar="flag_filter", help="flag filter for filtering reads. Default is "
                                                              "rnalib.DEFAULT_FLAG_FILTER")
    parser["tag_tc"].add_argument("-Q", "--min_base_quality", type=int, required=False,
                                  default=10, dest="min_base_quality", metavar="min_base_quality",
                                  help="minimum base quality")
    # ============================================================================
    parser["filter_tc"] = ArgumentParser(description=usage, formatter_class=RawDescriptionHelpFormatter,
                                         epilog="Example: rnalib filter_tc -b <bam> -o test_tc2.bam -m 2 (write only "
                                                "reads with at least 2 T/C conversions)")
    parser["filter_tc"].add_argument("-b", "--bam", type=str, required=True, dest="bam_file",
                                     metavar="bam", help="BAM file")
    parser["filter_tc"].add_argument("-o", "--outfile", type=str, required=False, dest="outfile",
                                     metavar="outfile", help="output file (default is {bam_file_name}_tc-only.bam)")
    parser["filter_tc"].add_argument("-m", "--min_tc", type=int, required=False, dest="min_tc",
                                     metavar="min_tc", help="minimum number of T/C conversions (default is 1)")
    parser["filter_tc"].add_argument("--tags", type=str, required=False, dest="tags",
                                     metavar="tags", help="BAM tags to be used for the output BAM file. "
                                                          "Default is {'ntc': 'xc', 'ntt': 'xt', 'col': 'YC'}")
    # ============================================================================
    parser["build_amplicon_resources"] = ArgumentParser(description=usage, formatter_class=RawDescriptionHelpFormatter)
    parser["build_amplicon_resources"].add_argument("n", "--transcriptome_name", required=False,
                                               default='transcriptome', dest="transcriptome_name",
                                               help="Name of the transcriptome (used for naming files)")
    parser["build_amplicon_resources"].add_argument("-b", "--bed_file", required=True, dest="bed_file",
                                               help="BED file with transcript coordinates")
    parser["build_amplicon_resources"].add_argument("-f", "--fasta_file", required=True, dest="fasta_file",
                                               help="FASTA file (reference genome)")
    parser["build_amplicon_resources"].add_argument("-o", "--out_dir", required=True, dest="out_dir",
                                                  help="Output directory")
    parser["build_amplicon_resources"].add_argument("-p", "--padding", required=False, default=100,
                                               dest="padding", help="Pad transcripts by this amount (default is 100)")
    parser["build_amplicon_resources"].add_argument("-e", "--amp_extension", required=False, default=100,
                                               dest="amp_extension",
                                               help="Extend transcripts by this amount (default is 100)")
    # ============================================================================
    mode, args = parse_args(args, parser, usage)
    start_time = time.time()
    # ============================================================================
    if mode == "tag_tc":
        from rnalib.tools import tag_tc
        tag_tc(args.bam_file,
               out_prefix=args.out_prefix,
               write_density_histogram=args.write_density_histogram,
               tags=args.tags,
               included_chrom=args.included_chrom,
               snp_vcf_file=args.snp_vcf_file,
               fractional_counts=args.fractional_counts,
               min_mapping_quality=args.min_mapping_quality,
               flag_filter=args.flag_filter,
               min_base_quality=args.min_base_quality)
    # ============================================================================
    if mode == "filter_tc":
        from rnalib.tools import filter_tc
        filter_tc(bam_file=args.bam_file, out_file=args.outfile,
                  min_tc=args.min_tc, tags=args.tags)
    # ============================================================================
    if mode == "build_amplicon_resources":
        from rnalib.tools import build_amplicon_resources
        build_amplicon_resources(bed_file=args.bed_file, fasta_file=args.fasta_file,
                                 out_dir=args.out_dir, padding=args.padding, amp_extension=args.amp_extension)
    # ============================================================================
    print(f"All done in {time.time() - start_time} sec.")

if __name__ == '__main__':
    main(sys.argv)
