# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .metadata_mode import MetadataMode
from .questions_answered_extractor_llm import QuestionsAnsweredExtractorLlm

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class QuestionsAnsweredExtractor(pydantic.BaseModel):
    """
    Questions answered extractor. Node-level extractor.
    Extracts `questions_this_excerpt_can_answer` metadata field.

    Args:
    llm (Optional[LLM]): LLM
    questions (int): number of questions to extract
    prompt_template (str): template for question extraction,
    embedding_only (bool): whether to use embedding only
    """

    is_text_node_only: typing.Optional[bool]
    show_progress: typing.Optional[bool] = pydantic.Field(description="Whether to show progress.")
    metadata_mode: typing.Optional[MetadataMode] = pydantic.Field(
        description="Metadata mode to use when reading nodes."
    )
    node_text_template: typing.Optional[str] = pydantic.Field(
        description="Template to represent how node text is mixed with metadata text."
    )
    disable_template_rewrite: typing.Optional[bool] = pydantic.Field(description="Disable the node template rewrite.")
    in_place: typing.Optional[bool] = pydantic.Field(description="Whether to process nodes in place.")
    num_workers: typing.Optional[int] = pydantic.Field(
        description="Number of workers to use for concurrent async processing."
    )
    llm: QuestionsAnsweredExtractorLlm = pydantic.Field(description="The LLM to use for generation.")
    questions: typing.Optional[int] = pydantic.Field(description="The number of questions to generate.")
    prompt_template: typing.Optional[str] = pydantic.Field(
        description="Prompt template to use when generating questions."
    )
    embedding_only: typing.Optional[bool] = pydantic.Field(description="Whether to use metadata for emebddings only.")
    class_name: typing.Optional[str]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
