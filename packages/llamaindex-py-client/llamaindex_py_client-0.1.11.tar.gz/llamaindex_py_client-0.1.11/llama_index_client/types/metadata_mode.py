# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class MetadataMode(str, enum.Enum):
    """
    An enumeration.
    """

    ALL = "all"
    EMBED = "embed"
    LLM = "llm"
    NONE = "none"

    def visit(
        self,
        all: typing.Callable[[], T_Result],
        embed: typing.Callable[[], T_Result],
        llm: typing.Callable[[], T_Result],
        none: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is MetadataMode.ALL:
            return all()
        if self is MetadataMode.EMBED:
            return embed()
        if self is MetadataMode.LLM:
            return llm()
        if self is MetadataMode.NONE:
            return none()
