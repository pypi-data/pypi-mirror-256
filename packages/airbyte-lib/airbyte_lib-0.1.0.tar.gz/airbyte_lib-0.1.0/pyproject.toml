[tool.poetry]
name = "airbyte-lib"
description = "AirbyteLib"
version = "0.1.0"
authors = [
    "Airbyte <contact@airbyte.io>",
]
readme = "README.md"
packages = [
    { include = "airbyte_lib" },
]

[tool.poetry.dependencies]
python = "^3.9"
airbyte-cdk = "^0.58.3"
jsonschema = "3.2.0"
orjson = "^3.9.10"
overrides = "^7.4.0"
pandas = "2.1.4"
psycopg2-binary = "^2.9.9"
python-ulid = "^2.2.0"
types-pyyaml = "^6.0.12.12"
ulid = "^1.1"
sqlalchemy = "1.4.51"
snowflake-connector-python = "3.6.0"
snowflake-sqlalchemy = "^1.5.1"
duckdb-engine = "^0.10.0"
requests = "^2.31.0"
pyarrow = "^14.0.2"
rich = "^13.7.0"
pendulum = "<=3.0.0"

[tool.poetry.group.dev.dependencies]
docker = "^7.0.0"
faker = "^21.0.0"
mypy = "^1.7.1"
pandas-stubs = "^2.1.4.231218"
pdoc = "^14.3.0"
pyarrow-stubs = "^10.0.1.7"
pytest = "^7.4.3"
pytest-docker = "^2.0.1"
pytest-mypy = "^0.10.3"
ruff = "^0.1.11"
types-jsonschema = "^4.20.0.0"
google-cloud-secret-manager = "^2.17.0"
types-requests = "2.31.0.4"
freezegun = "^1.4.0"
airbyte-source-faker = "^6.0.0"

[tool.poetry.scripts]
generate-docs = "docs:run"
airbyte-lib-validate-source = "airbyte_lib.validate:run"

[tool.pytest.ini_options]

[tool.ruff]
target-version = "py39"
select = [
    "A",
    "ANN",
    "ARG",
    "ASYNC",
    "B",
    "FBT",
    "BLE",
    "C4",
    "C90",
    "COM",
    "CPY",
    "DTZ",
    "E",
    "ERA",
    "EXE",
    "F",
    "FA",
    "FIX",
    "FLY",
    "FURB",
    "I",
    "ICN",
    "INP",
    "INT",
    "ISC",
    "ICN",
    "LOG",
    "N",
    "PD",
    "PERF",
    "PIE",
    "PGH",
    "PL",
    "PT",
    "PTH",
    "PYI",
    "Q",
    "RET",
    "RSE",
    "RUF",
    "SIM",
    "SLF",
    "SLOT",
    "T10",
    "TCH",
    "TD",
    "TID",
    "TRY",
    "TRY002",
    "TRY003",
    "UP",
    "W",
    "YTT",
]
ignore = [
    "ANN003",
    "ANN101",
    "COM812",
    "EM",
    "DJ",
    "G",
    "ISC001",
    "NPY",
    "PIE790",
    "PERF203",
    "S",
    "TD002",
    "TRIO",
    "INP001",
    "A003",
    "BLE001",
    "ERA001",
    "FIX002",
    "PLW0603",
    "TD003",
]
fixable = [
    "ALL",
]
unfixable = [
    "ERA001",
    "T201",
]
line-length = 100
extend-exclude = [
    "docs",
    "test",
    "tests",
]
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.pylint]
max-args = 8

[tool.ruff.isort]
force-sort-within-sections = false
lines-after-imports = 2
known-first-party = [
    "airbyte_cdk",
    "airbyte_protocol",
]
known-local-folder = [
    "airbyte_lib",
]
required-imports = [
    "from __future__ import annotations",
]
known-third-party = []
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder",
]

[tool.ruff.mccabe]
max-complexity = 24

[tool.ruff.pycodestyle]
ignore-overlong-task-comments = true

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.flake8-annotations]
allow-star-arg-any = false
ignore-fully-untyped = false

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
preview = false
docstring-code-format = true

[tool.mypy]
python_version = "3.9"
ignore_missing_imports = true
follow_imports = "silent"
no_implicit_optional = true
strict_optional = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
warn_return_any = false
check_untyped_defs = true
disallow_untyped_calls = false
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = false
disallow_subclassing_any = true
disallow_any_unimported = false
disallow_any_expr = false
disallow_any_decorated = false
disallow_any_explicit = false
disallow_any_generics = false
allow_untyped_globals = false
allow_redefinition = false
local_partial_types = false
implicit_reexport = true
strict_equality = true
show_error_context = false
show_column_numbers = false
show_error_codes = true
exclude = [
    "docs",
    "test",
    "tests",
]

[[tool.mypy.overrides]]
module = [
    "airbyte_protocol",
    "airbyte_protocol.models",
]
ignore_missing_imports = true

[tool.poe.tasks]
test = "pytest tests"

[tool.airbyte_ci]
extra_poetry_groups = [
    "dev",
]
poe_tasks = [
    "test",
]
required_environment_variables = [
    "GCP_GSM_CREDENTIALS",
]
side_car_docker_engine = true

[build-system]
requires = [
    "poetry-core",
]
build-backend = "poetry.core.masonry.api"
