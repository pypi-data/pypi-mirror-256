[tool.poetry]
name = "jam_data"
version = "0.0.6"
description = "some data utils"
authors = ["qsh.27"]

packages = [
    { include="dnnlib" },
    { include="jam_data" },
]


[tool.poetry.dependencies]
python = ">=3.8.1, <3.12"
setuptools = "^59.6.0"
loguru = "^0.7.2"
einops = "^0.7.0"

[tool.poetry.group.dev.dependencies]
jupyterlab = ">=4.0.0"
pre-commit = "^3.5.0"
pytest = "^7.4.3"
sh = "^2.0.6"
ruff = "^0.1.9"
omegaconf = "^2.3.0"
hydra-core = "^1.3.2"
ipdb = "^0.13.13"

[tool.poetry.group.torch]
optional = true

[tool.poetry.group.torch.dependencies]
torch = {version = "2.1.1"}
torchvision = {version = "0.16.1"}


[tool.poetry.group.cli.dependencies]
click = "^8.1.7"
tqdm = "^4.66.1"

[build-system]
requires = ["poetry-core>=1.0.0", "setuptools ~= 58.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
tero_datatool="jam_data.cli.dataset_tool:main"

[tool.ruff]

exclude = [
  ".conda",
  ".git",
  "dnnlib",
  "jam_data/tero_dataset.py",
  "jam_data/cli/dataset_tool.py",
]

# See https://beta.ruff.rs/docs/rules/ for list of these.
select = [
    "A",   # flake8-builtins
    "ANN", # flake8-annotations
    "COM", # flake8-commas
    "ICN", # flake8-import-conventions
    "BLE", # flake8-blind-except
    "B",   # flake8-bugbear
    # "D",  # pydocstyle
    "E",   # pycodestyle-errors
    "F",   # Pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "W",   # pycodestyle-warnings
    "C90", # mccabe
    "PT",  # flake8-pytest-style
]
ignore = [
    # Disable type annotation requirements for a bunch of stuff
    "ANN002", # args
    "ANN003", # kwargs
    "ANN101", # self
    "ANN102", # cls
    "ANN401", # Let people use "Any" annotations. They are not ideal, but necessary sometimes
    # Other stuff
    "E203", # pep8 and black disagree and black is correct
    # Be chill about shadowing built ins. This is generally safe.
    "A001", # variables
    "A002", # args
    "A003", # class attributes
    "C901", # Let reviewers decide when a function is too complex
]

fixable = [
    "A",
    "B",
    "C",
    "D",
    "E",
    "F",
    "G",
    "I",
    "N",
    "Q",
    "S",
    "T",
    "W",
    "ANN",
    "ARG",
    "BLE",
    "COM",
    "DJ",
    "DTZ",
    "EM",
    "ERA",
    "EXE",
    "FBT",
    "ICN",
    "INP",
    "ISC",
    "NPY",
    "PD",
    "PGH",
    "PIE",
    "PL",
    "PT",
    "PTH",
    "PYI",
    "RET",
    "RSE",
    "RUF",
    "SIM",
    "SLF",
    "TCH",
    "TID",
    "TRY",
    "UP",
    "YTT",
]
unfixable = [
    # Don't auto delete unused stuff as it can get really annoying during development.
    "F841", # unused variable.
    "F401", # unused module
    "B007", # Local variable not accessed
]


line-length = 120
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
target-version = "py310"

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.per-file-ignores]
"**/test_*.py" = [
    # Don't worry about type annotations for tests
    "ANN",
    "D100",    # Missing docstring in public module
    "D101",    # Missing docstring in public class
    "D102",    # Missing docstring in public method
    "D103",    # Missing docstring in public function
    "D104",    # Missing docstring in public package
    "S101",    # Use of assert detected
    "PLR2004", # Magic value used in comparison, consider replacing {value} with a constant variable
    "PT011",   # {exc} is to broad
]
