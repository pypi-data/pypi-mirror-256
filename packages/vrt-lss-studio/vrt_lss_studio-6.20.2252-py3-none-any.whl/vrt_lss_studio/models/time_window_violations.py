# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the Veeroute Studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)

    The version of the OpenAPI document: 6.20.2252
    Contact: servicedesk@veeroute.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from vrt_lss_studio.models.object_metrics import ObjectMetrics

class TimeWindowViolations(BaseModel):
    """
    Statistics of time window violation.   # noqa: E501
    """
    before: Optional[ObjectMetrics] = None
    after: Optional[ObjectMetrics] = None
    __properties = ["before", "after"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TimeWindowViolations:
        """Create an instance of TimeWindowViolations from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of before
        if self.before:
            _dict['before'] = self.before.to_dict()
        # override the default output from pydantic by calling `to_dict()` of after
        if self.after:
            _dict['after'] = self.after.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TimeWindowViolations:
        """Create an instance of TimeWindowViolations from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TimeWindowViolations.parse_obj(obj)

        _obj = TimeWindowViolations.parse_obj({
            "before": ObjectMetrics.from_dict(obj.get("before")) if obj.get("before") is not None else None,
            "after": ObjectMetrics.from_dict(obj.get("after")) if obj.get("after") is not None else None
        })
        return _obj


