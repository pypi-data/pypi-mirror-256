# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the Veeroute Studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)

    The version of the OpenAPI document: 6.20.2252
    Contact: servicedesk@veeroute.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from vrt_lss_studio.models.basic_time_window import BasicTimeWindow

class TableLocationFields(BaseModel):
    """
    Location fields for table.  # noqa: E501
    """
    essence_key: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=1024)]] = Field(default=None, description="Key, unique identifier.")
    essence_type: Optional[StrictStr] = Field(default='LOCATION', description="Essence type.")
    enabled: Optional[StrictBool] = Field(default=True, description="Using essence for calculations.")
    pristine: Optional[StrictBool] = Field(default=True, description="A flag indicating whether changes to the entity have been made relative to the original data. `true` - means that the data is original and has not been changed. ")
    working_time: Optional[BasicTimeWindow] = None
    attributes: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1000000)]] = Field(default='', description="Attributes.")
    __properties = ["essence_key", "essence_type", "enabled", "pristine", "working_time", "attributes"]

    @validator('essence_type')
    def essence_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('LOCATION', 'WORK_WINDOW'):
            raise ValueError("must be one of enum values ('LOCATION', 'WORK_WINDOW')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TableLocationFields:
        """Create an instance of TableLocationFields from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "pristine",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of working_time
        if self.working_time:
            _dict['working_time'] = self.working_time.to_dict()
        # set to None if essence_key (nullable) is None
        # and __fields_set__ contains the field
        if self.essence_key is None and "essence_key" in self.__fields_set__:
            _dict['essence_key'] = None

        # set to None if working_time (nullable) is None
        # and __fields_set__ contains the field
        if self.working_time is None and "working_time" in self.__fields_set__:
            _dict['working_time'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TableLocationFields:
        """Create an instance of TableLocationFields from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TableLocationFields.parse_obj(obj)

        _obj = TableLocationFields.parse_obj({
            "essence_key": obj.get("essence_key"),
            "essence_type": obj.get("essence_type") if obj.get("essence_type") is not None else 'LOCATION',
            "enabled": obj.get("enabled") if obj.get("enabled") is not None else True,
            "pristine": obj.get("pristine") if obj.get("pristine") is not None else True,
            "working_time": BasicTimeWindow.from_dict(obj.get("working_time")) if obj.get("working_time") is not None else None,
            "attributes": obj.get("attributes") if obj.get("attributes") is not None else ''
        })
        return _obj


