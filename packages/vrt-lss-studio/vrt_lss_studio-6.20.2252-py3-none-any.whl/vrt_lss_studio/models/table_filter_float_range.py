# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the Veeroute Studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)

    The version of the OpenAPI document: 6.20.2252
    Contact: servicedesk@veeroute.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json





class TableFilterFloatRange(BaseModel):
    """
    Float range.  # noqa: E501
    """
    var_from: Optional[Union[Annotated[float, Field(le=10000000, strict=True, ge=-10000000)], Annotated[int, Field(le=10000000, strict=True, ge=-10000000)]]] = Field(default=-9999999.9, description="Left side.", alias="from")
    to: Optional[Union[Annotated[float, Field(le=10000000, strict=True, ge=-10000000)], Annotated[int, Field(le=10000000, strict=True, ge=-10000000)]]] = Field(default=9999999.9, description="Right side.")
    __properties = ["from", "to"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TableFilterFloatRange:
        """Create an instance of TableFilterFloatRange from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TableFilterFloatRange:
        """Create an instance of TableFilterFloatRange from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TableFilterFloatRange.parse_obj(obj)

        _obj = TableFilterFloatRange.parse_obj({
            "var_from": obj.get("from") if obj.get("from") is not None else -9999999.9,
            "to": obj.get("to") if obj.get("to") is not None else 9999999.9
        })
        return _obj


