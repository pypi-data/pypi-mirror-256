# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the Veeroute Studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)

    The version of the OpenAPI document: 6.20.2252
    Contact: servicedesk@veeroute.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from vrt_lss_studio.models.feature_lifetime import FeatureLifetime

class PerformerCompatibilities(BaseModel):
    """
    Performer [compatibilities](#section/Description/Compatibilities).   # noqa: E501
    """
    performer_features: Optional[Annotated[List[Annotated[str, Field(min_length=1, strict=True, max_length=256)]], Field(min_length=0, max_length=1000)]] = Field(default=None, description="A list of tags that define a property or requirement. ")
    performer_features_lifetimes: Optional[Annotated[List[FeatureLifetime], Field(min_length=0, max_length=1000)]] = Field(default=None, description="List of feature tag lifetime. ")
    transport_restrictions: Optional[Annotated[List[Annotated[str, Field(min_length=1, strict=True, max_length=256)]], Field(min_length=0, max_length=1000)]] = Field(default=None, description="A list of tags that define a property or requirement. ")
    __properties = ["performer_features", "performer_features_lifetimes", "transport_restrictions"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PerformerCompatibilities:
        """Create an instance of PerformerCompatibilities from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in performer_features_lifetimes (list)
        _items = []
        if self.performer_features_lifetimes:
            for _item in self.performer_features_lifetimes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['performer_features_lifetimes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PerformerCompatibilities:
        """Create an instance of PerformerCompatibilities from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PerformerCompatibilities.parse_obj(obj)

        _obj = PerformerCompatibilities.parse_obj({
            "performer_features": obj.get("performer_features"),
            "performer_features_lifetimes": [FeatureLifetime.from_dict(_item) for _item in obj.get("performer_features_lifetimes")] if obj.get("performer_features_lifetimes") is not None else None,
            "transport_restrictions": obj.get("transport_restrictions")
        })
        return _obj


