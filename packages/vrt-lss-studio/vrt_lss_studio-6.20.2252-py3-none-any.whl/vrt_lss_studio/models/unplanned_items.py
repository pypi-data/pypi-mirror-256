# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the Veeroute Studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)

    The version of the OpenAPI document: 6.20.2252
    Contact: servicedesk@veeroute.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json





class UnplannedItems(BaseModel):
    """
    Unplanned items list.  # noqa: E501
    """
    order_keys: Optional[Annotated[List[Annotated[str, Field(min_length=1, strict=True, max_length=1024)]], Field(min_length=0, max_length=15001)]] = Field(default=None, description="Unplanned order keys list.")
    order_keys_count: Optional[Annotated[int, Field(le=15001, strict=True, ge=0)]] = Field(default=0, description="Unplanned orders count.")
    performer_keys: Optional[Annotated[List[Annotated[str, Field(min_length=1, strict=True, max_length=1024)]], Field(min_length=0, max_length=15001)]] = Field(default=None, description="Unplanned performer keys list.")
    performer_keys_count: Optional[Annotated[int, Field(le=15001, strict=True, ge=0)]] = Field(default=0, description="Unplanned performers count.")
    transport_keys: Optional[Annotated[List[Annotated[str, Field(min_length=1, strict=True, max_length=1024)]], Field(min_length=0, max_length=15001)]] = Field(default=None, description="Unplanned transport keys list.")
    transport_keys_count: Optional[Annotated[int, Field(le=15001, strict=True, ge=0)]] = Field(default=0, description="Unplanned transports count.")
    hardlink_keys: Optional[Annotated[List[Annotated[str, Field(min_length=1, strict=True, max_length=1024)]], Field(min_length=0, max_length=15001)]] = Field(default=None, description="Unplanned hardlink keys list.")
    hardlink_keys_count: Optional[Annotated[int, Field(le=15001, strict=True, ge=0)]] = Field(default=0, description="Unplanned hardlinks count.")
    __properties = ["order_keys", "order_keys_count", "performer_keys", "performer_keys_count", "transport_keys", "transport_keys_count", "hardlink_keys", "hardlink_keys_count"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UnplannedItems:
        """Create an instance of UnplannedItems from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UnplannedItems:
        """Create an instance of UnplannedItems from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UnplannedItems.parse_obj(obj)

        _obj = UnplannedItems.parse_obj({
            "order_keys": obj.get("order_keys"),
            "order_keys_count": obj.get("order_keys_count") if obj.get("order_keys_count") is not None else 0,
            "performer_keys": obj.get("performer_keys"),
            "performer_keys_count": obj.get("performer_keys_count") if obj.get("performer_keys_count") is not None else 0,
            "transport_keys": obj.get("transport_keys"),
            "transport_keys_count": obj.get("transport_keys_count") if obj.get("transport_keys_count") is not None else 0,
            "hardlink_keys": obj.get("hardlink_keys"),
            "hardlink_keys_count": obj.get("hardlink_keys_count") if obj.get("hardlink_keys_count") is not None else 0
        })
        return _obj


