# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the Veeroute Studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)

    The version of the OpenAPI document: 6.20.2252
    Contact: servicedesk@veeroute.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from vrt_lss_studio.models.calculation_settings import CalculationSettings
from vrt_lss_studio.models.geo_settings import GeoSettings
from vrt_lss_studio.models.replan_strategy import ReplanStrategy
from vrt_lss_studio.models.trips_settings import TripsSettings

class ReplanSettings(BaseModel):
    """
    Replanning settings.  # noqa: E501
    """
    replan_strategy: Optional[ReplanStrategy] = None
    trips_settings: Optional[TripsSettings] = None
    geo_settings: Optional[GeoSettings] = None
    calculation_settings: Optional[CalculationSettings] = None
    __properties = ["replan_strategy", "trips_settings", "geo_settings", "calculation_settings"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ReplanSettings:
        """Create an instance of ReplanSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of replan_strategy
        if self.replan_strategy:
            _dict['replan_strategy'] = self.replan_strategy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of trips_settings
        if self.trips_settings:
            _dict['trips_settings'] = self.trips_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of geo_settings
        if self.geo_settings:
            _dict['geo_settings'] = self.geo_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of calculation_settings
        if self.calculation_settings:
            _dict['calculation_settings'] = self.calculation_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ReplanSettings:
        """Create an instance of ReplanSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ReplanSettings.parse_obj(obj)

        _obj = ReplanSettings.parse_obj({
            "replan_strategy": ReplanStrategy.from_dict(obj.get("replan_strategy")) if obj.get("replan_strategy") is not None else None,
            "trips_settings": TripsSettings.from_dict(obj.get("trips_settings")) if obj.get("trips_settings") is not None else None,
            "geo_settings": GeoSettings.from_dict(obj.get("geo_settings")) if obj.get("geo_settings") is not None else None,
            "calculation_settings": CalculationSettings.from_dict(obj.get("calculation_settings")) if obj.get("calculation_settings") is not None else None
        })
        return _obj


