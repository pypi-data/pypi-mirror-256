# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the Veeroute Studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)

    The version of the OpenAPI document: 6.20.2252
    Contact: servicedesk@veeroute.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from vrt_lss_studio.models.demand_type import DemandType

class WebTripChartDemand(BaseModel):
    """
    Demand for chart.  # noqa: E501
    """
    demand_key: Annotated[str, Field(min_length=1, strict=True, max_length=1024)] = Field(description="Demand key.")
    demand_type: DemandType
    __properties = ["demand_key", "demand_type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WebTripChartDemand:
        """Create an instance of WebTripChartDemand from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WebTripChartDemand:
        """Create an instance of WebTripChartDemand from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WebTripChartDemand.parse_obj(obj)

        _obj = WebTripChartDemand.parse_obj({
            "demand_key": obj.get("demand_key"),
            "demand_type": obj.get("demand_type")
        })
        return _obj


