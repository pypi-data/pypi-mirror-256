# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the Veeroute Studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)

    The version of the OpenAPI document: 6.20.2252
    Contact: servicedesk@veeroute.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from vrt_lss_studio.models.model_break import ModelBreak

class WorkAndRestRules(BaseModel):
    """
    Work and rest rules.   # noqa: E501
    """
    first_break: Optional[ModelBreak] = None
    __properties = ["first_break"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WorkAndRestRules:
        """Create an instance of WorkAndRestRules from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of first_break
        if self.first_break:
            _dict['first_break'] = self.first_break.to_dict()
        # set to None if first_break (nullable) is None
        # and __fields_set__ contains the field
        if self.first_break is None and "first_break" in self.__fields_set__:
            _dict['first_break'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WorkAndRestRules:
        """Create an instance of WorkAndRestRules from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WorkAndRestRules.parse_obj(obj)

        _obj = WorkAndRestRules.parse_obj({
            "first_break": ModelBreak.from_dict(obj.get("first_break")) if obj.get("first_break") is not None else None
        })
        return _obj


