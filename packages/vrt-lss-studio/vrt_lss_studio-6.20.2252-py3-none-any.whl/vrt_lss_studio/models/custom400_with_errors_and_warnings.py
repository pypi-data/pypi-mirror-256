# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the Veeroute Studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)

    The version of the OpenAPI document: 6.20.2252
    Contact: servicedesk@veeroute.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from vrt_lss_studio.models.entity_error import EntityError
from vrt_lss_studio.models.entity_warning import EntityWarning
from vrt_lss_studio.models.schema_error import SchemaError
from vrt_lss_studio.models.tracedata import Tracedata

class Custom400WithErrorsAndWarnings(BaseModel):
    """
    400 Error details.  # noqa: E501
    """
    tracedata: Tracedata
    message: Optional[StrictStr] = Field(default=None, description="Error message.")
    schema_errors: Optional[Annotated[List[SchemaError], Field(min_length=0, max_length=15001)]] = Field(default=None, description="Errors list.")
    logical_errors: Optional[Annotated[List[EntityError], Field(min_length=0, max_length=15001)]] = Field(default=None, description="List with fatal errors. ")
    warnings: Optional[Annotated[List[EntityWarning], Field(min_length=0, max_length=15001)]] = Field(default=None, description="Warning list.")
    __properties = ["tracedata", "message", "schema_errors", "logical_errors", "warnings"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Custom400WithErrorsAndWarnings:
        """Create an instance of Custom400WithErrorsAndWarnings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of tracedata
        if self.tracedata:
            _dict['tracedata'] = self.tracedata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in schema_errors (list)
        _items = []
        if self.schema_errors:
            for _item in self.schema_errors:
                if _item:
                    _items.append(_item.to_dict())
            _dict['schema_errors'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in logical_errors (list)
        _items = []
        if self.logical_errors:
            for _item in self.logical_errors:
                if _item:
                    _items.append(_item.to_dict())
            _dict['logical_errors'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in warnings (list)
        _items = []
        if self.warnings:
            for _item in self.warnings:
                if _item:
                    _items.append(_item.to_dict())
            _dict['warnings'] = _items
        # set to None if message (nullable) is None
        # and __fields_set__ contains the field
        if self.message is None and "message" in self.__fields_set__:
            _dict['message'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Custom400WithErrorsAndWarnings:
        """Create an instance of Custom400WithErrorsAndWarnings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Custom400WithErrorsAndWarnings.parse_obj(obj)

        _obj = Custom400WithErrorsAndWarnings.parse_obj({
            "tracedata": Tracedata.from_dict(obj.get("tracedata")) if obj.get("tracedata") is not None else None,
            "message": obj.get("message"),
            "schema_errors": [SchemaError.from_dict(_item) for _item in obj.get("schema_errors")] if obj.get("schema_errors") is not None else None,
            "logical_errors": [EntityError.from_dict(_item) for _item in obj.get("logical_errors")] if obj.get("logical_errors") is not None else None,
            "warnings": [EntityWarning.from_dict(_item) for _item in obj.get("warnings")] if obj.get("warnings") is not None else None
        })
        return _obj


