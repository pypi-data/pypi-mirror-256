# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the Veeroute Studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)

    The version of the OpenAPI document: 6.20.2252
    Contact: servicedesk@veeroute.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from vrt_lss_studio.models.service_name import ServiceName

class Tracedata(BaseModel):
    """
    Data for request tracing.  # noqa: E501
    """
    code: StrictStr = Field(description="Unique process identifier. If an asynchronous process is running, then the code for it will be the same, although other fields may differ. ")
    client: Annotated[str, Field(min_length=2, strict=True, max_length=256)] = Field(description="The unique identifier of the client (`company_key` + `_|_` + `username`) that made the request. ")
    server: Annotated[str, Field(min_length=2, strict=True, max_length=256)] = Field(description="Server identifier.")
    service: ServiceName
    operation: Annotated[str, Field(min_length=3, strict=True, max_length=256)] = Field(description="Operation identifier.")
    time: datetime = Field(description="Date and time service method run in the [ISO 8601](https://tools.ietf.org/html/rfc3339#section-5.6) format.")
    __properties = ["code", "client", "server", "service", "operation", "time"]

    @validator('client')
    def client_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"\w+", value):
            raise ValueError(r"must validate the regular expression /\w+/")
        return value

    @validator('server')
    def server_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"\w+", value):
            raise ValueError(r"must validate the regular expression /\w+/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Tracedata:
        """Create an instance of Tracedata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Tracedata:
        """Create an instance of Tracedata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Tracedata.parse_obj(obj)

        _obj = Tracedata.parse_obj({
            "code": obj.get("code"),
            "client": obj.get("client"),
            "server": obj.get("server"),
            "service": obj.get("service"),
            "operation": obj.get("operation"),
            "time": obj.get("time")
        })
        return _obj


