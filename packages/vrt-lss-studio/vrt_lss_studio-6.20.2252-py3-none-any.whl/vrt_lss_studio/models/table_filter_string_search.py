# coding: utf-8

"""
    VRt.Studio [ST]

    Veeroute Studio API.  # Description  Server part of the Veeroute Studio.  ## Entity relationship diagram  ![erd](../uml/studio.svg)

    The version of the OpenAPI document: 6.20.2252
    Contact: servicedesk@veeroute.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json





class TableFilterStringSearch(BaseModel):
    """
    String search filter.  # noqa: E501
    """
    text: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=1024)]] = Field(default=None, description="String for search.")
    strict: Optional[StrictBool] = Field(default=False, description="Exact match (`false`) or search by occurrence of a substring (`true`).")
    __properties = ["text", "strict"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TableFilterStringSearch:
        """Create an instance of TableFilterStringSearch from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if text (nullable) is None
        # and __fields_set__ contains the field
        if self.text is None and "text" in self.__fields_set__:
            _dict['text'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TableFilterStringSearch:
        """Create an instance of TableFilterStringSearch from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TableFilterStringSearch.parse_obj(obj)

        _obj = TableFilterStringSearch.parse_obj({
            "text": obj.get("text"),
            "strict": obj.get("strict") if obj.get("strict") is not None else False
        })
        return _obj


