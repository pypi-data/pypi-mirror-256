# coding: utf-8

"""
    XI Sdk Resellers

    For Resellers. Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class QuoteListRequestQuoteSearchRequestRetrieveQuoteRequest(BaseModel):
    """
    QuoteListRequestQuoteSearchRequestRetrieveQuoteRequest
    """ # noqa: E501
    quote_number: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="Unique identifier generated by Ingram Micro's CRM specific to each quote. When applying a filter to the quoteNumber and including a partial quote number in the filter, all quotes containing any information included in the filter can be retrieved as a subset of all available customer quotes.", alias="quoteNumber")
    bid_number: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="Special Pricing Bid Number, also referred to as a Dart Number by some vendors, is a unique identifier associated with vendor specific products and discounts.", alias="bidNumber")
    end_user_name: Optional[Annotated[str, Field(strict=True, max_length=300)]] = Field(default=None, description="End User Name is the end customer name that is associated with a quote in Ingram Micro's CRM", alias="endUserName")
    from_date: Optional[date] = Field(default=None, description="Filter to select the beginning date of a desired date range. The default filter is set to the date the user is logged-in to request quotes. Date format: YYYY-MM-DD - An incorrect date input will result in a message \"Date must be entered as YYYY-MM-DD\"", alias="fromDate")
    to_date: Optional[date] = Field(default=None, description="Filter to select the end date of a desired date range. The default number of days to request is the previous 30 days from the date user has logged in. Date format: YYYY-MM-DD - An incorrect date input will result in a message \"Date must be entered as YYYY-MM-DD\"", alias="toDate")
    page_index: Optional[StrictStr] = Field(default=None, description="Page index or page number for the list of quotes being returned. When less than 25 quotes are returned, the page number will be \"1\". In cases where more than 25 quotes are returned, and the default quotes per page are 25 (see recordPerPage), then the list will continue on subsequent pages.", alias="pageIndex")
    records_per_page: Optional[StrictStr] = Field(default=None, description="Number of records (quotes) to display per page in the quote list. The default is 25, but may be increased using the filter by up to 100 records per page. If more than 100 records are requested a message will be returned \"The number of records requested exceeds the 100 record limit.\" ", alias="recordsPerPage")
    sorting: Optional[StrictStr] = Field(default=None, description="Sort applies to the selected column (sortingColumnName) and may be specified in Ascending (asc) or Descending (desc) order. The default sort is Descending (desc) - most recent first.")
    sorting_column_name: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="Refers to the column selected to apply the sorting criteria. The default column is dateCreated and will sort by the most recently created quote first with the following in descending order. The default filter retrieves quotes created within the last 30 days. Filtering allows user to select a specific column to sort: quoteNumber, createdDate, lastModifiedDate, expiryDate, and endUserName.", alias="sortingColumnName")
    third_party_source: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="Unique identifier used to identify the third party source accessing the services.", alias="thirdPartySource")
    __properties: ClassVar[List[str]] = ["quoteNumber", "bidNumber", "endUserName", "fromDate", "toDate", "pageIndex", "recordsPerPage", "sorting", "sortingColumnName", "thirdPartySource"]

    @field_validator('sorting')
    def sorting_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['asc', 'desc']):
            raise ValueError("must be one of enum values ('asc', 'desc')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QuoteListRequestQuoteSearchRequestRetrieveQuoteRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QuoteListRequestQuoteSearchRequestRetrieveQuoteRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "quoteNumber": obj.get("quoteNumber"),
            "bidNumber": obj.get("bidNumber"),
            "endUserName": obj.get("endUserName"),
            "fromDate": obj.get("fromDate"),
            "toDate": obj.get("toDate"),
            "pageIndex": obj.get("pageIndex"),
            "recordsPerPage": obj.get("recordsPerPage"),
            "sorting": obj.get("sorting"),
            "sortingColumnName": obj.get("sortingColumnName"),
            "thirdPartySource": obj.get("thirdPartySource")
        })
        return _obj


