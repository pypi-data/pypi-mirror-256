# coding: utf-8

"""
    XI Sdk Resellers

    For Resellers. Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from xi.sdk.resellers.models.quote_details_quote_detail_response_retrieve_quote_response_account_info import QuoteDetailsQuoteDetailResponseRetrieveQuoteResponseAccountInfo
from xi.sdk.resellers.models.quote_details_quote_detail_response_retrieve_quote_response_contact_info import QuoteDetailsQuoteDetailResponseRetrieveQuoteResponseContactInfo
from xi.sdk.resellers.models.quote_details_quote_detail_response_retrieve_quote_response_end_user import QuoteDetailsQuoteDetailResponseRetrieveQuoteResponseEndUser
from xi.sdk.resellers.models.quote_details_quote_detail_response_retrieve_quote_response_vendor_attributes import QuoteDetailsQuoteDetailResponseRetrieveQuoteResponseVendorAttributes
from xi.sdk.resellers.models.quote_product_list import QuoteProductList
from typing import Optional, Set
from typing_extensions import Self

class QuoteDetailsResponseQuoteDetailResponseRetrieveQuoteResponse(BaseModel):
    """
    QuoteDetailsResponseQuoteDetailResponseRetrieveQuoteResponse
    """ # noqa: E501
    quote_guid: Optional[StrictStr] = Field(default=None, alias="quoteGuid")
    quote_name: Optional[StrictStr] = Field(default=None, alias="quoteName")
    quote_number: Optional[StrictStr] = Field(default=None, alias="quoteNumber")
    quote_expiry_date: Optional[StrictStr] = Field(default=None, alias="quoteExpiryDate")
    revision_number: Optional[StrictStr] = Field(default=None, alias="revisionNumber")
    intro_preamble: Optional[StrictStr] = Field(default=None, alias="introPreamble")
    purchase_instructions: Optional[StrictStr] = Field(default=None, alias="purchaseInstructions")
    legal_terms: Optional[StrictStr] = Field(default=None, alias="legalTerms")
    currency_code: Optional[StrictStr] = Field(default=None, alias="currencyCode")
    price_deviation_id: Optional[StrictStr] = Field(default=None, alias="priceDeviationId")
    price_deviation_start_date: Optional[StrictStr] = Field(default=None, alias="priceDeviationStartDate")
    price_deviation_expiry_date: Optional[StrictStr] = Field(default=None, alias="priceDeviationExpiryDate")
    customer_need: Optional[StrictStr] = Field(default=None, alias="customerNeed")
    solution_proposed: Optional[StrictStr] = Field(default=None, alias="solutionProposed")
    status: Optional[StrictStr] = None
    created: Optional[StrictStr] = None
    modified: Optional[StrictStr] = None
    leasing_calculations: Optional[StrictStr] = Field(default=None, alias="leasingCalculations")
    leasing_instructions: Optional[StrictStr] = Field(default=None, alias="leasingInstructions")
    account_info: Optional[QuoteDetailsQuoteDetailResponseRetrieveQuoteResponseAccountInfo] = Field(default=None, alias="accountInfo")
    contact_info: Optional[QuoteDetailsQuoteDetailResponseRetrieveQuoteResponseContactInfo] = Field(default=None, alias="contactInfo")
    vendor_attributes: Optional[QuoteDetailsQuoteDetailResponseRetrieveQuoteResponseVendorAttributes] = Field(default=None, alias="vendorAttributes")
    end_user: Optional[QuoteDetailsQuoteDetailResponseRetrieveQuoteResponseEndUser] = Field(default=None, alias="endUser")
    quote_product_list: Optional[List[QuoteProductList]] = Field(default=None, alias="quoteProductList")
    total_quote_product_count: Optional[StrictStr] = Field(default=None, alias="totalQuoteProductCount")
    total_extended_msrp: Optional[StrictStr] = Field(default=None, alias="totalExtendedMsrp")
    total_quantity: Optional[StrictStr] = Field(default=None, alias="totalQuantity")
    total_extended_quote_price: Optional[StrictStr] = Field(default=None, alias="totalExtendedQuotePrice")
    __properties: ClassVar[List[str]] = ["quoteGuid", "quoteName", "quoteNumber", "quoteExpiryDate", "revisionNumber", "introPreamble", "purchaseInstructions", "legalTerms", "currencyCode", "priceDeviationId", "priceDeviationStartDate", "priceDeviationExpiryDate", "customerNeed", "solutionProposed", "status", "created", "modified", "leasingCalculations", "leasingInstructions", "accountInfo", "contactInfo", "vendorAttributes", "endUser", "quoteProductList", "totalQuoteProductCount", "totalExtendedMsrp", "totalQuantity", "totalExtendedQuotePrice"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QuoteDetailsResponseQuoteDetailResponseRetrieveQuoteResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of account_info
        if self.account_info:
            _dict['accountInfo'] = self.account_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of contact_info
        if self.contact_info:
            _dict['contactInfo'] = self.contact_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vendor_attributes
        if self.vendor_attributes:
            _dict['vendorAttributes'] = self.vendor_attributes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of end_user
        if self.end_user:
            _dict['endUser'] = self.end_user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in quote_product_list (list)
        _items = []
        if self.quote_product_list:
            for _item in self.quote_product_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['quoteProductList'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QuoteDetailsResponseQuoteDetailResponseRetrieveQuoteResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "quoteGuid": obj.get("quoteGuid"),
            "quoteName": obj.get("quoteName"),
            "quoteNumber": obj.get("quoteNumber"),
            "quoteExpiryDate": obj.get("quoteExpiryDate"),
            "revisionNumber": obj.get("revisionNumber"),
            "introPreamble": obj.get("introPreamble"),
            "purchaseInstructions": obj.get("purchaseInstructions"),
            "legalTerms": obj.get("legalTerms"),
            "currencyCode": obj.get("currencyCode"),
            "priceDeviationId": obj.get("priceDeviationId"),
            "priceDeviationStartDate": obj.get("priceDeviationStartDate"),
            "priceDeviationExpiryDate": obj.get("priceDeviationExpiryDate"),
            "customerNeed": obj.get("customerNeed"),
            "solutionProposed": obj.get("solutionProposed"),
            "status": obj.get("status"),
            "created": obj.get("created"),
            "modified": obj.get("modified"),
            "leasingCalculations": obj.get("leasingCalculations"),
            "leasingInstructions": obj.get("leasingInstructions"),
            "accountInfo": QuoteDetailsQuoteDetailResponseRetrieveQuoteResponseAccountInfo.from_dict(obj["accountInfo"]) if obj.get("accountInfo") is not None else None,
            "contactInfo": QuoteDetailsQuoteDetailResponseRetrieveQuoteResponseContactInfo.from_dict(obj["contactInfo"]) if obj.get("contactInfo") is not None else None,
            "vendorAttributes": QuoteDetailsQuoteDetailResponseRetrieveQuoteResponseVendorAttributes.from_dict(obj["vendorAttributes"]) if obj.get("vendorAttributes") is not None else None,
            "endUser": QuoteDetailsQuoteDetailResponseRetrieveQuoteResponseEndUser.from_dict(obj["endUser"]) if obj.get("endUser") is not None else None,
            "quoteProductList": [QuoteProductList.from_dict(_item) for _item in obj["quoteProductList"]] if obj.get("quoteProductList") is not None else None,
            "totalQuoteProductCount": obj.get("totalQuoteProductCount"),
            "totalExtendedMsrp": obj.get("totalExtendedMsrp"),
            "totalQuantity": obj.get("totalQuantity"),
            "totalExtendedQuotePrice": obj.get("totalExtendedQuotePrice")
        })
        return _obj


