# coding: utf-8

"""
    XI Sdk Resellers

    For Resellers. Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from xi.sdk.resellers.models.order_detail_response_serviceresponse_orderdetailresponse_lines_inner_shipmentdetails_inner_packagedetails import OrderDetailResponseServiceresponseOrderdetailresponseLinesInnerShipmentdetailsInnerPackagedetails
from typing import Optional, Set
from typing_extensions import Self

class OrderDetailResponseServiceresponseOrderdetailresponseLinesInnerShipmentdetailsInner(BaseModel):
    """
    OrderDetailResponseServiceresponseOrderdetailresponseLinesInnerShipmentdetailsInner
    """ # noqa: E501
    quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="quantity shipped")
    shipmentdate: Optional[StrictStr] = Field(default=None, description="date of shipment")
    shipfromwarehouseid: Optional[StrictStr] = Field(default=None, description="Warehouse product was shipped from")
    warehousename: Optional[StrictStr] = Field(default=None, description="name of the warehouse")
    invoicenumber: Optional[StrictStr] = Field(default=None, description="Invoice Number")
    invoicedate: Optional[StrictStr] = Field(default=None, description="date on the invoice generated")
    status: Optional[StrictStr] = Field(default=None, description="code for current Status of the order")
    statusdescription: Optional[StrictStr] = Field(default=None, description="Description of status")
    shippeddate: Optional[StrictStr] = Field(default=None, description="date of shipment")
    holdreasoncodedescription: Optional[StrictStr] = Field(default=None, description="Description of the code if the order is on hold")
    ponumber: Optional[StrictStr] = Field(default=None, description="Ingram PO Number to vendors for direct ship orders")
    carriertype: Optional[StrictStr] = Field(default=None, description="Helps to determine shipment type. for e.g. LTL is used for heavy shipment. SML is used for light shipment")
    carriercode: Optional[StrictStr] = None
    carriername: Optional[StrictStr] = Field(default=None, description="Name of the carrier. If carriername is LTL then the tracking info is in the \"pronumber\" data field")
    pronumber: Optional[StrictStr] = None
    packagedetails: Optional[OrderDetailResponseServiceresponseOrderdetailresponseLinesInnerShipmentdetailsInnerPackagedetails] = None
    __properties: ClassVar[List[str]] = ["quantity", "shipmentdate", "shipfromwarehouseid", "warehousename", "invoicenumber", "invoicedate", "status", "statusdescription", "shippeddate", "holdreasoncodedescription", "ponumber", "carriertype", "carriercode", "carriername", "pronumber", "packagedetails"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderDetailResponseServiceresponseOrderdetailresponseLinesInnerShipmentdetailsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of packagedetails
        if self.packagedetails:
            _dict['packagedetails'] = self.packagedetails.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderDetailResponseServiceresponseOrderdetailresponseLinesInnerShipmentdetailsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "quantity": obj.get("quantity"),
            "shipmentdate": obj.get("shipmentdate"),
            "shipfromwarehouseid": obj.get("shipfromwarehouseid"),
            "warehousename": obj.get("warehousename"),
            "invoicenumber": obj.get("invoicenumber"),
            "invoicedate": obj.get("invoicedate"),
            "status": obj.get("status"),
            "statusdescription": obj.get("statusdescription"),
            "shippeddate": obj.get("shippeddate"),
            "holdreasoncodedescription": obj.get("holdreasoncodedescription"),
            "ponumber": obj.get("ponumber"),
            "carriertype": obj.get("carriertype"),
            "carriercode": obj.get("carriercode"),
            "carriername": obj.get("carriername"),
            "pronumber": obj.get("pronumber"),
            "packagedetails": OrderDetailResponseServiceresponseOrderdetailresponseLinesInnerShipmentdetailsInnerPackagedetails.from_dict(obj["packagedetails"]) if obj.get("packagedetails") is not None else None
        })
        return _obj


