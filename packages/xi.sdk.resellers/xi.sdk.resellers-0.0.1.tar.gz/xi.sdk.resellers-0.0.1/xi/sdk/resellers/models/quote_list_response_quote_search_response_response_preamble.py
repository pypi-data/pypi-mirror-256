# coding: utf-8

"""
    XI Sdk Resellers

    For Resellers. Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class QuoteListResponseQuoteSearchResponseResponsePreamble(BaseModel):
    """
    QuoteListResponseQuoteSearchResponseResponsePreamble
    """ # noqa: E501
    response_status: Optional[StrictStr] = Field(default=None, description="Status of the Request - \"Passed\", \"Failed\"", alias="responseStatus")
    response_status_code: Optional[StrictStr] = Field(default=None, description="responseStatusCode is the code returned in response to a request. The following Codes are returned: 200 400 500", alias="responseStatusCode")
    response_message: Optional[StrictStr] = Field(default=None, description="200 = Action was successfully received, understood and accepted. 400 = The request contains bad syntax or can not be fullfilled. This means there is a problem with the request. 500 = The server failed to fulfill an apparently valid request. This is a temporary problem, the request should be resubmitted.", alias="responseMessage")
    __properties: ClassVar[List[str]] = ["responseStatus", "responseStatusCode", "responseMessage"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QuoteListResponseQuoteSearchResponseResponsePreamble from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QuoteListResponseQuoteSearchResponseResponsePreamble from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "responseStatus": obj.get("responseStatus"),
            "responseStatusCode": obj.get("responseStatusCode"),
            "responseMessage": obj.get("responseMessage")
        })
        return _obj


