# coding: utf-8

"""
    XI Sdk Resellers

    For Resellers. Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class OrderCreateResponseServiceresponseOrdercreateresponseInnerLinesInner(BaseModel):
    """
    OrderCreateResponseServiceresponseOrdercreateresponseInnerLinesInner
    """ # noqa: E501
    linetype: Optional[StrictStr] = Field(default=None, description="“P”-Line or SKU Number “C”-Comment Line")
    globallinenumber: Optional[StrictStr] = Field(default=None, description="Ingram generated line number")
    partnumber: Optional[StrictStr] = Field(default=None, description="Ingram Micro Sku Number")
    globalskuid: Optional[StrictStr] = None
    linenumber: Optional[StrictStr] = None
    carriercode: Optional[StrictStr] = Field(default=None, description="Transportation 2 digit codes")
    carrierdescription: Optional[StrictStr] = Field(default=None, description="Transportation Carrier Name")
    requestedunitprice: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Price requested by reseller. Price Variance can be set up by Ingram Micro Sales Rep")
    requestedquantity: Optional[StrictInt] = Field(default=None, description="Quanity Requested")
    confirmedquantity: Optional[StrictInt] = Field(default=None, description="Quanity Shipped")
    backorderedquantity: Optional[StrictInt] = Field(default=None, description="Quanity of units that didn’t ship")
    unitproductprice: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Price Per Unit")
    netamount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total amount. Quantity X Unit Price")
    warehouseid: Optional[StrictStr] = None
    ordersuffix: Optional[StrictStr] = Field(default=None, description="Use order suffix with the globalorderid for this line item.")
    __properties: ClassVar[List[str]] = ["linetype", "globallinenumber", "partnumber", "globalskuid", "linenumber", "carriercode", "carrierdescription", "requestedunitprice", "requestedquantity", "confirmedquantity", "backorderedquantity", "unitproductprice", "netamount", "warehouseid", "ordersuffix"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderCreateResponseServiceresponseOrdercreateresponseInnerLinesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderCreateResponseServiceresponseOrdercreateresponseInnerLinesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "linetype": obj.get("linetype"),
            "globallinenumber": obj.get("globallinenumber"),
            "partnumber": obj.get("partnumber"),
            "globalskuid": obj.get("globalskuid"),
            "linenumber": obj.get("linenumber"),
            "carriercode": obj.get("carriercode"),
            "carrierdescription": obj.get("carrierdescription"),
            "requestedunitprice": obj.get("requestedunitprice"),
            "requestedquantity": obj.get("requestedquantity"),
            "confirmedquantity": obj.get("confirmedquantity"),
            "backorderedquantity": obj.get("backorderedquantity"),
            "unitproductprice": obj.get("unitproductprice"),
            "netamount": obj.get("netamount"),
            "warehouseid": obj.get("warehouseid"),
            "ordersuffix": obj.get("ordersuffix")
        })
        return _obj


