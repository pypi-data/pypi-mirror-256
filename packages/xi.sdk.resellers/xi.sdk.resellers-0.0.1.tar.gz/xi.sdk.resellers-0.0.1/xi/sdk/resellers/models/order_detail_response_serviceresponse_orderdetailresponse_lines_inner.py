# coding: utf-8

"""
    XI Sdk Resellers

    For Resellers. Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from xi.sdk.resellers.models.invoice_detail_response_serviceresponse_invoicedetailresponse_extendedspecs_inner import InvoiceDetailResponseServiceresponseInvoicedetailresponseExtendedspecsInner
from xi.sdk.resellers.models.order_detail_response_serviceresponse_orderdetailresponse_lines_inner_serialnumberdetails_inner import OrderDetailResponseServiceresponseOrderdetailresponseLinesInnerSerialnumberdetailsInner
from xi.sdk.resellers.models.order_detail_response_serviceresponse_orderdetailresponse_lines_inner_shipmentdetails_inner import OrderDetailResponseServiceresponseOrderdetailresponseLinesInnerShipmentdetailsInner
from typing import Optional, Set
from typing_extensions import Self

class OrderDetailResponseServiceresponseOrderdetailresponseLinesInner(BaseModel):
    """
    OrderDetailResponseServiceresponseOrderdetailresponseLinesInner
    """ # noqa: E501
    linenumber: Optional[StrictStr] = Field(default=None, description="Impulse line number")
    globallinenumber: Optional[StrictStr] = Field(default=None, description="Line of the Globel Sku / Customer Line Number")
    ordersuffix: Optional[StrictStr] = Field(default=None, description="Order Suffix")
    erpordernumber: Optional[StrictStr] = Field(default=None, description="Sales order number")
    linestatus: Optional[StrictStr] = Field(default=None, description="Status of the line")
    partnumber: Optional[StrictStr] = Field(default=None, description="Ingram part number")
    manufacturerpartnumber: Optional[StrictStr] = Field(default=None, description="manufacture number of the product")
    vendorname: Optional[StrictStr] = Field(default=None, description="name of the vendor")
    vendorcode: Optional[StrictStr] = Field(default=None, description="Ingram Micro assigned code for the vendor")
    partdescription1: Optional[StrictStr] = None
    partdescription2: Optional[StrictStr] = None
    unitweight: Optional[StrictStr] = Field(default=None, description="weight of the product unit")
    unitprice: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Customer price of the unit")
    extendedprice: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="extended price of the order")
    taxamount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="tax amount for the order")
    requestedquantity: Optional[StrictStr] = Field(default=None, description="no. of units requested")
    confirmedquantity: Optional[StrictStr] = Field(default=None, description="no. of units confirmed available")
    backorderquantity: Optional[StrictStr] = Field(default=None, description="quantity of back order")
    serialnumberdetails: Optional[List[OrderDetailResponseServiceresponseOrderdetailresponseLinesInnerSerialnumberdetailsInner]] = None
    trackingnumber: Optional[List[StrictStr]] = None
    shipmentdetails: Optional[List[OrderDetailResponseServiceresponseOrderdetailresponseLinesInnerShipmentdetailsInner]] = None
    productextendedspecs: Optional[List[InvoiceDetailResponseServiceresponseInvoicedetailresponseExtendedspecsInner]] = None
    backorderetadate: Optional[StrictStr] = Field(default=None, description="estimated date of back order")
    __properties: ClassVar[List[str]] = ["linenumber", "globallinenumber", "ordersuffix", "erpordernumber", "linestatus", "partnumber", "manufacturerpartnumber", "vendorname", "vendorcode", "partdescription1", "partdescription2", "unitweight", "unitprice", "extendedprice", "taxamount", "requestedquantity", "confirmedquantity", "backorderquantity", "serialnumberdetails", "trackingnumber", "shipmentdetails", "productextendedspecs", "backorderetadate"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderDetailResponseServiceresponseOrderdetailresponseLinesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in serialnumberdetails (list)
        _items = []
        if self.serialnumberdetails:
            for _item in self.serialnumberdetails:
                if _item:
                    _items.append(_item.to_dict())
            _dict['serialnumberdetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in shipmentdetails (list)
        _items = []
        if self.shipmentdetails:
            for _item in self.shipmentdetails:
                if _item:
                    _items.append(_item.to_dict())
            _dict['shipmentdetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in productextendedspecs (list)
        _items = []
        if self.productextendedspecs:
            for _item in self.productextendedspecs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['productextendedspecs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderDetailResponseServiceresponseOrderdetailresponseLinesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "linenumber": obj.get("linenumber"),
            "globallinenumber": obj.get("globallinenumber"),
            "ordersuffix": obj.get("ordersuffix"),
            "erpordernumber": obj.get("erpordernumber"),
            "linestatus": obj.get("linestatus"),
            "partnumber": obj.get("partnumber"),
            "manufacturerpartnumber": obj.get("manufacturerpartnumber"),
            "vendorname": obj.get("vendorname"),
            "vendorcode": obj.get("vendorcode"),
            "partdescription1": obj.get("partdescription1"),
            "partdescription2": obj.get("partdescription2"),
            "unitweight": obj.get("unitweight"),
            "unitprice": obj.get("unitprice"),
            "extendedprice": obj.get("extendedprice"),
            "taxamount": obj.get("taxamount"),
            "requestedquantity": obj.get("requestedquantity"),
            "confirmedquantity": obj.get("confirmedquantity"),
            "backorderquantity": obj.get("backorderquantity"),
            "serialnumberdetails": [OrderDetailResponseServiceresponseOrderdetailresponseLinesInnerSerialnumberdetailsInner.from_dict(_item) for _item in obj["serialnumberdetails"]] if obj.get("serialnumberdetails") is not None else None,
            "trackingnumber": obj.get("trackingnumber"),
            "shipmentdetails": [OrderDetailResponseServiceresponseOrderdetailresponseLinesInnerShipmentdetailsInner.from_dict(_item) for _item in obj["shipmentdetails"]] if obj.get("shipmentdetails") is not None else None,
            "productextendedspecs": [InvoiceDetailResponseServiceresponseInvoicedetailresponseExtendedspecsInner.from_dict(_item) for _item in obj["productextendedspecs"]] if obj.get("productextendedspecs") is not None else None,
            "backorderetadate": obj.get("backorderetadate")
        })
        return _obj


