# coding: utf-8

"""
    XI Sdk Resellers

    For Resellers. Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class PriceAndAvailabilityRequestServicerequestPriceandstockrequestItemInner(BaseModel):
    """
    PriceAndAvailabilityRequestServicerequestPriceandstockrequestItemInner
    """ # noqa: E501
    index: Optional[StrictInt] = None
    ingrampartnumber: Optional[StrictStr] = Field(default=None, description="Ingram Micro SKU number")
    vendorpartnumber: Optional[StrictStr] = Field(default=None, description="Vendor/Manufacture Part Number")
    upc: Optional[StrictStr] = Field(default=None, description="Universal Product code")
    customerpartnumber: Optional[StrictStr] = Field(default=None, description="Unique identoifier for the customer, needs custom setup.")
    warehouseidlist: Optional[List[StrictStr]] = Field(default=None, description="Unique identity for Ingram Micro warehouses against which stock details are returned.")
    extendedvendorpartnumber: Optional[StrictStr] = None
    quantity: Optional[Union[StrictFloat, StrictInt]] = None
    enduserid: Optional[StrictStr] = None
    govtprogramtype: Optional[StrictStr] = None
    govtendusertype: Optional[StrictStr] = None
    specialbidnumber: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["index", "ingrampartnumber", "vendorpartnumber", "upc", "customerpartnumber", "warehouseidlist", "extendedvendorpartnumber", "quantity", "enduserid", "govtprogramtype", "govtendusertype", "specialbidnumber"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PriceAndAvailabilityRequestServicerequestPriceandstockrequestItemInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PriceAndAvailabilityRequestServicerequestPriceandstockrequestItemInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "index": obj.get("index"),
            "ingrampartnumber": obj.get("ingrampartnumber"),
            "vendorpartnumber": obj.get("vendorpartnumber"),
            "upc": obj.get("upc"),
            "customerpartnumber": obj.get("customerpartnumber"),
            "warehouseidlist": obj.get("warehouseidlist"),
            "extendedvendorpartnumber": obj.get("extendedvendorpartnumber"),
            "quantity": obj.get("quantity"),
            "enduserid": obj.get("enduserid"),
            "govtprogramtype": obj.get("govtprogramtype"),
            "govtendusertype": obj.get("govtendusertype"),
            "specialbidnumber": obj.get("specialbidnumber")
        })
        return _obj


