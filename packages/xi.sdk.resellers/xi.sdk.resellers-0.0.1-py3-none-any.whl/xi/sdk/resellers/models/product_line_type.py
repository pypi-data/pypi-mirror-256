# coding: utf-8

"""
    XI Sdk Resellers

    For Resellers. Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from xi.sdk.resellers.models.invoice_detail_response_serviceresponse_invoicedetailresponse_extendedspecs_inner import InvoiceDetailResponseServiceresponseInvoicedetailresponseExtendedspecsInner
from xi.sdk.resellers.models.product_line_type_serialnumberdetails_inner import ProductLineTypeSerialnumberdetailsInner
from xi.sdk.resellers.models.product_line_type_trackingnumberdetails_inner import ProductLineTypeTrackingnumberdetailsInner
from typing import Optional, Set
from typing_extensions import Self

class ProductLineType(BaseModel):
    """
    Product line items object under each invoice
    """ # noqa: E501
    linenumber: Optional[StrictStr] = None
    linetype: Optional[StrictStr] = None
    partnumber: Optional[StrictStr] = None
    vendorpartnumber: Optional[StrictStr] = None
    partdescription: Optional[StrictStr] = None
    shipfrombranch: Optional[StrictStr] = None
    shippedquantity: Optional[StrictStr] = None
    orderedquantity: Optional[StrictStr] = None
    marginpercent: Optional[StrictStr] = None
    backorderquantity: Optional[StrictStr] = None
    backorderetadate: Optional[date] = None
    extendedprice: Optional[StrictStr] = None
    specialbidnumber: Optional[StrictStr] = None
    ordersuffix: Optional[StrictStr] = None
    isacopapplied: Optional[StrictStr] = None
    unitprice: Optional[StrictStr] = None
    unitofmeasure: Optional[StrictStr] = None
    serialnumberdetails: Optional[List[ProductLineTypeSerialnumberdetailsInner]] = None
    trackingnumberdetails: Optional[List[ProductLineTypeTrackingnumberdetailsInner]] = None
    productextendedspecs: Optional[List[InvoiceDetailResponseServiceresponseInvoicedetailresponseExtendedspecsInner]] = None
    __properties: ClassVar[List[str]] = ["linenumber", "linetype", "partnumber", "vendorpartnumber", "partdescription", "shipfrombranch", "shippedquantity", "orderedquantity", "marginpercent", "backorderquantity", "backorderetadate", "extendedprice", "specialbidnumber", "ordersuffix", "isacopapplied", "unitprice", "unitofmeasure", "serialnumberdetails", "trackingnumberdetails", "productextendedspecs"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProductLineType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in serialnumberdetails (list)
        _items = []
        if self.serialnumberdetails:
            for _item in self.serialnumberdetails:
                if _item:
                    _items.append(_item.to_dict())
            _dict['serialnumberdetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in trackingnumberdetails (list)
        _items = []
        if self.trackingnumberdetails:
            for _item in self.trackingnumberdetails:
                if _item:
                    _items.append(_item.to_dict())
            _dict['trackingnumberdetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in productextendedspecs (list)
        _items = []
        if self.productextendedspecs:
            for _item in self.productextendedspecs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['productextendedspecs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProductLineType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "linenumber": obj.get("linenumber"),
            "linetype": obj.get("linetype"),
            "partnumber": obj.get("partnumber"),
            "vendorpartnumber": obj.get("vendorpartnumber"),
            "partdescription": obj.get("partdescription"),
            "shipfrombranch": obj.get("shipfrombranch"),
            "shippedquantity": obj.get("shippedquantity"),
            "orderedquantity": obj.get("orderedquantity"),
            "marginpercent": obj.get("marginpercent"),
            "backorderquantity": obj.get("backorderquantity"),
            "backorderetadate": obj.get("backorderetadate"),
            "extendedprice": obj.get("extendedprice"),
            "specialbidnumber": obj.get("specialbidnumber"),
            "ordersuffix": obj.get("ordersuffix"),
            "isacopapplied": obj.get("isacopapplied"),
            "unitprice": obj.get("unitprice"),
            "unitofmeasure": obj.get("unitofmeasure"),
            "serialnumberdetails": [ProductLineTypeSerialnumberdetailsInner.from_dict(_item) for _item in obj["serialnumberdetails"]] if obj.get("serialnumberdetails") is not None else None,
            "trackingnumberdetails": [ProductLineTypeTrackingnumberdetailsInner.from_dict(_item) for _item in obj["trackingnumberdetails"]] if obj.get("trackingnumberdetails") is not None else None,
            "productextendedspecs": [InvoiceDetailResponseServiceresponseInvoicedetailresponseExtendedspecsInner.from_dict(_item) for _item in obj["productextendedspecs"]] if obj.get("productextendedspecs") is not None else None
        })
        return _obj


