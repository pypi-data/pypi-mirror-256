# coding: utf-8

"""
    XI Sdk Resellers

    For Resellers. Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from xi.sdk.resellers.models.order_create_request_ordercreaterequest_ordercreatedetails_extendedspecs_inner import OrderCreateRequestOrdercreaterequestOrdercreatedetailsExtendedspecsInner
from xi.sdk.resellers.models.order_create_request_ordercreaterequest_ordercreatedetails_lines_inner import OrderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInner
from xi.sdk.resellers.models.order_create_request_ordercreaterequest_ordercreatedetails_shiptoaddress import OrderCreateRequestOrdercreaterequestOrdercreatedetailsShiptoaddress
from typing import Optional, Set
from typing_extensions import Self

class OrderCreateRequestOrdercreaterequestOrdercreatedetails(BaseModel):
    """
    OrderCreateRequestOrdercreaterequestOrdercreatedetails
    """ # noqa: E501
    customerponumber: Annotated[str, Field(min_length=1, strict=True, max_length=18)] = Field(description="The customers unique Purchase Order number. Keep it unique to retrieve order information")
    ordertype: StrictStr = Field(description="Order Type - Standard orders, Direct ship orders")
    enduserordernumber: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=18)]] = Field(default=None, description="Customers End-user PO number")
    billtosuffix: Optional[Annotated[str, Field(strict=True, max_length=3)]] = Field(default=None, description="Designates flooring acct to be used")
    shiptosuffix: Optional[Annotated[str, Field(strict=True, max_length=3)]] = Field(default=None, description="Applies to customers with multiple ship to locations (store locations)")
    shiptoaddress: OrderCreateRequestOrdercreaterequestOrdercreatedetailsShiptoaddress
    carriercode: Optional[Annotated[str, Field(strict=True, max_length=2)]] = Field(default=None, description="A customer can dictate what carrier to use for their shipment (Ingram 2-digit carrier code is required). Our recommendation is leave this field blank which will allow Ingram Micro to choose the best carrier to gain the best freight rates.")
    thirdpartyfreightaccountnumber: Optional[StrictStr] = Field(default=None, description="Refers to a third-party freight account number for charging freight against. The account number should be passed within this field and the appropriate carrier code should be supplied within the carrier code tags. Prior to sending your request containing the third-party account number, it must be first entered into our system. Your Ingram Micro Sales Representative can action this for you. If submitted within an order without this preapproval the third-party account number will be ignored.  Note: USA partners- For FedEx Air only (carrier codes F1, FO, F2, FG.), please send three leading zeros before your third-party freight account number (i.e.: 000999999999.) ")
    specialbidnumber: Optional[StrictStr] = Field(default=None, description="This is the special quote number given to a customer either by a vendor for special pricing or by Ingram Micro. To receive the special pricing assigned to this number it must be included on the order.")
    lines: List[OrderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInner]
    extendedspecs: Optional[List[OrderCreateRequestOrdercreaterequestOrdercreatedetailsExtendedspecsInner]] = None
    __properties: ClassVar[List[str]] = ["customerponumber", "ordertype", "enduserordernumber", "billtosuffix", "shiptosuffix", "shiptoaddress", "carriercode", "thirdpartyfreightaccountnumber", "specialbidnumber", "lines", "extendedspecs"]

    @field_validator('ordertype')
    def ordertype_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Standard', 'Direct Ship']):
            raise ValueError("must be one of enum values ('Standard', 'Direct Ship')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderCreateRequestOrdercreaterequestOrdercreatedetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of shiptoaddress
        if self.shiptoaddress:
            _dict['shiptoaddress'] = self.shiptoaddress.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in lines (list)
        _items = []
        if self.lines:
            for _item in self.lines:
                if _item:
                    _items.append(_item.to_dict())
            _dict['lines'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in extendedspecs (list)
        _items = []
        if self.extendedspecs:
            for _item in self.extendedspecs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['extendedspecs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderCreateRequestOrdercreaterequestOrdercreatedetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customerponumber": obj.get("customerponumber"),
            "ordertype": obj.get("ordertype"),
            "enduserordernumber": obj.get("enduserordernumber"),
            "billtosuffix": obj.get("billtosuffix"),
            "shiptosuffix": obj.get("shiptosuffix"),
            "shiptoaddress": OrderCreateRequestOrdercreaterequestOrdercreatedetailsShiptoaddress.from_dict(obj["shiptoaddress"]) if obj.get("shiptoaddress") is not None else None,
            "carriercode": obj.get("carriercode"),
            "thirdpartyfreightaccountnumber": obj.get("thirdpartyfreightaccountnumber"),
            "specialbidnumber": obj.get("specialbidnumber"),
            "lines": [OrderCreateRequestOrdercreaterequestOrdercreatedetailsLinesInner.from_dict(_item) for _item in obj["lines"]] if obj.get("lines") is not None else None,
            "extendedspecs": [OrderCreateRequestOrdercreaterequestOrdercreatedetailsExtendedspecsInner.from_dict(_item) for _item in obj["extendedspecs"]] if obj.get("extendedspecs") is not None else None
        })
        return _obj


