# coding: utf-8

"""
    XI Sdk Resellers

    For Resellers. Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from xi.sdk.resellers.models.quote_details_quote_detail_response_response_preamble import QuoteDetailsQuoteDetailResponseResponsePreamble
from xi.sdk.resellers.models.quote_details_quote_detail_response_retrieve_quote_response import QuoteDetailsQuoteDetailResponseRetrieveQuoteResponse
from xi.sdk.resellers.models.quote_product_list import QuoteProductList
from typing import Optional, Set
from typing_extensions import Self

class QuoteDetailsQuoteDetailResponse(BaseModel):
    """
    QuoteDetailsQuoteDetailResponse
    """ # noqa: E501
    response_preamble: Optional[QuoteDetailsQuoteDetailResponseResponsePreamble] = Field(default=None, alias="responsePreamble")
    retrieve_quote_response: Optional[QuoteDetailsQuoteDetailResponseRetrieveQuoteResponse] = Field(default=None, alias="retrieveQuoteResponse")
    quote_product_list: Optional[List[QuoteProductList]] = Field(default=None, alias="quoteProductList")
    total_quote_product_count: Optional[StrictStr] = Field(default=None, alias="totalQuoteProductCount")
    total_extended_msrp: Optional[StrictStr] = Field(default=None, alias="totalExtendedMsrp")
    total_quantity: Optional[StrictInt] = Field(default=None, alias="totalQuantity")
    total_extended_quote_price: Optional[StrictStr] = Field(default=None, alias="totalExtendedQuotePrice")
    __properties: ClassVar[List[str]] = ["responsePreamble", "retrieveQuoteResponse", "quoteProductList", "totalQuoteProductCount", "totalExtendedMsrp", "totalQuantity", "totalExtendedQuotePrice"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QuoteDetailsQuoteDetailResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of response_preamble
        if self.response_preamble:
            _dict['responsePreamble'] = self.response_preamble.to_dict()
        # override the default output from pydantic by calling `to_dict()` of retrieve_quote_response
        if self.retrieve_quote_response:
            _dict['retrieveQuoteResponse'] = self.retrieve_quote_response.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in quote_product_list (list)
        _items = []
        if self.quote_product_list:
            for _item in self.quote_product_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['quoteProductList'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QuoteDetailsQuoteDetailResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "responsePreamble": QuoteDetailsQuoteDetailResponseResponsePreamble.from_dict(obj["responsePreamble"]) if obj.get("responsePreamble") is not None else None,
            "retrieveQuoteResponse": QuoteDetailsQuoteDetailResponseRetrieveQuoteResponse.from_dict(obj["retrieveQuoteResponse"]) if obj.get("retrieveQuoteResponse") is not None else None,
            "quoteProductList": [QuoteProductList.from_dict(_item) for _item in obj["quoteProductList"]] if obj.get("quoteProductList") is not None else None,
            "totalQuoteProductCount": obj.get("totalQuoteProductCount"),
            "totalExtendedMsrp": obj.get("totalExtendedMsrp"),
            "totalQuantity": obj.get("totalQuantity"),
            "totalExtendedQuotePrice": obj.get("totalExtendedQuotePrice")
        })
        return _obj


