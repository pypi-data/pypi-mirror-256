# coding: utf-8

"""
    XI Sdk Resellers

    For Resellers. Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from xi.sdk.resellers.models.quote_product_list_price import QuoteProductListPrice
from typing import Optional, Set
from typing_extensions import Self

class QuoteProductList(BaseModel):
    """
    
    """ # noqa: E501
    quote_product_guid: Optional[StrictStr] = Field(default=None, alias="quoteProductGuid")
    quantity: Optional[StrictStr] = None
    comments: Optional[StrictStr] = None
    bid_start_date: Optional[StrictStr] = Field(default=None, alias="bidStartDate")
    bid_expiry_date: Optional[StrictStr] = Field(default=None, alias="bidExpiryDate")
    sku: Optional[StrictStr] = None
    line_number: Optional[StrictStr] = Field(default=None, alias="lineNumber")
    description: Optional[StrictStr] = None
    vendor_part_number: Optional[StrictStr] = Field(default=None, alias="vendorPartNumber")
    weight: Optional[StrictStr] = None
    is_suggestion_product: Optional[StrictStr] = Field(default=None, alias="isSuggestionProduct")
    vpn_category: Optional[StrictStr] = Field(default=None, alias="vpnCategory")
    quote_products_supplier_part_auxiliary_id: Optional[StrictStr] = Field(default=None, alias="quoteProductsSupplierPartAuxiliaryId")
    quote_products_vendor: Optional[StrictStr] = Field(default=None, alias="quoteProductsVendor")
    price: Optional[QuoteProductListPrice] = None
    __properties: ClassVar[List[str]] = ["quoteProductGuid", "quantity", "comments", "bidStartDate", "bidExpiryDate", "sku", "lineNumber", "description", "vendorPartNumber", "weight", "isSuggestionProduct", "vpnCategory", "quoteProductsSupplierPartAuxiliaryId", "quoteProductsVendor", "price"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QuoteProductList from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of price
        if self.price:
            _dict['price'] = self.price.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QuoteProductList from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "quoteProductGuid": obj.get("quoteProductGuid"),
            "quantity": obj.get("quantity"),
            "comments": obj.get("comments"),
            "bidStartDate": obj.get("bidStartDate"),
            "bidExpiryDate": obj.get("bidExpiryDate"),
            "sku": obj.get("sku"),
            "lineNumber": obj.get("lineNumber"),
            "description": obj.get("description"),
            "vendorPartNumber": obj.get("vendorPartNumber"),
            "weight": obj.get("weight"),
            "isSuggestionProduct": obj.get("isSuggestionProduct"),
            "vpnCategory": obj.get("vpnCategory"),
            "quoteProductsSupplierPartAuxiliaryId": obj.get("quoteProductsSupplierPartAuxiliaryId"),
            "quoteProductsVendor": obj.get("quoteProductsVendor"),
            "price": QuoteProductListPrice.from_dict(obj["price"]) if obj.get("price") is not None else None
        })
        return _obj


