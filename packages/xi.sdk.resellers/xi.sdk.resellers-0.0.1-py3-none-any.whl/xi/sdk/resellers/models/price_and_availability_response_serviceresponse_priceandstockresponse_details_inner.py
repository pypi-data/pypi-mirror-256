# coding: utf-8

"""
    XI Sdk Resellers

    For Resellers. Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from xi.sdk.resellers.models.warehouse_list_type import WarehouseListType
from typing import Optional, Set
from typing_extensions import Self

class PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner(BaseModel):
    """
    PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner
    """ # noqa: E501
    itemstatus: Optional[StrictStr] = Field(default=None, description="SUCCESS or FAILED")
    statusmessage: Optional[StrictStr] = Field(default=None, description="Description of itemstatus")
    ingrampartnumber: Optional[StrictStr] = Field(default=None, description="Ingram Micro part number")
    vendorpartnumber: Optional[StrictStr] = Field(default=None, description="Manufacturer/Vendor part number")
    globalskuid: Optional[StrictStr] = None
    customerprice: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Customer specific price for the product, excluding taxes")
    partdescription1: Optional[StrictStr] = Field(default=None, description="Product description part 1")
    partdescription2: Optional[StrictStr] = Field(default=None, description="Product description part 2")
    vendornumber: Optional[StrictStr] = None
    vendorname: Optional[StrictStr] = Field(default=None, description="Name of the vendor")
    cpucode: Optional[StrictStr] = None
    var_class: Optional[StrictStr] = Field(default=None, description="Ingram Micro assigned product classification -  A-Stocked product in all IM warehouses, B-Limited stock in IM warehouses, C-Stocked in fewer wareshouses, D-Ingram discontinued, E-Planned to be phased out as per the vendor, F-Carried for specific customer as per the contract, N-New SKU, O-Discontinued to be liquidated, S-Order for specialized demand, V-Discontinued by vendor, X-Direct Ship products from vendor", alias="class")
    skustatus: Optional[StrictStr] = Field(default=None, description="Identifies if the SKU has been discontinued.")
    mediacpu: Optional[StrictStr] = None
    categorysubcategory: Optional[StrictStr] = None
    retailprice: Optional[Union[StrictFloat, StrictInt]] = None
    newmedia: Optional[StrictStr] = None
    enduserrequired: Optional[StrictStr] = Field(default=None, description="Y - End user required N - Not required End user")
    backorderflag: Optional[StrictStr] = Field(default=None, description="Y- Allow Backorder Flag N- Not allowed")
    skuauthorized: Optional[StrictStr] = None
    extendedvendorpartnumber: Optional[StrictStr] = None
    warehousedetails: Optional[List[WarehouseListType]] = None
    __properties: ClassVar[List[str]] = ["itemstatus", "statusmessage", "ingrampartnumber", "vendorpartnumber", "globalskuid", "customerprice", "partdescription1", "partdescription2", "vendornumber", "vendorname", "cpucode", "class", "skustatus", "mediacpu", "categorysubcategory", "retailprice", "newmedia", "enduserrequired", "backorderflag", "skuauthorized", "extendedvendorpartnumber", "warehousedetails"]

    @field_validator('itemstatus')
    def itemstatus_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SUCCESS', 'FAILED']):
            raise ValueError("must be one of enum values ('SUCCESS', 'FAILED')")
        return value

    @field_validator('var_class')
    def var_class_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['A', 'B', 'C', 'D', 'E', 'F', 'N', 'O', 'S', 'V', 'X']):
            raise ValueError("must be one of enum values ('A', 'B', 'C', 'D', 'E', 'F', 'N', 'O', 'S', 'V', 'X')")
        return value

    @field_validator('skustatus')
    def skustatus_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACTIVE']):
            raise ValueError("must be one of enum values ('ACTIVE')")
        return value

    @field_validator('enduserrequired')
    def enduserrequired_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Y', 'N']):
            raise ValueError("must be one of enum values ('Y', 'N')")
        return value

    @field_validator('backorderflag')
    def backorderflag_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Y', 'N']):
            raise ValueError("must be one of enum values ('Y', 'N')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in warehousedetails (list)
        _items = []
        if self.warehousedetails:
            for _item in self.warehousedetails:
                if _item:
                    _items.append(_item.to_dict())
            _dict['warehousedetails'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PriceAndAvailabilityResponseServiceresponsePriceandstockresponseDetailsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "itemstatus": obj.get("itemstatus"),
            "statusmessage": obj.get("statusmessage"),
            "ingrampartnumber": obj.get("ingrampartnumber"),
            "vendorpartnumber": obj.get("vendorpartnumber"),
            "globalskuid": obj.get("globalskuid"),
            "customerprice": obj.get("customerprice"),
            "partdescription1": obj.get("partdescription1"),
            "partdescription2": obj.get("partdescription2"),
            "vendornumber": obj.get("vendornumber"),
            "vendorname": obj.get("vendorname"),
            "cpucode": obj.get("cpucode"),
            "class": obj.get("class"),
            "skustatus": obj.get("skustatus"),
            "mediacpu": obj.get("mediacpu"),
            "categorysubcategory": obj.get("categorysubcategory"),
            "retailprice": obj.get("retailprice"),
            "newmedia": obj.get("newmedia"),
            "enduserrequired": obj.get("enduserrequired"),
            "backorderflag": obj.get("backorderflag"),
            "skuauthorized": obj.get("skuauthorized"),
            "extendedvendorpartnumber": obj.get("extendedvendorpartnumber"),
            "warehousedetails": [WarehouseListType.from_dict(_item) for _item in obj["warehousedetails"]] if obj.get("warehousedetails") is not None else None
        })
        return _obj


