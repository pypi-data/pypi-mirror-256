# coding: utf-8

"""
    XI Sdk Resellers

    For Resellers. Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class OrderCreateRequestOrdercreaterequestOrdercreatedetailsShiptoaddress(BaseModel):
    """
    OrderCreateRequestOrdercreaterequestOrdercreatedetailsShiptoaddress
    """ # noqa: E501
    attention: Optional[Annotated[str, Field(strict=True, max_length=35)]] = Field(default=None, description="Customer contact name")
    addressline1: Annotated[str, Field(strict=True, max_length=35)] = Field(description="Company Name or person to deliver. *If there isnâ€™t an attention line please add the company name on address line 1.   UPS and FedEx will create surcharges if address line 1 contains a physical address.")
    addressline2: Annotated[str, Field(strict=True, max_length=35)] = Field(description="Street address for delivery")
    addressline3: Optional[Annotated[str, Field(strict=True, max_length=35)]] = Field(default=None, description="Continuation of address line 2")
    city: Annotated[str, Field(strict=True, max_length=21)] = Field(description="Ship to city")
    state: Annotated[str, Field(strict=True, max_length=2)] = Field(description="Ship to State or Region")
    postalcode: Annotated[str, Field(strict=True, max_length=9)] = Field(description="Ship to Zip code or Postal code")
    countrycode: Optional[Annotated[str, Field(strict=True, max_length=2)]] = Field(default=None, description="Ship to country")
    __properties: ClassVar[List[str]] = ["attention", "addressline1", "addressline2", "addressline3", "city", "state", "postalcode", "countrycode"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderCreateRequestOrdercreaterequestOrdercreatedetailsShiptoaddress from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderCreateRequestOrdercreaterequestOrdercreatedetailsShiptoaddress from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attention": obj.get("attention"),
            "addressline1": obj.get("addressline1"),
            "addressline2": obj.get("addressline2"),
            "addressline3": obj.get("addressline3"),
            "city": obj.get("city"),
            "state": obj.get("state"),
            "postalcode": obj.get("postalcode"),
            "countrycode": obj.get("countrycode")
        })
        return _obj


