{"version":3,"sources":["ej2-grid.tsx","index.tsx"],"names":["EJ2Grid","StreamlitComponentBase","constructor","props","super","gridInstance","renderColumns","data","headerText","clipMode","format","textAlign","width","isPrimaryKey","columns","key","columnDirective","this","args","params","column","Object","keys","undefined","directive","field","push","React","createElement","ColumnDirective","toolbarClick","_this$gridInstance","_this$gridInstance2","_this$gridInstance3","item","text","pdfExport","excelExport","csvExport","render","totalColumns","licenseKey","console","log","registerLicense","Fragment","rel","href","theme","GridComponent","ref","grid","dataSource","toolbar","toolbarItems","bind","allowExcelExport","allowKeyboard","allowMultiSorting","allowPdfExport","allowReordering","allowRowDragAndDrop","allowSelection","allowTextWrap","enableAdaptiveUI","enableColumnVirtualization","enableHeaderFocus","enableHover","enableImmutableMode","enableInfiniteScrolling","infiniteScrollSettings","enablePersistence","enableStickyHeader","enableVirtualMaskRow","enableVirtualization","showColumnChooser","showColumnMenu","childGrid","editSettings","allowGrouping","groupSettings","allowPaging","pageSettings","allowFiltering","filterSettings","allowSorting","sortSettings","searchSettings","selectionSettings","textWrapSettings","allowResizing","height","rowHeight","rowRenderingMode","selectedRowIndex","printMode","frozenColumns","gridLines","frozenRows","ColumnsDirective","Inject","services","Page","Sort","Filter","Group","Toolbar","InfiniteScroll","ExcelExport","PdfExport","Reorder","Resize","RowDD","Edit","Freeze","Search","DetailRow","ColumnChooser","ColumnMenu","state","refreshed","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eb91bf42.chunk.js","sourcesContent":["import { StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React, { ReactNode } from \"react\";\nimport { ClipMode, ColumnChooser, ColumnDirective, ColumnMenu, ColumnsDirective, Edit, Filter, Freeze, GridComponent, Group, InfiniteScroll, PdfExport, Reorder, Resize, RowDD, Search, TextAlign, Toolbar } from '@syncfusion/ej2-react-grids';\nimport { Inject, ExcelExport, DetailRow, Page, Sort } from '@syncfusion/ej2-react-grids';\nimport { DateFormatOptions, NumberFormatOptions, registerLicense } from \"@syncfusion/ej2-base\";\nimport { ClickEventArgs } from \"@syncfusion/ej2-navigations\";\n\ninterface State {\n  refreshed: number\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nexport class EJ2Grid extends StreamlitComponentBase<State> {\n\n  constructor(props: any) {\n    super(props);\n    this.state = { refreshed: 1 }\n  }\n\n  private gridInstance: GridComponent | null = null;\n\n  public renderColumns = (data: object[]): any[] => {\n    let columns: any[] = [];\n    let key: number = 0;\n    let columnDirective = this.props.args.params.columnDirective;\n    let headerText: string;\n    let clipMode: ClipMode | undefined;\n    let format: string | NumberFormatOptions | DateFormatOptions | undefined;\n    let textAlign: TextAlign | undefined;\n    let width: string | number | undefined;\n    let isPrimaryKey: boolean | undefined;\n    for (let column of Object.keys(data[0])) {\n      format = undefined;\n      textAlign = undefined;\n      headerText = column;\n      clipMode = undefined;\n      width = undefined;\n      isPrimaryKey = false;\n      if (this.props.args.params.columnDirective) {\n        for (let directive of columnDirective) {\n          if (directive.field === column) {\n            headerText = directive.headerText;\n            clipMode = directive.clipMode;\n            format = directive.format ? directive.format : '';\n            textAlign = directive.textAlign;\n            width = directive.width;\n            isPrimaryKey = directive.isPrimaryKey;\n          }\n        }\n      }\n      columns.push(<ColumnDirective field={column} headerText={headerText} format={format} textAlign={textAlign} width={width} clipMode={clipMode} isPrimaryKey={isPrimaryKey} key={key++} />);\n    }\n    return columns;\n  }\n\n  public toolbarClick = (args: ClickEventArgs): void => {\n    switch (args.item.text) {\n      case 'PDF Export':\n        this.gridInstance?.pdfExport();\n        break;\n      case 'Excel Export':\n        this.gridInstance?.excelExport();\n        break;\n      case 'CSV Export':\n        this.gridInstance?.csvExport();\n        break;\n    }\n  }\n\n  public render = (): ReactNode => {\n\n    const totalColumns: any[] = this.renderColumns(this.props.args.params.data);\n\n    if (this.props.args.params.licenseKey) {\n      console.log('license provided');\n      registerLicense(this.props.args.params.licenseKey);\n    }\n\n\n    return (\n      <>\n        <link rel=\"stylesheet\" href={this.props.args.params.theme} />\n        <GridComponent ref={grid => this.gridInstance = grid}\n          dataSource={this.props.args.params.data}\n          toolbar={this.props.args.params.toolbarItems}\n          toolbarClick={this.toolbarClick.bind(this)}\n          allowExcelExport={this.props.args.params.allowExcelExport}\n          allowKeyboard={this.props.args.params.allowKeyboard}\n          allowMultiSorting={this.props.args.params.allowMultiSorting}\n          allowPdfExport={this.props.args.params.allowPdfExport}\n          allowReordering={this.props.args.params.allowReordering}\n          allowRowDragAndDrop={this.props.args.params.allowRowDragAndDrop}\n          allowSelection={this.props.args.params.allowSelection}\n          allowTextWrap={this.props.args.params.allowTextWrap}\n          enableAdaptiveUI={this.props.args.params.enableAdaptiveUI}\n          enableColumnVirtualization={this.props.args.params.enableColumnVirtualization}\n          enableHeaderFocus={this.props.args.params.enableHeaderFocus}\n          enableHover={this.props.args.params.enableHover}\n          enableImmutableMode={this.props.args.params.enableImmutableMode}\n          enableInfiniteScrolling={this.props.args.params.enableInfiniteScrolling} infiniteScrollSettings={this.props.args.params.infiniteScrollSettings}\n          enablePersistence={this.props.args.params.enablePersistence}\n          enableStickyHeader={this.props.args.params.enableStickyHeader}\n          enableVirtualMaskRow={this.props.args.params.enableVirtualMaskRow}\n          enableVirtualization={this.props.args.params.enableVirtualization}\n          showColumnChooser={this.props.args.params.showColumnChooser}\n          showColumnMenu={this.props.args.params.showColumnMenu}\n          childGrid={this.props.args.params.childGrid}\n          editSettings={this.props.args.params.editSettings}\n          allowGrouping={this.props.args.params.allowGrouping} groupSettings={this.props.args.params.groupSettings}\n          allowPaging={this.props.args.params.allowPaging} pageSettings={this.props.args.params.pageSettings}\n          allowFiltering={this.props.args.params.allowFiltering} filterSettings={this.props.args.params.filterSettings}\n          allowSorting={this.props.args.params.allowSorting} sortSettings={this.props.args.params.sortSettings}\n          searchSettings={this.props.args.params.searchSettings}\n          selectionSettings={this.props.args.params.selectionSettings}\n          textWrapSettings={this.props.args.params.textWrapSettings}\n          allowResizing={this.props.args.params.allowResizing}\n          height={this.props.args.params.height}\n          width={this.props.args.params.width}\n          rowHeight={this.props.args.params.rowHeight}\n          rowRenderingMode={this.props.args.params.rowRenderingMode}\n          selectedRowIndex={this.props.args.params.selectedRowIndex}\n          printMode={this.props.args.params.printMode}\n          frozenColumns={this.props.args.params.frozenColumns}\n          gridLines={this.props.args.params.gridLines}\n          frozenRows={this.props.args.params.frozenRows}>\n          <ColumnsDirective>\n            {totalColumns}\n          </ColumnsDirective>\n          <Inject services={[Page, Sort, Filter, Group, Toolbar, InfiniteScroll, ExcelExport, PdfExport, Reorder, Resize, RowDD, Edit, Freeze, Search, DetailRow, ColumnChooser, ColumnMenu]} />\n        </GridComponent>\n      </>\n    )\n  }\n\n}\nexport default withStreamlitConnection(EJ2Grid)\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport EJ2Grid from './ej2-grid';\n\nReactDOM.render(\n  <React.StrictMode>\n    <EJ2Grid />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}