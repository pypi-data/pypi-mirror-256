Index: data_analyzer.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import csv\r\nfrom datetime import datetime\r\nimport geopy.distance\r\n\r\nfrom data_holders import ZTM_bus\r\n\r\n\r\nclass data_analyzer:\r\n    bus_data = dict\r\n\r\n    def __init__(self):\r\n        self.bus_data = {}\r\n\r\n    def read_bus_data(self, bus_filename):\r\n        with open(bus_filename, 'r') as file:\r\n            reader = csv.reader(file)\r\n            nr_of_lines = 0\r\n            for row in reader:\r\n                nr_of_lines = nr_of_lines + 1\r\n                if nr_of_lines > 1:\r\n                    bus = ZTM_bus(row[0], row[1], row[2], row[3], row[4],\r\n                                  datetime.strptime(row[5], \"%Y-%m-%d %H:%M:%S\"))\r\n                    if row[0] in self.bus_data:\r\n                        if row[3] in self.bus_data[row[0]]:\r\n                            self.bus_data[row[0]][row[3]].append(bus)\r\n                        else:\r\n                            self.bus_data[row[0]][row[3]] = [bus]\r\n                    else:\r\n                        self.bus_data[row[0]] = {row[3]: [bus]}\r\n\r\n    def calc_average_speed(self, coords1, coords2, sample_length):\r\n        dist = geopy.distance.geodesic(coords1, coords2).m\r\n        speed = dist / sample_length * 3600 / 1000\r\n        return speed\r\n\r\n    def calc_nr_of_overspeeding_busses(self, sample_length):\r\n        nr_of_busses_overspeeding = 0\r\n        for bus_line in self.bus_data:\r\n            for bus in self.bus_data[bus_line]:\r\n                nr_of_overspeeds = 0\r\n                for i in range(len(self.bus_data[bus_line][bus]) - 1):\r\n                    coords1 = (self.bus_data[bus_line][bus][i].latitude, self.bus_data[bus_line][bus][i].longitude)\r\n                    coords2 = (self.bus_data[bus_line][bus][i + 1].latitude, self.bus_data[bus_line][bus][i + 1].longitude)\r\n                    dist = geopy.distance.geodesic(coords1, coords2).m\r\n                    speed = self.calc_average_speed(coords1, coords2, sample_length)\r\n                    print(str(dist) + \" \" + str(speed))\r\n                    if speed > 50.0:\r\n                        nr_of_overspeeds = nr_of_overspeeds + 1\r\n\r\n                if nr_of_overspeeds > 0:\r\n                    nr_of_busses_overspeeding = nr_of_busses_overspeeding + 1\r\n\r\n        return nr_of_busses_overspeeding\r\n\r\n    def find_all_equal_points_on_route(self, coords1, coords2):\r\n        difference_x = abs(coords1[0] - coords2[0])\r\n        difference_y = abs(coords1[1] - coords2[1])\r\n\r\n\r\n\r\n\r\n    def point_with_many_overspeeds(self, sample_length):\r\n        for bus_nr in self.bus_data:\r\n            for vehicle_nr in self.bus_data[bus_nr]:\r\n                for i in range(len(self.bus_data[bus_nr][vehicle_nr]) - 1):\r\n                    coords1 = (self.bus_data[bus_nr][vehicle_nr][i].latitude, self.bus_data[bus_nr][vehicle_nr][i].longitude)\r\n                    coords2 = (self.bus_data[bus_nr][vehicle_nr][i+1].latitude, self.bus_data[bus_nr][vehicle_nr][i+1].longitude)\r\n                    speed = self.calc_average_speed(coords1, coords2, sample_length)\r\n                    if speed > 50.0:\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/data_analyzer.py b/data_analyzer.py
--- a/data_analyzer.py	(revision 135d41a8d788535ec29d6c739b883ef707fbfdb3)
+++ b/data_analyzer.py	(date 1707386447823)
@@ -66,5 +66,5 @@
                     coords1 = (self.bus_data[bus_nr][vehicle_nr][i].latitude, self.bus_data[bus_nr][vehicle_nr][i].longitude)
                     coords2 = (self.bus_data[bus_nr][vehicle_nr][i+1].latitude, self.bus_data[bus_nr][vehicle_nr][i+1].longitude)
                     speed = self.calc_average_speed(coords1, coords2, sample_length)
-                    if speed > 50.0:
+                    #if speed > 50.0:
 
Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import geopy\r\n\r\nfrom data_analyzer import data_analyzer\r\nfrom data_reader import data_reader\r\n\r\nif __name__ == '__main__':\r\n    dt = data_reader('afd497b5-83e7-4ecf-8c98-cd1805aa16c9')\r\n    #dt.get_bus_data(2, 1)\r\n    #dt.dump_bus_data('bus_data.csv')\r\n\r\n    da = data_analyzer()\r\n    da.read_bus_data('bus_data.csv')\r\n    #print(da.bus_data['225']['1008'][0].latitude)\r\n    #print(da.bus_data['225']['1008'][0].longitude)\r\n    #print(da.bus_data['225']['1008'][1].latitude)\r\n    #print(da.bus_data['225']['1008'][1].longitude)\r\n    coords1 = (da.bus_data['225']['1008'][0].latitude, da.bus_data['225']['1008'][0].longitude)\r\n    coords2 = (da.bus_data['225']['1008'][1].latitude, da.bus_data['225']['1008'][1].longitude)\r\n    dist = geopy.distance.geodesic(coords1, coords2).m\r\n    #print(dist)\r\n    #print(' ')\r\n    #print(da.calc_nr_of_overspeeding_busses(1))\r\n\r\n    #dt.get_stops_data()\r\n    #dt.dump_stops_data('bus_stop_data.csv')\r\n\r\n    dt.get_busses_for_stops('bus_stop_data.csv')\r\n    dt.dump_busses_for_stops('bus_for_stops.csv')\r\n\r\n    #dt.get_bus_schedules('bus_for_stops.csv')\r\n    #dt.dump_schedules()\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision 135d41a8d788535ec29d6c739b883ef707fbfdb3)
+++ b/main.py	(date 1707386419376)
@@ -24,10 +24,10 @@
     #dt.get_stops_data()
     #dt.dump_stops_data('bus_stop_data.csv')
 
-    dt.get_busses_for_stops('bus_stop_data.csv')
-    dt.dump_busses_for_stops('bus_for_stops.csv')
+    #dt.get_busses_for_stops('bus_stop_data.csv')
+    #dt.dump_busses_for_stops('bus_for_stops.csv')
 
-    #dt.get_bus_schedules('bus_for_stops.csv')
-    #dt.dump_schedules()
+    dt.get_bus_schedules('bus_for_stops.csv')
+    dt.dump_schedules()
 
 
Index: data_reader.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import time\r\nimport csv\r\n\r\nfrom datetime import datetime\r\n\r\nfrom data_holders import ZTM_bus, bus_stop, bus_for_stop, bus_schedule_entry\r\nimport requests\r\n\r\n\r\nclass data_reader:\r\n    api_key: str\r\n    bus_data: dict\r\n    bus_stop_data: dict\r\n    busses_for_stops: dict\r\n    schedules: dict\r\n\r\n    def __init__(self, api_key):\r\n        self.api_key = api_key\r\n        self.bus_data = {}\r\n        self.bus_stop_data = {}\r\n        self.busses_for_stops = {}\r\n        self.schedules = {}\r\n\r\n    def time_parser(self, time_data):\r\n        if time_data[:2] == '24':\r\n            time_data = '00' + time_data[2:]\r\n        elif time_data[:2] == '25':\r\n            time_data = '01' + time_data[2:]\r\n        elif time_data[:2] == '26':\r\n            time_data = '02' + time_data[2:]\r\n        elif time_data[:2] == '27':\r\n            time_data = '03' + time_data[2:]\r\n        elif time_data[:2] == '28':\r\n            time_data = '04' + time_data[2:]\r\n        elif time_data[:2] == '29':\r\n            time_data = '05' + time_data[2:]\r\n\r\n        return time_data\r\n\r\n    def get_bus_data(self, nr_of_samples, sample_length):\r\n        for i in range(nr_of_samples):\r\n            response = response = requests.post(\r\n                'https://api.um.warszawa.pl/api/action/busestrams_get/?resource_id= f2e5503e-' +\r\n                '927d-4ad3-9500-4ab9e55deb59&apikey=' + self.api_key + '&type=1')\r\n            for j in range(len(response.json()['result'])):\r\n                helper = response.json()['result'][j]\r\n                time_data = self.time_parser(helper['Time'])\r\n                bus = ZTM_bus(helper['Lines'], helper['Lon'], helper['Lat'], helper['VehicleNumber'],\r\n                              helper['Brigade'], datetime.strptime(time_data, \"%Y-%m-%d %H:%M:%S\"))\r\n\r\n                if helper['Lines'] in self.bus_data:\r\n                    self.bus_data[helper['Lines']].append(bus)\r\n                else:\r\n                    self.bus_data[helper['Lines']] = [bus]\r\n\r\n            time.sleep(sample_length)\r\n\r\n    def dump_bus_data(self, file_to_dump):\r\n        data_headers = ['Lines', 'Longitude', 'Latitude', 'VehicleNumber', 'Brigade', 'Time']\r\n        with open(file_to_dump, 'w', newline='', encoding='utf16') as file:\r\n            csv_writer = csv.writer(file)\r\n            csv_writer.writerow(data_headers)\r\n            for key in self.bus_data:\r\n                for value in self.bus_data[key]:\r\n                    csv_writer.writerow(value.to_csv())\r\n\r\n        self.bus_data.clear()\r\n\r\n    def get_stops_data(self):\r\n        response = requests.post(\r\n            'https://api.um.warszawa.pl/api/action/dbstore_get/?id=ab75c33d-3a26-4342-b36a-6e5fef0a3ac3&page=1')\r\n        for data in response.json()['result']:\r\n            bs = bus_stop(data['values'][2]['value'], data['values'][3]['value'], data['values'][0]['value'],\r\n                          data['values'][1]['value'], data['values'][6]['value'],\r\n                          float(data['values'][5]['value']), float(data['values'][4]['value']))\r\n\r\n            if bs.team_name in self.bus_stop_data:\r\n                self.bus_stop_data[bs.team_name].append(bs)\r\n            else:\r\n                self.bus_stop_data[bs.team_name] = [bs]\r\n\r\n            print(data['values'])\r\n\r\n    def dump_stops_data(self, file_to_dump):\r\n        data_headers = ['Team_name', 'Street_id', 'Team', 'Post', 'Direction', 'Longitude', 'Latitude']\r\n        with open(file_to_dump, 'w', newline='', encoding='utf16') as file:\r\n            csv_writer = csv.writer(file)\r\n            csv_writer.writerow(data_headers)\r\n            for key in self.bus_stop_data:\r\n                for value in self.bus_stop_data[key]:\r\n                    csv_writer.writerow(value.to_csv())\r\n\r\n    def get_busses_for_stops(self, bus_stop_list_file):\r\n        with open(bus_stop_list_file, 'r', encoding='utf16') as file:\r\n            csv_reader = csv.reader(file)\r\n            nr_of_lines = 0\r\n            for line in csv_reader:\r\n                nr_of_lines = nr_of_lines + 1\r\n                if nr_of_lines > 1 and line[2] != 'null' and line[3] != 'null':\r\n                    response = requests.post(\r\n                        'https://api.um.warszawa.pl/api/action/dbtimetable_get/?id=88cd555f-6f31-43ca-9de4-66c479ad5942&busstopId=' +\r\n                        line[2] + '&busstopNr=' + line[3] + '&apikey=' + self.api_key)\r\n                    for data in response.json()['result']:\r\n                        bus = bus_for_stop(line[2], line[3], data['values'][0]['value'])\r\n                        if len(bus.bus) == 3:\r\n                            if bus.team in self.busses_for_stops:\r\n                                self.busses_for_stops[bus.team].append(bus)\r\n                            else:\r\n                                self.busses_for_stops[bus.team] = [bus]\r\n\r\n    def dump_busses_for_stops(self, file_to_dump):\r\n        data_headers = ['Team', 'Post', 'Bus']\r\n        with open(file_to_dump, 'w', newline='', encoding='utf16') as file:\r\n            csv_writer = csv.writer(file)\r\n            csv_writer.writerow(data_headers)\r\n            csv_writer.writerow(data_headers)\r\n            for key in self.busses_for_stops:\r\n                for data in self.busses_for_stops[key]:\r\n                    csv_writer.writerow(data.to_csv())\r\n\r\n    def get_bus_schedules(self, busses_for_stops_file):\r\n        with open(busses_for_stops_file, 'r', encoding='utf16') as file:\r\n            csv_reader = csv.reader(file)\r\n            nr_of_lines = 0\r\n            for line in csv_reader:\r\n                nr_of_lines = nr_of_lines + 1\r\n                if nr_of_lines > 1 and len(line) == 3:\r\n                    #print(line)\r\n                    response = requests.post(\r\n                        'https://api.um.warszawa.pl/api/action/dbtimetable_get/?id=e923fa0e-d96c-43f9-ae6e-60518c9f3238&busstopId=' +\r\n                        line[0] + '&busstopNr=' + line[1] + '&line=' + line[2] + '&apikey=' + self.api_key)\r\n                    #print(response.json()['result'])\r\n                    for data in response.json()['result']:\r\n                        #print(data['values'])\r\n                        time_data = self.time_parser(data['values'][5]['value'])\r\n                        scl = bus_schedule_entry(data['values'][2]['value'], data['values'][3]['value'],\r\n                                                 data['values'][4]['value'],\r\n                                                 datetime.strptime(time_data, \"%H:%M:%S\"))\r\n                    if line[0] in self.schedules:\r\n                        if line[1] in self.schedules[line[0]]:\r\n                            if line[2] in self.schedules[line[0]][line[1]]:\r\n                                self.schedules[line[0]][line[1]][line[2]].append(scl)\r\n                            else:\r\n                                self.schedules[line[0]][line[1]][line[2]] = [scl]\r\n                        else:\r\n                            self.schedules[line[0]][line[1]] = {line[2]: [scl]}\r\n                    else:\r\n                        self.schedules[line[0]] = {line[1]: {line[2]: [scl]}}\r\n\r\n    def dump_schedules(self):\r\n        data_headers = ['Brigade', 'Direction', 'Route', 'Time']\r\n        for team in self.schedules:\r\n            for post in self.schedules[team]:\r\n                for bus in self.schedules[team][post]:\r\n                    with open('schedules/' + team + '_' + post + '_' + bus + '.csv', 'w',\r\n                              newline='', encoding='utf16') as file:\r\n                        csv_writer = csv.writer(file)\r\n                        csv_writer.writerow(data_headers)\r\n                        for data in self.schedules[team][post][bus]:\r\n                            csv_writer.writerow(data.to_csv())\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/data_reader.py b/data_reader.py
--- a/data_reader.py	(revision 135d41a8d788535ec29d6c739b883ef707fbfdb3)
+++ b/data_reader.py	(date 1707386525731)
@@ -136,16 +136,16 @@
                         scl = bus_schedule_entry(data['values'][2]['value'], data['values'][3]['value'],
                                                  data['values'][4]['value'],
                                                  datetime.strptime(time_data, "%H:%M:%S"))
-                    if line[0] in self.schedules:
-                        if line[1] in self.schedules[line[0]]:
-                            if line[2] in self.schedules[line[0]][line[1]]:
-                                self.schedules[line[0]][line[1]][line[2]].append(scl)
-                            else:
-                                self.schedules[line[0]][line[1]][line[2]] = [scl]
-                        else:
-                            self.schedules[line[0]][line[1]] = {line[2]: [scl]}
-                    else:
-                        self.schedules[line[0]] = {line[1]: {line[2]: [scl]}}
+                        if line[0] in self.schedules:
+                            if line[1] in self.schedules[line[0]]:
+                                if line[2] in self.schedules[line[0]][line[1]]:
+                                    self.schedules[line[0]][line[1]][line[2]].append(scl)
+                                else:
+                                    self.schedules[line[0]][line[1]][line[2]] = [scl]
+                            else:
+                                self.schedules[line[0]][line[1]] = {line[2]: [scl]}
+                        else:
+                            self.schedules[line[0]] = {line[1]: {line[2]: [scl]}}
 
     def dump_schedules(self):
         data_headers = ['Brigade', 'Direction', 'Route', 'Time']
