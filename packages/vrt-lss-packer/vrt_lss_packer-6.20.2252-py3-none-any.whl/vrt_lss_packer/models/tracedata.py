# coding: utf-8

"""
    VRt.Packer [PC]

    Veeroute Packer API.  # Description  The service is designed to calculate the placement of goods inside given packages.  ## Types of packages  ### Pallet  ![pallet](../images/packer_pallet.svg)  *Mono-pallet*  If the pallet is fully equipped with the same product, then such a pallet is called **mono-pallet**, such a pallet has the following loading rules:  1. The maximum allowable height of the pallet with the goods laid on it is taken into account. 1. The maximum allowable weight of the loaded pallet is taken into account. 1. Goods packages can only be stacked parallel to the walls of the pallet. 1. It is allowed to rotate packages around the vertical Z-axis and only at a right angle. 1. In order to equalize the height between the positions (to place another pallet on top), empty spaces can be added to the stacking by layers.  *Zone tray*  After the formation of mono-pallets, the remaining part of the goods of the same article is placed on the next pallet, which is divided into zones by means of a cardboard partition in such a way that only one item of goods is placed in each zone, while the zones have the following restrictions:  1. The zones are rectangular. 1. The ratio between the sides of the zones can be any. 1. One of the sides of any zone is always in contact with the edge of the pallet. 1. Permissible number of zones on a pallet: from 2 to 6. 1. Each zone is filled according to the rules for filling a mono-pallet. 1. The stacking height of all goods does not exceed 50 mm, so that another pallet can be placed on top of such a pallet. 1. It is allowed to form pallets with different stacking heights for different positions (height difference is more than 50 mm), if these are the top pallets in the stack.  ### Mixbox  ![mixbox](../images/packer_mixbox.svg)  If the above steps fail to place the item in this way, so that the pallet is of the required height or weight, mixboxes are used:  1. Mixbox can only be placed in one layer. 1. Different goods can be placed in one mixbox, in this case it is divided by partitions similarly to a pallet (the only difference is that the height of the packed goods is not aligned). 1. Mixboxes can be mixed with items on the same pallet. 1. One product can be packed in different mixboxes.  ### Slot  ![slot](../images/packer_slot.svg)  The loaded pallets are stacked on top of each other, the slot is where the stack of pallets is placed. The slot has no physical body - so the dimensions of the `body` of the slot are zero.  ## Coordinate system  ![coordinates](../images/packer_coordinates.svg)  To indicate the location of packages and goods, a local coordinate system is used, in which the coordinates of a particular object are indicated relative to the near left lower corner of the parent object, while:  * Horizontal plane - axes **X**, **Y** * Vertical - **Z** axis  The ratio of the axes of goods and packages:  * Width - **X** * Length - **Y** * Height - **Z**  ## Entity diagram  ![erd](../uml/packer.svg)

    The version of the OpenAPI document: 6.20.2252
    Contact: servicedesk@veeroute.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from vrt_lss_packer.models.service_name import ServiceName

class Tracedata(BaseModel):
    """
    Data for request tracing.  # noqa: E501
    """
    code: StrictStr = Field(description="Unique process identifier. If an asynchronous process is running, then the code for it will be the same, although other fields may differ. ")
    client: Annotated[str, Field(min_length=2, strict=True, max_length=256)] = Field(description="The unique identifier of the client (`company_key` + `_|_` + `username`) that made the request. ")
    server: Annotated[str, Field(min_length=2, strict=True, max_length=256)] = Field(description="Server identifier.")
    service: ServiceName
    operation: Annotated[str, Field(min_length=3, strict=True, max_length=256)] = Field(description="Operation identifier.")
    time: datetime = Field(description="Date and time service method run in the [ISO 8601](https://tools.ietf.org/html/rfc3339#section-5.6) format.")
    __properties = ["code", "client", "server", "service", "operation", "time"]

    @validator('client')
    def client_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"\w+", value):
            raise ValueError(r"must validate the regular expression /\w+/")
        return value

    @validator('server')
    def server_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"\w+", value):
            raise ValueError(r"must validate the regular expression /\w+/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Tracedata:
        """Create an instance of Tracedata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Tracedata:
        """Create an instance of Tracedata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Tracedata.parse_obj(obj)

        _obj = Tracedata.parse_obj({
            "code": obj.get("code"),
            "client": obj.get("client"),
            "server": obj.get("server"),
            "service": obj.get("service"),
            "operation": obj.get("operation"),
            "time": obj.get("time")
        })
        return _obj


