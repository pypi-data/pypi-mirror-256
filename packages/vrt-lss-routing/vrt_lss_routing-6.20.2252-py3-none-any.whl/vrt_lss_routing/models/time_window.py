# coding: utf-8

"""
    VRt.Routing [RO]

    # Description  **VRt.Routing** is designed to find a route between locations and build time-distance matrices.  ## Features  * Getting the distance and time between two locations, including traffic jams * Finding a route between specified locations * Creating a time-distance matrix  ## Entity relationship diagram  ![erd](../uml/routing.svg) 

    The version of the OpenAPI document: 6.20.2252
    Contact: servicedesk@veeroute.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json





class TimeWindow(BaseModel):
    """
    Time window.  # noqa: E501
    """
    var_from: datetime = Field(description="Date and time in the [ISO 8601](https://tools.ietf.org/html/rfc3339#section-5.6) format. ", alias="from")
    to: datetime = Field(description="Date and time in the [ISO 8601](https://tools.ietf.org/html/rfc3339#section-5.6) format. ")
    __properties = ["from", "to"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TimeWindow:
        """Create an instance of TimeWindow from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TimeWindow:
        """Create an instance of TimeWindow from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TimeWindow.parse_obj(obj)

        _obj = TimeWindow.parse_obj({
            "var_from": obj.get("from"),
            "to": obj.get("to")
        })
        return _obj


