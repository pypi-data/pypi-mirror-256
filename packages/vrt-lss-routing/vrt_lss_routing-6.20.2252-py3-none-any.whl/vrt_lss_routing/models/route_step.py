# coding: utf-8

"""
    VRt.Routing [RO]

    # Description  **VRt.Routing** is designed to find a route between locations and build time-distance matrices.  ## Features  * Getting the distance and time between two locations, including traffic jams * Finding a route between specified locations * Creating a time-distance matrix  ## Entity relationship diagram  ![erd](../uml/routing.svg) 

    The version of the OpenAPI document: 6.20.2252
    Contact: servicedesk@veeroute.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from vrt_lss_routing.models.route_polyline import RoutePolyline
from vrt_lss_routing.models.transport_type import TransportType

class RouteStep(BaseModel):
    """
    Route segment step (a separate step for a separate type of transports).  # noqa: E501
    """
    transport_type: TransportType
    polyline: RoutePolyline
    __properties = ["transport_type", "polyline"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RouteStep:
        """Create an instance of RouteStep from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of polyline
        if self.polyline:
            _dict['polyline'] = self.polyline.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RouteStep:
        """Create an instance of RouteStep from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RouteStep.parse_obj(obj)

        _obj = RouteStep.parse_obj({
            "transport_type": obj.get("transport_type"),
            "polyline": RoutePolyline.from_dict(obj.get("polyline")) if obj.get("polyline") is not None else None
        })
        return _obj


