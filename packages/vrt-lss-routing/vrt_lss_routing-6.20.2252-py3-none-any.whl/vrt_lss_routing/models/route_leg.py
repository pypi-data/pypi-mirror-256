# coding: utf-8

"""
    VRt.Routing [RO]

    # Description  **VRt.Routing** is designed to find a route between locations and build time-distance matrices.  ## Features  * Getting the distance and time between two locations, including traffic jams * Finding a route between specified locations * Creating a time-distance matrix  ## Entity relationship diagram  ![erd](../uml/routing.svg) 

    The version of the OpenAPI document: 6.20.2252
    Contact: servicedesk@veeroute.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from vrt_lss_routing.models.route_statistics import RouteStatistics
from vrt_lss_routing.models.route_step import RouteStep

class RouteLeg(BaseModel):
    """
    The route leg between two locations.  # noqa: E501
    """
    steps: Annotated[List[RouteStep], Field(min_length=0, max_length=12)] = Field(description="Steps required to pass a route leg.")
    statistics: RouteStatistics
    __properties = ["steps", "statistics"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RouteLeg:
        """Create an instance of RouteLeg from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in steps (list)
        _items = []
        if self.steps:
            for _item in self.steps:
                if _item:
                    _items.append(_item.to_dict())
            _dict['steps'] = _items
        # override the default output from pydantic by calling `to_dict()` of statistics
        if self.statistics:
            _dict['statistics'] = self.statistics.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RouteLeg:
        """Create an instance of RouteLeg from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RouteLeg.parse_obj(obj)

        _obj = RouteLeg.parse_obj({
            "steps": [RouteStep.from_dict(_item) for _item in obj.get("steps")] if obj.get("steps") is not None else None,
            "statistics": RouteStatistics.from_dict(obj.get("statistics")) if obj.get("statistics") is not None else None
        })
        return _obj


