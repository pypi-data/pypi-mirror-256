# coding: utf-8

"""
    VRt.Routing [RO]

    # Description  **VRt.Routing** is designed to find a route between locations and build time-distance matrices.  ## Features  * Getting the distance and time between two locations, including traffic jams * Finding a route between specified locations * Creating a time-distance matrix  ## Entity relationship diagram  ![erd](../uml/routing.svg) 

    The version of the OpenAPI document: 6.20.2252
    Contact: servicedesk@veeroute.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from vrt_lss_routing.models.geo_settings import GeoSettings
from vrt_lss_routing.models.transport_type import TransportType
from vrt_lss_routing.models.waypoint import Waypoint

class RouteTask(BaseModel):
    """
    Task for route planning. The departure time considers traffic jams.   # noqa: E501
    """
    waypoints: Annotated[List[Waypoint], Field(min_length=2, max_length=15001)] = Field(description="Array of geographical points to build path between them.")
    transport_type: Optional[TransportType] = None
    geo_settings: Optional[GeoSettings] = None
    departure_time: Optional[datetime] = Field(default=None, description="Departure date and time according to the [ISO 8601](https://tools.ietf.org/html/rfc3339#section-5.6).")
    result_timezone: Optional[Annotated[int, Field(le=12, strict=True, ge=-12)]] = Field(default=0, description="Time zone for calculation results.")
    detail: Optional[StrictBool] = Field(default=False, description="Planning a detailed route.")
    full_segments: Optional[StrictBool] = Field(default=True, description="Return full segments list. ")
    polyline: Optional[StrictBool] = Field(default=True, description="Generate a polyline between points.")
    __properties = ["waypoints", "transport_type", "geo_settings", "departure_time", "result_timezone", "detail", "full_segments", "polyline"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RouteTask:
        """Create an instance of RouteTask from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in waypoints (list)
        _items = []
        if self.waypoints:
            for _item in self.waypoints:
                if _item:
                    _items.append(_item.to_dict())
            _dict['waypoints'] = _items
        # override the default output from pydantic by calling `to_dict()` of geo_settings
        if self.geo_settings:
            _dict['geo_settings'] = self.geo_settings.to_dict()
        # set to None if departure_time (nullable) is None
        # and __fields_set__ contains the field
        if self.departure_time is None and "departure_time" in self.__fields_set__:
            _dict['departure_time'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RouteTask:
        """Create an instance of RouteTask from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RouteTask.parse_obj(obj)

        _obj = RouteTask.parse_obj({
            "waypoints": [Waypoint.from_dict(_item) for _item in obj.get("waypoints")] if obj.get("waypoints") is not None else None,
            "transport_type": obj.get("transport_type"),
            "geo_settings": GeoSettings.from_dict(obj.get("geo_settings")) if obj.get("geo_settings") is not None else None,
            "departure_time": obj.get("departure_time"),
            "result_timezone": obj.get("result_timezone") if obj.get("result_timezone") is not None else 0,
            "detail": obj.get("detail") if obj.get("detail") is not None else False,
            "full_segments": obj.get("full_segments") if obj.get("full_segments") is not None else True,
            "polyline": obj.get("polyline") if obj.get("polyline") is not None else True
        })
        return _obj


