"""Generated by Sideko (sideko.dev)"""
import io
import typing

from pydantic import (
    BaseModel as _PydanticBaseModel,
    Field as _PydanticField,
    ConfigDict as _PydanticConfigDict,
)

ModelFiles = typing.List[
    typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]
]


class BinaryResponse:
    content: bytes
    headers: dict[str, str]

    def __init__(self, content: bytes, headers: dict[str, str]) -> None:
        self.content = content
        self.headers = headers


class PostApiDocsGenerateBody(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    bucket: typing.Optional[str] = _PydanticField(alias="bucket", default=None)
    expires_in: typing.Optional[int] = _PydanticField(alias="expiresIn", default=None)
    password: typing.Optional[str] = _PydanticField(alias="password", default=None)
    save: typing.Optional[bool] = _PydanticField(alias="save", default=None)
    test: typing.Optional[bool] = _PydanticField(alias="test", default=None)
    title: typing.Optional[str] = _PydanticField(alias="title", default=None)
    username: typing.Optional[str] = _PydanticField(alias="username", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostApiDocsInitiateBodyAssetsItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    content: typing.Optional[str] = _PydanticField(alias="content", default=None)
    path: typing.Optional[str] = _PydanticField(alias="path", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostApiDocsInitiateResponseSignedUrlsItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    path: typing.Optional[str] = _PydanticField(alias="path", default=None)
    signed_url: typing.Optional[str] = _PydanticField(alias="signedUrl", default=None)
    token: typing.Optional[str] = _PydanticField(alias="token", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostApiDocsInitiateBody(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    assets: typing.Optional[
        typing.List[PostApiDocsInitiateBodyAssetsItem]
    ] = _PydanticField(alias="assets", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostApiDocsInitiateResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    bucket: typing.Optional[str] = _PydanticField(alias="bucket", default=None)
    password: typing.Optional[str] = _PydanticField(alias="password", default=None)
    signed_urls: typing.Optional[
        typing.List[PostApiDocsInitiateResponseSignedUrlsItem]
    ] = _PydanticField(alias="signedUrls", default=None)
    upload_url: typing.Optional[str] = _PydanticField(alias="uploadURL", default=None)
    username: typing.Optional[str] = _PydanticField(alias="username", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)
