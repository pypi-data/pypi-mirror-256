"""
Generated by Sideko (sideko.dev)

Various auth provider to support adding authentication to a request
"""
import abc
import typing
from pydantic import BaseModel


class AuthProvider(abc.ABC):
    @abc.abstractmethod
    def add_auth(self, req_kwargs: typing.Dict) -> typing.Dict:
        """Adds relevant auth to request kwargs"""


class AuthBasic(BaseModel, AuthProvider):
    username: typing.Optional[str]
    password: typing.Optional[str]

    def add_auth(self, req_kwargs: typing.Dict) -> typing.Dict:
        if self.username is not None and self.password is not None:
            req_kwargs["auth"] = (self.username, self.password)

        return req_kwargs


class AuthBearer(BaseModel, AuthProvider):
    val: typing.Optional[str]

    def add_auth(self, req_kwargs: typing.Dict) -> typing.Dict:
        if self.val is not None:
            # Add bearer header auth val
            headers = req_kwargs.get("headers", {})
            headers["Authorization"] = f"Bearer {self.val}"
            req_kwargs["headers"] = headers

        return req_kwargs


class AuthKeyQuery(BaseModel, AuthProvider):
    query_name: str
    val: typing.Optional[str]

    def add_auth(self, req_kwargs: typing.Dict) -> typing.Dict:
        if self.val is not None:
            # Add query auth value
            params = req_kwargs.get("params", {})
            params[self.query_name] = self.val
            req_kwargs["params"] = params

        return req_kwargs


class AuthKeyHeader(BaseModel, AuthProvider):
    header_name: str
    val: typing.Optional[str]

    def add_auth(self, req_kwargs: typing.Dict) -> typing.Dict:
        if self.val is not None:
            # Add header auth val
            headers = req_kwargs.get("headers", {})
            headers[self.header_name] = self.val
            req_kwargs["headers"] = headers

        return req_kwargs


class AuthKeyCookie(BaseModel, AuthProvider):
    cookie_name: str
    val: typing.Optional[str]

    def add_auth(self, req_kwargs: typing.Dict) -> typing.Dict:
        if self.val is not None:
            # Add header auth val
            cookies = req_kwargs.get("cookies", {})
            cookies[self.cookie_name] = self.val
            req_kwargs["cookies"] = cookies

        return req_kwargs
