"""Generated by Sideko (sideko.dev)"""
import typing

import httpx
from urllib.parse import quote_plus

from one_doc.schemas import *
import one_doc.auth as sdk_auth
import one_doc.errors as sdk_errors
import one_doc.response as sdk_response


T = typing.TypeVar("T")


class SidekoClient:
    def __init__(
        self,
        *,
        api_key_auth: typing.Optional[str] = None,
        base_url: typing.Optional[str] = None,
    ):
        url = base_url or "https://app.onedoclabs.com"
        self.base_url = url
        self.session = httpx.Client()

        # register auth providers
        self._auth: typing.Dict[str, sdk_auth.AuthProvider] = {}
        self._auth["ApiKeyAuth"] = sdk_auth.AuthKeyHeader(
            header_name="x-api-key", val=api_key_auth
        )

    def _to_encodable(self, target: typing.Any) -> typing.Any:
        if isinstance(target, list):
            return [self._to_encodable(el) for el in target]
        dump_method = getattr(target, "model_api_dump", None)
        if callable(dump_method):
            return target.model_api_dump()

        return target

    def _format_param(
        self,
        value: typing.Union[str, int, typing.List[typing.Union[str, int]], dict],
        explode: bool,
    ) -> typing.List[typing.Union[str, int]]:
        if isinstance(value, (list, dict)) and not explode:
            return quote_plus(",".join(map(str, value)))
        else:
            return value

    def _add_auth(self, auth_names: typing.List[str], **req_kwargs) -> typing.Dict:
        for auth_name in auth_names:
            provider = self._auth.get(auth_name, None)
            if provider is not None:
                req_kwargs = provider.add_auth(req_kwargs)

        return req_kwargs

    def post_api_docs_generate(
        self, *, data: PostApiDocsGenerateBody
    ) -> BinaryResponse:
        """
        This route is responsible for generating a PDF from a bucket.  It expects a JSON body with details of the bucket, user credentials, and PDF generation options.
        """
        _endpoint = f"/api/docs/generate"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _request_data = self._to_encodable(data)
        _authed_kwargs = self._add_auth(
            [
                "ApiKeyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.post(_url, json=_request_data, **_authed_kwargs)
        if not _raw_response.content:
            return None
        if _raw_response.status_code == 200:
            return BinaryResponse(
                content=_raw_response.content, headers=_raw_response.headers
            )
        if _raw_response.status_code == 400:
            raise sdk_errors.RequestException(
                response=_raw_response,
                data=sdk_response.cast_response(_raw_response, typing.Any),
            )
        if _raw_response.status_code == 401:
            raise sdk_errors.RequestException(
                response=_raw_response,
                data=sdk_response.cast_response(_raw_response, typing.Any),
            )
        if _raw_response.status_code == 404:
            raise sdk_errors.RequestException(
                response=_raw_response,
                data=sdk_response.cast_response(_raw_response, typing.Any),
            )
        if _raw_response.status_code == 500:
            raise sdk_errors.RequestException(
                response=_raw_response,
                data=sdk_response.cast_response(_raw_response, typing.Any),
            )
        raise sdk_errors.InvalidResponseBodyException(
            response=_raw_response, expected_type=BinaryResponse
        )

    def post_api_docs_initiate(
        self, *, data: PostApiDocsInitiateBody
    ) -> PostApiDocsInitiateResponse:
        """
        This endpoint creates a bucket for the html and all specified assets. It returns signed urls to the buckets.
        """
        _endpoint = f"/api/docs/initiate"
        _url = f"{self.base_url}{_endpoint}"

        _params = {}  # type: dict[str, typing.Any]
        _request_data = self._to_encodable(data)
        _authed_kwargs = self._add_auth(
            [
                "ApiKeyAuth",
            ],
            params=_params,
        )
        _raw_response = self.session.post(_url, json=_request_data, **_authed_kwargs)
        if not _raw_response.content:
            return None
        if _raw_response.status_code == 200:
            return sdk_response.cast_response(
                _raw_response, PostApiDocsInitiateResponse
            )
        if _raw_response.status_code == 401:
            raise sdk_errors.RequestException(
                response=_raw_response,
                data=sdk_response.cast_response(_raw_response, typing.Any),
            )
        if _raw_response.status_code == 500:
            raise sdk_errors.RequestException(
                response=_raw_response,
                data=sdk_response.cast_response(_raw_response, typing.Any),
            )
        raise sdk_errors.InvalidResponseBodyException(
            response=_raw_response, expected_type=PostApiDocsInitiateResponse
        )
