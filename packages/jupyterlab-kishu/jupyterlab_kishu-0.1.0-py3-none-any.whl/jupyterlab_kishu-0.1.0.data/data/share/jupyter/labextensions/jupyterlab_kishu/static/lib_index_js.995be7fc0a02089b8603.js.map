{"version":3,"file":"lib_index_js.995be7fc0a02089b8603.js","mappings":"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","sources":["webpack://jupyterlab_kishu/./src/handler.ts","webpack://jupyterlab_kishu/./src/index.ts"],"sourcesContent":["import { URLExt } from '@jupyterlab/coreutils';\n\nimport { ServerConnection } from '@jupyterlab/services';\n\n/**\n * Call the API extension\n *\n * @param endPoint API REST end point for the extension\n * @param init Initial values for the request\n * @returns The response body interpreted as JSON\n */\nexport async function requestAPI<T>(\n  endPoint = '',\n  init: RequestInit = {}\n): Promise<T> {\n  // Make request to Jupyter API\n  const settings = ServerConnection.makeSettings();\n  const requestUrl = URLExt.join(\n    settings.baseUrl,\n    'kishu', // API Namespace\n    endPoint\n  );\n\n  let response: Response;\n  try {\n    response = await ServerConnection.makeRequest(requestUrl, init, settings);\n  } catch (error) {\n    throw new ServerConnection.NetworkError(error as TypeError);\n  }\n  const data: string = await response.text();\n  if (!response.ok) {\n    throw new ServerConnection.ResponseError(response, data);\n  }\n  if (data.length > 0) {\n    try {\n      return JSON.parse(data);\n    } catch (error) {\n      console.log('Not a JSON response body.', response);\n    }\n  }\n  throw new ServerConnection.ResponseError(response, data);\n}\n","import {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin\n} from '@jupyterlab/application';\nimport {\n  ICommandPalette,\n  InputDialog,\n  Notification,\n} from '@jupyterlab/apputils';\nimport {\n  INotebookTracker,\n} from '@jupyterlab/notebook';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { ITranslator } from '@jupyterlab/translation';\n\nimport { requestAPI } from './handler';\n\nconst PLUGIN_ID = 'jupyterlab_kishu:plugin';\n\nnamespace CommandIDs {\n  /**\n   * Initialize Kishu on the currently viewed notebook.\n   */\n  export const init = 'kishu:init';\n\n  /**\n   * Checkout a commit on the currently viewed notebook.\n   */\n  export const checkout = 'kishu:checkout';\n\n  /**\n   * Create a commit on the currently viewed notebook.\n   */\n  export const commit = 'kishu:commit';\n}\n\nnamespace KishuSetting {\n  export let kishu_dir = \"\";\n}\n\ninterface CommitSummary {\n  commit_id: string;\n  parent_id: string;\n  message: string;\n  timestamp: string;\n  code_block?: string;\n  runtime_ms?: number;\n}\n\ninterface HeadBranch {\n  branch_name?: string;\n  commit_id?: string;\n}\n\ninterface InitResult {\n  status: string;\n  message: string;\n}\n\ninterface LogAllResult {\n  commit_graph: CommitSummary[];\n  head: HeadBranch;\n}\n\ninterface CheckoutResult {\n  status: string;\n  message: string;\n}\n\ninterface InstrumentResult {\n  status: string;\n  message?: string;\n}\n\ninterface CommitResult {\n  status: string;\n  message: string;\n  reattachment: InstrumentResult;\n}\n\nfunction notifyError(message: string) {\n  Notification.error(message, { autoClose: 3000 });\n}\n\nfunction currentNotebookPath(tracker: INotebookTracker): string | undefined {\n  const widget = tracker.currentWidget;\n  if (!widget) {\n    console.log(`Missing tracker widget to detect currently viewed notebook.`);\n    return undefined;\n  }\n  return widget.context.localPath;\n}\n\nfunction commitSummaryToString(commit: CommitSummary): string {\n  const date = new Date(commit.timestamp);\n  return `[${date.toLocaleString()}]: ${commit.message} (${commit.commit_id})`;\n}\n\nfunction extractHashFromString(inputString: string): string | undefined {\n  const regex = /\\(([0-9a-fA-F-]+)\\)$/;\n  const match = inputString.match(regex);\n  if (match && match[1]) {\n    return match[1];\n  }\n  return undefined;\n}\n\nfunction loadSetting(setting: ISettingRegistry.ISettings): void {\n  // Read the settings and convert to the correct type\n  KishuSetting.kishu_dir = setting.get('kishu_dir').composite as string;\n  console.log(`Settings: kishu_dir= ${KishuSetting.kishu_dir}`);\n}\n\nfunction installCommands(\n  app: JupyterFrontEnd,\n  palette: ICommandPalette,\n  translator: ITranslator,\n  tracker: INotebookTracker,\n) {\n  const { commands } = app;\n  const trans = translator.load('jupyterlab');\n\n  /**\n   * Init\n   */\n\n  commands.addCommand(CommandIDs.init, {\n    label: (args) => (\n      args.label && args.label == 'short'\n        ? trans.__('Initialize/Re-attach')\n        : trans.__('Kishu: Initialize/Re-attach...')\n    ),\n    execute: async (_args) => {\n      // Detect currently viewed notebook.\n      const notebook_path = currentNotebookPath(tracker);\n      if (!notebook_path) {\n        notifyError(trans.__(`No currently viewed notebook detected to initialize/attach.`));\n        return;\n      }\n\n      // Make init request\n      const init_promise = requestAPI<InitResult>('init', {\n        method: 'POST',\n        body: JSON.stringify({notebook_path: notebook_path}),\n      });\n\n      // Report.\n      const notify_manager = Notification.manager;\n      const notify_id = notify_manager.notify(\n        trans.__(`Initializing Kishu on ${notebook_path}...`),\n        'in-progress',\n        { autoClose: false },\n      );\n      init_promise.then((init_result,) => {\n        if (init_result.status != \"ok\") {\n          notify_manager.update({\n            id: notify_id,\n            message: trans.__(`Kishu init failed.\\n\"${init_result.message}\"`),\n            type: 'error',\n            autoClose: 3000,\n          });\n        } else {\n          notify_manager.update({\n            id: notify_id,\n            message: trans.__(`Kishu init succeeded!\\n\"${init_result.message}\"`),\n            type: 'success',\n            autoClose: 3000,\n          });\n        }\n      });\n    }\n  });\n  palette.addItem({\n    command: CommandIDs.init,\n    category: 'Kishu',\n  });\n\n  /**\n   * Checkout\n   */\n\n  commands.addCommand(CommandIDs.checkout, {\n    label: (args) => (\n      args.label && args.label == 'short'\n        ? trans.__('Checkout')\n        : trans.__('Kishu: Checkout...')\n    ),\n    execute: async (_args) => {\n      // Detect currently viewed notebook.\n      const notebook_path = currentNotebookPath(tracker);\n      if (!notebook_path) {\n        notifyError(trans.__(`No currently viewed notebook detected to checkout.`));\n        return;\n      }\n\n      // List all commits.\n      const log_all_result = await requestAPI<LogAllResult>('log_all', {\n        method: 'POST',\n        body: JSON.stringify({notebook_path: notebook_path}),\n      });\n\n      // Ask for the target commit ID.\n      let maybe_commit_id = undefined;\n      if (!log_all_result || log_all_result.commit_graph.length == 0) {\n        // Failed to list, asking in text dialog directly.\n        maybe_commit_id = (\n          await InputDialog.getText({\n            placeholder: '<commit_id>',\n            title: trans.__('Checkout to...'),\n            okLabel: trans.__('Checkout')\n          })\n        ).value ?? undefined;\n        if (!maybe_commit_id) {\n          notifyError(trans.__(`Kishu checkout requires commit ID.`));\n        }\n      } else {\n        // Find the index to current commit.\n        let current_idx = log_all_result.commit_graph.findIndex(\n          commit => commit.commit_id === log_all_result.head.commit_id\n        );\n        if (current_idx == -1) {\n          current_idx = log_all_result.commit_graph.length - 1;\n        }\n\n        // Show the list and ask to pick one item\n        const selected_commit_str = (\n          await InputDialog.getItem({\n            items: log_all_result.commit_graph.map(commitSummaryToString),\n            current: current_idx,\n            editable: false,\n            title: trans.__('Checkout to...'),\n            okLabel: trans.__('Checkout')\n          })\n        ).value ?? undefined;\n        if (selected_commit_str !== undefined) {\n          maybe_commit_id = extractHashFromString(selected_commit_str);\n        }\n      }\n      if (!maybe_commit_id) {\n        return;\n      }\n      const commit_id: string = maybe_commit_id;\n\n      // Make checkout request\n      const checkout_promise = requestAPI<CheckoutResult>('checkout', {\n        method: 'POST',\n        body: JSON.stringify({notebook_path: notebook_path, commit_id: commit_id}),\n      });\n\n      // Reports.\n      const notify_manager = Notification.manager;\n      const notify_id = notify_manager.notify(\n        trans.__(`Checking out ${commit_id}...`),\n        'in-progress',\n        { autoClose: false },\n      );\n      checkout_promise.then((checkout_result,) => {\n        if (checkout_result.status != \"ok\") {\n          notify_manager.update({\n            id: notify_id,\n            message: trans.__(`Kishu checkout failed.\\n\"${checkout_result.message}\"`),\n            type: 'error',\n            autoClose: 3000,\n          });\n        } else {\n          notify_manager.update({\n            id: notify_id,\n            message: trans.__(`Kishu checkout to ${commit_id} succeeded!`),\n            type: 'success',\n            autoClose: 3000,\n          });\n        }\n      });\n    }\n  });\n  palette.addItem({\n    command: CommandIDs.checkout,\n    category: 'Kishu',\n  });\n\n  /**\n   * Commit\n   */\n\n  commands.addCommand(CommandIDs.commit, {\n    label: (args) => (\n      args.label && args.label == 'short'\n        ? trans.__('Commit')\n        : trans.__('Kishu: Commit...')\n    ),\n    execute: async (_args) => {\n      // Detect currently viewed notebook.\n      const notebook_path = currentNotebookPath(tracker);\n      if (!notebook_path) {\n        notifyError(trans.__(`No currently viewed notebook detected to ommit.`));\n        return;\n      }\n\n      // Ask for the commit message.\n      const message = (\n        await InputDialog.getText({\n          placeholder: '<commit_message>',\n          title: trans.__('Commit message'),\n          okLabel: trans.__('Commit')\n        })\n      ).value ?? undefined;\n      if (message == undefined) {\n        notifyError(trans.__(`Kishu commit requires a commit message.`));\n      }\n      if (!message) {\n        return;\n      }\n\n      // Make checkout request\n      const commit_promise = requestAPI<CommitResult>('commit', {\n        method: 'POST',\n        body: JSON.stringify({notebook_path: notebook_path, message: message}),\n      });\n\n      // Reports.\n      const notify_manager = Notification.manager;\n      const notify_id = notify_manager.notify(\n        trans.__(`Creating a commit...`),\n        'in-progress',\n        { autoClose: false },\n      );\n      commit_promise.then((commit_result,) => {\n        if (commit_result.status != \"ok\") {\n          notify_manager.update({\n            id: notify_id,\n            message: trans.__(`Kishu commit failed.\\n\"${commit_result.message}\"`),\n            type: 'error',\n            autoClose: 3000,\n          });\n        } else {\n          notify_manager.update({\n            id: notify_id,\n            message: trans.__(`Kishu commit succeeded!`),\n            type: 'success',\n            autoClose: 3000,\n          });\n        }\n      });\n    }\n  });\n  palette.addItem({\n    command: CommandIDs.commit,\n    category: 'Kishu',\n  });\n}\n\n/**\n * Initialization data for the jupyterlab_kishu extension.\n */\nconst plugin: JupyterFrontEndPlugin<void> = {\n  id: PLUGIN_ID,\n  description: 'Jupyter extension to interact with Kishu',\n  autoStart: true,\n  requires: [ICommandPalette, ITranslator, ISettingRegistry, INotebookTracker],\n  activate: (\n    app: JupyterFrontEnd,\n    palette: ICommandPalette,\n    translator: ITranslator,\n    settings: ISettingRegistry,\n    tracker: INotebookTracker,\n  ) => {\n    Promise.all([app.restored, settings.load(PLUGIN_ID)])\n      .then(([, setting]) => {\n        // Setting registry.\n        loadSetting(setting);\n        setting.changed.connect(loadSetting);\n\n        // Install commands.\n        installCommands(app, palette, translator, tracker);\n      })\n      .catch(reason => {\n        console.error(\n          `Something went wrong when reading the settings.\\n${reason}`\n        );\n      });\n  }\n};\n\nexport default plugin;\n"],"names":[],"sourceRoot":""}