[tool.poetry]
name = "sheesh"
version = "0.0.2"
description = "a collection of useful tools to perform tasks in the command line"
authors = ["James <jsingizi7@gmail.com>"]
readme = "README.md"
license = "MIT"
classifiers = [
	"Programming Language :: Python :: 3",
	"License :: OSI Approved :: MIT License",
	"Operating System :: OS Independent",
]
keywords = ["sheesh"]

[project.urls]
Homepage = "https://github.com/jamessingizi/sheesh"
Issues = "https://github.com/jamessingizi/sheesh/issues"

[tool.poetry.scripts]
sheesh = "sheesh.main:app"


[tool.poetry.dependencies]
python = "^3.9"
typer = {extras = ["all"], version = "^0.9.0"}
ulid-py = "^1.1.0"
bcrypt = "^4.1.2"
pycryptodome = "^3.20.0"
mnemonic="^0.21"

[tool.poetry.dev-dependencies]
pytest = "^8.0.0"
ruff = "^0.2.1"
mypy = "^1.8.0"
poethepoet = "^0.24.4"
pytest-cov = "^4.1.0"
pre-commit = "^3.6.0"


[tool.mypy]
mypy_path = "stubs"
python_version = 3.12
ignore_missing_imports = true
disallow_any_generics = false  # Use List[int] instead of List or list
namespace_packages = true      # For OpenTelemetry to work
disallow_untyped_defs = true   # All functions should have type annotations
warn_redundant_casts = true    # Casting a variable to its own type is disallowed
strict_equality = true         # Error if both sides of a comparison are unequal
strict_optional = false        # Treat `None` as a legal value for every type.
disallow_untyped_calls = false # Don't allow calling untyped functions from typed ones
warn_return_any = true         # Don't allow returning Any from a typed function
disallow_any_unimported = true # Show warning when missing type hints cause an imported object to be Any
warn_unreachable = true        # Warn on unreachable code
enable_error_code = "redundant-expr" # Warn on redundant expressions

[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = false


[tool.ruff]
line-length = 120


[tool.black]
line-length = 119
target-version = ['py311']
include = '\.pyi?$'


[tool.isort]
profile = "black"
multi_line_output = 3
combine_as_imports = true


[tool.poe.tasks]
test = "pytest --cov-report term-missing --cov-config=.coveragerc --cov=sheesh --disable-warnings"
test-html = "pytest --cov-report html --cov-config=.coveragerc --cov=sheesh --disable-warnings"
"lint:ruff" = "ruff check sheesh/ tests/"
"lint:black" = "black --check --diff ."
"lint:mypy"  = "mypy sheesh/ tests/"
lint = ["lint:ruff", "lint:mypy", "lint:black"]
"fix:ruff" = "ruff check sheesh/ tests/ --fix"
"fix:black" = "black ."
"fix:isort" = "isort ."
fix = ["fix:ruff", "fix:black", "fix:isort"]


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
