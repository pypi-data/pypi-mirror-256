# generated by datamodel-codegen:
#   filename:  events/eventFilterRule.json
#   timestamp: 2024-02-12T13:53:26+00:00

from __future__ import annotations

from enum import Enum
from typing import Optional

from pydantic import BaseModel, Extra, Field

from ..type import basic


class Effect(Enum):
    include = 'include'
    exclude = 'exclude'


class EventFilterRule(BaseModel):
    class Config:
        extra = Extra.forbid

    name: Optional[str] = Field(None, description='Name of this Event Filter.')
    fullyQualifiedName: Optional[basic.FullyQualifiedEntityName] = Field(
        None,
        description='FullyQualifiedName in the form `eventSubscription.eventFilterRuleName`.',
    )
    description: Optional[basic.Markdown] = Field(
        None, description='Description of the Event Filter Rule.'
    )
    effect: Effect
    condition: basic.Expression = Field(
        ...,
        description='Expression in SpEL used for matching of a `Rule` based on entity, resource, and environmental attributes.',
    )
