# generated by datamodel-codegen:
#   filename:  metadataIngestion/storageServiceMetadataPipeline.json
#   timestamp: 2024-02-12T13:53:26+00:00

from __future__ import annotations

from enum import Enum
from typing import Optional, Union

from pydantic import BaseModel, Extra, Field

from ..type import filterPattern
from .storage import (
    storageMetadataADLSConfig,
    storageMetadataHttpConfig,
    storageMetadataLocalConfig,
    storageMetadataS3Config,
)


class StorageMetadataConfigType(Enum):
    StorageMetadata = 'StorageMetadata'


class NoMetadataConfigurationSource(BaseModel):
    pass

    class Config:
        extra = Extra.forbid


class StorageServiceMetadataPipeline(BaseModel):
    class Config:
        extra = Extra.forbid

    type: Optional[StorageMetadataConfigType] = Field(
        StorageMetadataConfigType.StorageMetadata, description='Pipeline type'
    )
    containerFilterPattern: Optional[filterPattern.FilterPattern] = Field(
        None, description='Regex to only fetch containers that matches the pattern.'
    )
    storageMetadataConfigSource: Optional[
        Union[
            NoMetadataConfigurationSource,
            storageMetadataLocalConfig.StorageMetadataLocalConfig,
            storageMetadataHttpConfig.StorageMetadataHttpConfig,
            storageMetadataS3Config.StorageMetadataS3Config,
            storageMetadataADLSConfig.StorageMetadataAdlsConfig,
        ]
    ] = Field(None, title='Storage Metadata Configuration Source')
