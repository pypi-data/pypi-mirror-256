"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ...models.components import agent as components_agent
from dataclasses_json import Undefined, dataclass_json
from typing import Optional, Union
from retellclient import utils


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateAgentRequestBody:
    llm_websocket_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('llm_websocket_url'), 'exclude': lambda f: f is None }})
    r"""The URL we will establish LLM websocket for getting response, usually your server."""
    enable_backchannel: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enable_backchannel'), 'exclude': lambda f: f is None }})
    r"""Controls whether the agent would backchannel (agent interjects the speaker with phrases like "yeah", "uh-huh" to signify interest and engagement)."""
    voice_temperature: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('voice_temperature'), 'exclude': lambda f: f is None }})
    r"""Controls how stable the voice is."""
    voice_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('voice_id'), 'exclude': lambda f: f is None }})
    r"""Unique voice id used for the agent. """
    agent_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('agent_name'), 'exclude': lambda f: f is None }})
    r"""Name of agent."""
@dataclasses.dataclass
class UpdateAgentRequest:
    agent_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'agent_id', 'style': 'simple', 'explode': False }})
    r"""Unique id of the agent to be updated."""
    request_body: UpdateAgentRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})


@dataclasses.dataclass
class UpdateAgentResponse:
    content_type: str = dataclasses.field()
    r"""HTTP response content type for this operation"""
    raw_response: requests_http.Response = dataclasses.field()
    r"""Raw HTTP response; suitable for custom response parsing"""
    status_code: int = dataclasses.field()
    r"""HTTP response status code for this operation"""
    agent: Optional[components_agent.Agent] = dataclasses.field(default=None)
    r"""Successfully registered the call"""
    

