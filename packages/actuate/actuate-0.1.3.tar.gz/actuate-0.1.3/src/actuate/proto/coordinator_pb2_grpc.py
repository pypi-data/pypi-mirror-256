# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from proto import coordinator_pb2 as proto_dot_coordinator__pb2


class CoordinatorServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ScheduleTask = channel.unary_unary(
            "/coordinator.CoordinatorService/ScheduleTask",
            request_serializer=proto_dot_coordinator__pb2.ScheduleTaskRequest.SerializeToString,
            response_deserializer=proto_dot_coordinator__pb2.ScheduleTaskResponse.FromString,
        )
        self.AwaitTaskResult = channel.unary_unary(
            "/coordinator.CoordinatorService/AwaitTaskResult",
            request_serializer=proto_dot_coordinator__pb2.AwaitTaskResultRequest.SerializeToString,
            response_deserializer=proto_dot_coordinator__pb2.AwaitTaskResultResponse.FromString,
        )
        self.GetNextTask = channel.unary_unary(
            "/coordinator.CoordinatorService/GetNextTask",
            request_serializer=proto_dot_coordinator__pb2.GetNextTaskRequest.SerializeToString,
            response_deserializer=proto_dot_coordinator__pb2.GetNextTaskResponse.FromString,
        )
        self.RegisterTaskStarted = channel.unary_unary(
            "/coordinator.CoordinatorService/RegisterTaskStarted",
            request_serializer=proto_dot_coordinator__pb2.RegisterTaskStartedRequest.SerializeToString,
            response_deserializer=proto_dot_coordinator__pb2.RegisterTaskStartedResponse.FromString,
        )
        self.RegisterTaskFailed = channel.unary_unary(
            "/coordinator.CoordinatorService/RegisterTaskFailed",
            request_serializer=proto_dot_coordinator__pb2.RegisterTaskFailedRequest.SerializeToString,
            response_deserializer=proto_dot_coordinator__pb2.RegisterTaskFailedResponse.FromString,
        )
        self.RegisterTaskCompleted = channel.unary_unary(
            "/coordinator.CoordinatorService/RegisterTaskCompleted",
            request_serializer=proto_dot_coordinator__pb2.RegisterTaskCompletedRequest.SerializeToString,
            response_deserializer=proto_dot_coordinator__pb2.RegisterTaskCompletedResponse.FromString,
        )
        self.UpdateTaskRunProgress = channel.unary_unary(
            "/coordinator.CoordinatorService/UpdateTaskRunProgress",
            request_serializer=proto_dot_coordinator__pb2.UpdateTaskRunProgressRequest.SerializeToString,
            response_deserializer=proto_dot_coordinator__pb2.UpdateTaskRunProgressResponse.FromString,
        )
        self.QueryScheduledTask = channel.unary_unary(
            "/coordinator.CoordinatorService/QueryScheduledTask",
            request_serializer=proto_dot_coordinator__pb2.QueryScheduledTaskRequest.SerializeToString,
            response_deserializer=proto_dot_coordinator__pb2.QueryScheduledTaskResponse.FromString,
        )
        self.ListWorkflowRuns = channel.unary_stream(
            "/coordinator.CoordinatorService/ListWorkflowRuns",
            request_serializer=proto_dot_coordinator__pb2.ListWorkflowRunsRequest.SerializeToString,
            response_deserializer=proto_dot_coordinator__pb2.ListWorkflowRunsResponse.FromString,
        )
        self.WatchWorkflowRun = channel.unary_stream(
            "/coordinator.CoordinatorService/WatchWorkflowRun",
            request_serializer=proto_dot_coordinator__pb2.WatchWorkflowRunRequest.SerializeToString,
            response_deserializer=proto_dot_coordinator__pb2.GetWorkflowRunResponse.FromString,
        )
        self.GetWorkflowRun = channel.unary_unary(
            "/coordinator.CoordinatorService/GetWorkflowRun",
            request_serializer=proto_dot_coordinator__pb2.GetWorkflowRunRequest.SerializeToString,
            response_deserializer=proto_dot_coordinator__pb2.GetWorkflowRunResponse.FromString,
        )
        self.RegisterNewRunFromExisting = channel.unary_unary(
            "/coordinator.CoordinatorService/RegisterNewRunFromExisting",
            request_serializer=proto_dot_coordinator__pb2.RegisterNewRunFromExistingRequest.SerializeToString,
            response_deserializer=proto_dot_coordinator__pb2.RegisterNewRunFromExistingResponse.FromString,
        )


class CoordinatorServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ScheduleTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def AwaitTaskResult(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetNextTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def RegisterTaskStarted(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def RegisterTaskFailed(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def RegisterTaskCompleted(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def UpdateTaskRunProgress(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def QueryScheduledTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListWorkflowRuns(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def WatchWorkflowRun(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetWorkflowRun(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def RegisterNewRunFromExisting(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_CoordinatorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "ScheduleTask": grpc.unary_unary_rpc_method_handler(
            servicer.ScheduleTask,
            request_deserializer=proto_dot_coordinator__pb2.ScheduleTaskRequest.FromString,
            response_serializer=proto_dot_coordinator__pb2.ScheduleTaskResponse.SerializeToString,
        ),
        "AwaitTaskResult": grpc.unary_unary_rpc_method_handler(
            servicer.AwaitTaskResult,
            request_deserializer=proto_dot_coordinator__pb2.AwaitTaskResultRequest.FromString,
            response_serializer=proto_dot_coordinator__pb2.AwaitTaskResultResponse.SerializeToString,
        ),
        "GetNextTask": grpc.unary_unary_rpc_method_handler(
            servicer.GetNextTask,
            request_deserializer=proto_dot_coordinator__pb2.GetNextTaskRequest.FromString,
            response_serializer=proto_dot_coordinator__pb2.GetNextTaskResponse.SerializeToString,
        ),
        "RegisterTaskStarted": grpc.unary_unary_rpc_method_handler(
            servicer.RegisterTaskStarted,
            request_deserializer=proto_dot_coordinator__pb2.RegisterTaskStartedRequest.FromString,
            response_serializer=proto_dot_coordinator__pb2.RegisterTaskStartedResponse.SerializeToString,
        ),
        "RegisterTaskFailed": grpc.unary_unary_rpc_method_handler(
            servicer.RegisterTaskFailed,
            request_deserializer=proto_dot_coordinator__pb2.RegisterTaskFailedRequest.FromString,
            response_serializer=proto_dot_coordinator__pb2.RegisterTaskFailedResponse.SerializeToString,
        ),
        "RegisterTaskCompleted": grpc.unary_unary_rpc_method_handler(
            servicer.RegisterTaskCompleted,
            request_deserializer=proto_dot_coordinator__pb2.RegisterTaskCompletedRequest.FromString,
            response_serializer=proto_dot_coordinator__pb2.RegisterTaskCompletedResponse.SerializeToString,
        ),
        "UpdateTaskRunProgress": grpc.unary_unary_rpc_method_handler(
            servicer.UpdateTaskRunProgress,
            request_deserializer=proto_dot_coordinator__pb2.UpdateTaskRunProgressRequest.FromString,
            response_serializer=proto_dot_coordinator__pb2.UpdateTaskRunProgressResponse.SerializeToString,
        ),
        "QueryScheduledTask": grpc.unary_unary_rpc_method_handler(
            servicer.QueryScheduledTask,
            request_deserializer=proto_dot_coordinator__pb2.QueryScheduledTaskRequest.FromString,
            response_serializer=proto_dot_coordinator__pb2.QueryScheduledTaskResponse.SerializeToString,
        ),
        "ListWorkflowRuns": grpc.unary_stream_rpc_method_handler(
            servicer.ListWorkflowRuns,
            request_deserializer=proto_dot_coordinator__pb2.ListWorkflowRunsRequest.FromString,
            response_serializer=proto_dot_coordinator__pb2.ListWorkflowRunsResponse.SerializeToString,
        ),
        "WatchWorkflowRun": grpc.unary_stream_rpc_method_handler(
            servicer.WatchWorkflowRun,
            request_deserializer=proto_dot_coordinator__pb2.WatchWorkflowRunRequest.FromString,
            response_serializer=proto_dot_coordinator__pb2.GetWorkflowRunResponse.SerializeToString,
        ),
        "GetWorkflowRun": grpc.unary_unary_rpc_method_handler(
            servicer.GetWorkflowRun,
            request_deserializer=proto_dot_coordinator__pb2.GetWorkflowRunRequest.FromString,
            response_serializer=proto_dot_coordinator__pb2.GetWorkflowRunResponse.SerializeToString,
        ),
        "RegisterNewRunFromExisting": grpc.unary_unary_rpc_method_handler(
            servicer.RegisterNewRunFromExisting,
            request_deserializer=proto_dot_coordinator__pb2.RegisterNewRunFromExistingRequest.FromString,
            response_serializer=proto_dot_coordinator__pb2.RegisterNewRunFromExistingResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "coordinator.CoordinatorService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class CoordinatorService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ScheduleTask(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/coordinator.CoordinatorService/ScheduleTask",
            proto_dot_coordinator__pb2.ScheduleTaskRequest.SerializeToString,
            proto_dot_coordinator__pb2.ScheduleTaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def AwaitTaskResult(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/coordinator.CoordinatorService/AwaitTaskResult",
            proto_dot_coordinator__pb2.AwaitTaskResultRequest.SerializeToString,
            proto_dot_coordinator__pb2.AwaitTaskResultResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetNextTask(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/coordinator.CoordinatorService/GetNextTask",
            proto_dot_coordinator__pb2.GetNextTaskRequest.SerializeToString,
            proto_dot_coordinator__pb2.GetNextTaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def RegisterTaskStarted(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/coordinator.CoordinatorService/RegisterTaskStarted",
            proto_dot_coordinator__pb2.RegisterTaskStartedRequest.SerializeToString,
            proto_dot_coordinator__pb2.RegisterTaskStartedResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def RegisterTaskFailed(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/coordinator.CoordinatorService/RegisterTaskFailed",
            proto_dot_coordinator__pb2.RegisterTaskFailedRequest.SerializeToString,
            proto_dot_coordinator__pb2.RegisterTaskFailedResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def RegisterTaskCompleted(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/coordinator.CoordinatorService/RegisterTaskCompleted",
            proto_dot_coordinator__pb2.RegisterTaskCompletedRequest.SerializeToString,
            proto_dot_coordinator__pb2.RegisterTaskCompletedResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def UpdateTaskRunProgress(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/coordinator.CoordinatorService/UpdateTaskRunProgress",
            proto_dot_coordinator__pb2.UpdateTaskRunProgressRequest.SerializeToString,
            proto_dot_coordinator__pb2.UpdateTaskRunProgressResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def QueryScheduledTask(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/coordinator.CoordinatorService/QueryScheduledTask",
            proto_dot_coordinator__pb2.QueryScheduledTaskRequest.SerializeToString,
            proto_dot_coordinator__pb2.QueryScheduledTaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ListWorkflowRuns(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/coordinator.CoordinatorService/ListWorkflowRuns",
            proto_dot_coordinator__pb2.ListWorkflowRunsRequest.SerializeToString,
            proto_dot_coordinator__pb2.ListWorkflowRunsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def WatchWorkflowRun(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/coordinator.CoordinatorService/WatchWorkflowRun",
            proto_dot_coordinator__pb2.WatchWorkflowRunRequest.SerializeToString,
            proto_dot_coordinator__pb2.GetWorkflowRunResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetWorkflowRun(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/coordinator.CoordinatorService/GetWorkflowRun",
            proto_dot_coordinator__pb2.GetWorkflowRunRequest.SerializeToString,
            proto_dot_coordinator__pb2.GetWorkflowRunResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def RegisterNewRunFromExisting(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/coordinator.CoordinatorService/RegisterNewRunFromExisting",
            proto_dot_coordinator__pb2.RegisterNewRunFromExistingRequest.SerializeToString,
            proto_dot_coordinator__pb2.RegisterNewRunFromExistingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
