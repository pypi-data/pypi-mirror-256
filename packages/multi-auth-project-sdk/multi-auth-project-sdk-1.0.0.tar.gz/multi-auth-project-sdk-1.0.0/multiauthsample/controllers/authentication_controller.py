# -*- coding: utf-8 -*-

"""
multiauthsample

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from deprecation import deprecated
from multiauthsample.api_helper import APIHelper
from multiauthsample.configuration import Server
from multiauthsample.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from multiauthsample.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from multiauthsample.models.service_status import ServiceStatus
from multiauthsample.models.user import User


class AuthenticationController(BaseController):

    """A Controller to access Endpoints in the multiauthsample API."""
    def __init__(self, config):
        super(AuthenticationController, self).__init__(config)

    def o_auth_bearer_token(self):
        """Does a GET request to /auth/oauth2.

        TODO: type endpoint description here.

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/auth/oauth2')
            .http_method(HttpMethodEnum.GET)
            .auth(Single('OAuthBearerToken'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
        ).execute()

    def custom_authentication(self):
        """Does a GET request to /auth/customAuthentication.

        TODO: type endpoint description here.

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/auth/customAuthentication')
            .http_method(HttpMethodEnum.GET)
            .auth(Single('CustomAuth'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
        ).execute()

    def custom_query_or_header_authentication(self):
        """Does a GET request to /auth/customQueryOrHeaderParam.

        TODO: type endpoint description here.

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/auth/customQueryOrHeaderParam')
            .http_method(HttpMethodEnum.GET)
            .auth(Or(Single('apiKey'), Single('apiHeader')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
        ).execute()

    def o_auth_grant_types_or_combinations(self):
        """Does a GET request to /oauth2/oauthOrCombination.

        This endpoint tests or combinations of OAuth types

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/oauth2/oauthOrCombination')
            .http_method(HttpMethodEnum.GET)
            .auth(Or(Single('OAuthCCG'), Single('OAuthBearerToken')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
        ).execute()

    @deprecated(
        deprecated_in='0.0.1-alpha',
        details='   You should not use this method as it requires no auth and c'
                'an bring security issues to the server and api call itself!!'
    )
    def no_auth(self):
        """Does a GET request to /auth/noAuth.

        This endpoint does not use auth.

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/auth/noAuth')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('array')
                         .value(True))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
        ).execute()

    def o_auth_client_credentials_grant(self):
        """Does a GET request to /oauth2/non-auth-server/status.

        TODO: type endpoint description here.

        Returns:
            ServiceStatus: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/oauth2/non-auth-server/status')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('OAuthCCG'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ServiceStatus.from_dictionary)
        ).execute()

    def basic_auth_and_api_header_auth(self):
        """Does a GET request to /auth/basicAndApiKeyAndApiHeader.

        TODO: type endpoint description here.

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/auth/basicAndApiKeyAndApiHeader')
            .http_method(HttpMethodEnum.GET)
            .auth(And(Single('basicAuth'), Single('apiKey'), Single('apiHeader')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
        ).execute()

    def o_auth_authorization_grant(self):
        """Does a GET request to /oauth2/non-auth-server/user.

        TODO: type endpoint description here.

        Returns:
            User: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/oauth2/non-auth-server/user')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(And(Single('OAuthACG'), Single('OAuthROPCG')))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(User.from_dictionary)
        ).execute()

    @deprecated()
    def multiple_auth_combination(self):
        """Does a GET request to /auth/multipleAuthCombination.

        This endpoint uses globally applied auth which is a hypothetical
        scneraio but covers the worst case.

        Returns:
            str: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/auth/multipleAuthCombination')
            .http_method(HttpMethodEnum.GET)
            .auth(Or(Single('CustomAuth'), Single('OAuthBearerToken'), And(Single('basicAuth'), Single('apiKey'), Single('apiHeader'))))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
        ).execute()
