# coding: utf-8

"""
    VRt.Account [AC]

    # Description  Veeroute Account Panel.  ## Entity relationship diagram  ![erd](../uml/account.svg) 

    The version of the OpenAPI document: 6.20.2252
    Contact: servicedesk@veeroute.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from vrt_lss_account.models.date_statistics import DateStatistics

class UserStatistics(BaseModel):
    """
    Usage service statistics by the specific user.  # noqa: E501
    """
    username: Annotated[str, Field(min_length=2, strict=True, max_length=256)] = Field(description="Login, unique identifier.")
    dates: Annotated[List[DateStatistics], Field(min_length=0, max_length=3653)] = Field(description="Statistics list for each day for the specified user.")
    __properties = ["username", "dates"]

    @validator('username')
    def username_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"\w+", value):
            raise ValueError(r"must validate the regular expression /\w+/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UserStatistics:
        """Create an instance of UserStatistics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in dates (list)
        _items = []
        if self.dates:
            for _item in self.dates:
                if _item:
                    _items.append(_item.to_dict())
            _dict['dates'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UserStatistics:
        """Create an instance of UserStatistics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UserStatistics.parse_obj(obj)

        _obj = UserStatistics.parse_obj({
            "username": obj.get("username"),
            "dates": [DateStatistics.from_dict(_item) for _item in obj.get("dates")] if obj.get("dates") is not None else None
        })
        return _obj


