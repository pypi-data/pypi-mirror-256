# coding: utf-8

"""
    VRt.Account [AC]

    # Description  Veeroute Account Panel.  ## Entity relationship diagram  ![erd](../uml/account.svg) 

    The version of the OpenAPI document: 6.20.2252
    Contact: servicedesk@veeroute.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from vrt_lss_account.models.user_role import UserRole

class TokenValidationResult(BaseModel):
    """
    Token validation result.  # noqa: E501
    """
    valid: StrictBool = Field(description="Token status.")
    roles: Optional[Annotated[List[UserRole], Field(min_length=0, max_length=2)]] = Field(default=None, description="List of user roles.")
    __properties = ["valid", "roles"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TokenValidationResult:
        """Create an instance of TokenValidationResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TokenValidationResult:
        """Create an instance of TokenValidationResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TokenValidationResult.parse_obj(obj)

        _obj = TokenValidationResult.parse_obj({
            "valid": obj.get("valid") if obj.get("valid") is not None else False,
            "roles": obj.get("roles")
        })
        return _obj


