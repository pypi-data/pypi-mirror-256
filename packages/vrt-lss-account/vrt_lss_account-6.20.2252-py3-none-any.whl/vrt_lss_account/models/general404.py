# coding: utf-8

"""
    VRt.Account [AC]

    # Description  Veeroute Account Panel.  ## Entity relationship diagram  ![erd](../uml/account.svg) 

    The version of the OpenAPI document: 6.20.2252
    Contact: servicedesk@veeroute.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from vrt_lss_account.models.general404_detail import General404Detail

class General404(BaseModel):
    """
    404 Error details.  # noqa: E501
    """
    resource_id: Optional[StrictStr] = Field(default=None, description="Resource identifier.")
    detail: Optional[General404Detail] = None
    __properties = ["resource_id", "detail"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> General404:
        """Create an instance of General404 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of detail
        if self.detail:
            _dict['detail'] = self.detail.to_dict()
        # set to None if resource_id (nullable) is None
        # and __fields_set__ contains the field
        if self.resource_id is None and "resource_id" in self.__fields_set__:
            _dict['resource_id'] = None

        # set to None if detail (nullable) is None
        # and __fields_set__ contains the field
        if self.detail is None and "detail" in self.__fields_set__:
            _dict['detail'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> General404:
        """Create an instance of General404 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return General404.parse_obj(obj)

        _obj = General404.parse_obj({
            "resource_id": obj.get("resource_id"),
            "detail": General404Detail.from_dict(obj.get("detail")) if obj.get("detail") is not None else None
        })
        return _obj


