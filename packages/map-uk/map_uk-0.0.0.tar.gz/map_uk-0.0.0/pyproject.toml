[tool.poetry]
name = "map-uk"
version = "0.0.0"
description = "Quickly create maps of the UK in Python"
authors = ["Jordan Pinder <jordan.pinder.dev@gmail.com>"]
repository = "https://github.com/jap546/map-uk"
readme = "README.md"
packages = [
  {include = "map_uk"}
]

[tool.poetry.dependencies]
python = ">=3.9,<3.12"
folium = "^0.15.0"
tqdm = "^4.66.1"
geopandas = "^0.14.1"
topojson = "^1.7"
pandas = "^2.1.3"
requests = "^2.31.0"
jenkspy = "^0.4.0"

[tool.poetry.group.dev.dependencies]
# runner
tox = "^4.11.1"
# format
black = "^23.1.0"
isort = "^5.12.0"
# lint
ruff = ">=0.0.291"
# typecheck
mypy = "^1.0.1"
typing-extensions = "^4.5.0"
types-requests = "^2.28.11.13"
# test
pytest = "^7.2.1"
pytest-cov = "^4.0.0"
pytest-mock = "^3.10.0"
pygments = "^2.14.0"
# env
python-dotenv = "^1.0.0"
types-toml = "^0.10.8.7"
ipykernel = "^6.27.1"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.4.2"
mkdocs-material = "^9.2.7"
mkdocstrings = {extras = ["python"], version = "^0.23.0"}

[tool.poetry.group.typing.dependencies]
pandas-stubs = "^2.1.1.230928"
types-requests = "^2.31.0.10"
types-tqdm = "^4.66.0.5"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = "py310"
preview = true

[tool.mypy]
files = ["map_uk"]
disallow_untyped_defs = "True"
disallow_any_unimported = "False"
no_implicit_optional = "True"
check_untyped_defs = "True"
warn_return_any = "False"
warn_unused_ignores = "True"
show_error_codes = "True"
strict = true
explicit_package_bases = true

[tool.pytest.ini_options]
testpaths = ["tests"]

[tool.coverage.paths]
source = ["map_uk"]

[tool.coverage.report]
skip_empty = true
show_missing = true
fail_under = 100

[tool.coverage.run]
branch = true
source = ["map_uk"]

[tool.ruff]
line-length = 88
target-version = "py310"
fix = true
select = [
    "A", # flake8-builtins (redefinition of bultins)
    "ANN", # flake8-annotations (type annotations are everywhere)
    "ARG", # flake8-unused-arguments (unused argument in function/method/class/lambda)
    "B", # flake8-bugbear (bugs & design problems)
    "B9", # flake8-bugbear strict (bugs & design problems)
    "BLE", # flake8-blind-except (no "except:" or "except Exception:")
    # "COM", # flake8-commas (force trailing commas) -> unelegant
    "C4", # flake8-comprehensions (better list/set/dict comprehensions)
    "C90", # McCabe (code complexity)
    "D", # pydocstyle (documentation style)
    "DJ", # flake8-django (practices on Django)
    "DTZ", # flake8-datetimez (usage of unsafe naive datetime class)
    "E", # pycodestyle (violation of PEP-8)
    "EM", # flake8-errmsg (format error messages)
    "EXE", # flake8-executable (executable permissions and shebangs)
    "ERA", # eradicate (no commented-out code)
    "F", # pyflakes (invalid Python code)
    "FBT", # flake8-boolean-trap (misusage of booleans in function declaration & calls)
    "G", # flake8-logging-format (logging format strings)
    "I", # isort (import order)
    "ICN", # flake8-import-conventions (how certain packages should be imported or aliased)
    # "INP", # flake8-no-pep420 (ban PEP-420 implicit namespace packages) -> long live implicit namespace packages!
    "INT", # flake8-gettext (f-string resolved before function calls)
    "ISC", # flake8-implicit-str-concat (string literal concatenation)
    "N", # pep8-naming (naming conventions)
    "NPY", # NumPy-specific rules (e.g. deprecated-type-alias and legacy-random)
    "PD", # pandas-vet (pandas code)
    "PIE", # flake8-pie (miscellaneous lints)
    "PGH", # pygrep-hooks (miscellaneous lints, e.g. "use specific rule codes when using noqa")
    "PL", # Pylint (static code analyser)
    "PT", # flake8-pytest-style (style issues or inconsistencies with pytest-based tests)
    "PTH", # flake8-use-pathlib (use of functions that can be replaced by pathlib module)
    "PYI", # flake8-pyi (provide specializations for type hinting stub files)
    "Q0", # flake8-quotes (avoid escaping quotes)
    "RSE", # flake8-raise (improvements for raise statements)
    "RET", # flake8-return (check return values)
    "RUF", # ruff-specific rules
    "S", # flake8-bandit (security)
    "SIM", # flake8-simplify (tips to simplify the code)
    "SLF", # flake8-self (private member access)
    "T10", # flake8-debugger
    "T20", # flake8-print (no print nor pprint)
    "TCH", # flake8-type-checking (move import only intended for type-checking in "if TYPE_CHECKING" blocs)
    "TID", # flake8-tidy-imports (ordonated imports)
    "TRY", # tryceratops (exception handling AntiPatterns)
    "UP", # pyupgrade (upgrate syntax for newer versions of Python)
    "YTT", # flake8-2020 (misuse of sys.version and sys.version_info)
    "W" # pycodestyle (violation of PEP-8)
]
ignore = [
    "ANN101", # missing type annotation for self, but hinting self all the time is useless
    "ANN102", # missing type annotation for cls but hinting cls all the time is useless
    "ANN401", # disallows Any, but some elements should be Any when they are external
    "B024", # forces abstract classes to have at least one abstract method, but sometimes a class is virtually abstract
    "D100", # Missing docstring in public module
    "D105", # docstrings on magic methods, useless docstrings are well known
    "DTZ011", # naive datetime is used, but it's OK for the user to use it
    "E501", # line size, but bug-bear already set it with a tolerance of 10% (B950)
    "TCH001", # ignore import only for type-checking in "if TYPE_CHECKING" blocks
    "UP007", # ignore or-wise typing for py3.9 support
    "UP035", # allow use of typing.Callable
]

[tool.ruff.per-file-ignores]
"docs/conf.py" = [
    "A001" # redefine some builtins (like "copyright") is OK in docs
]
"noxfile.py" = [
    "D402" # repeating the name of the function is OK for nox since it's to display it to the user
]
"tests/*" = [
    "ARG", # some arguments are unused in tests functions but useful (e.g. mocks)
    "S101", # asserts are OK for tests
    "SLF001" # accessing private members is OK for tests
]

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.isort]
known-first-party = ["map_uk"]
required-imports = ["from __future__ import annotations"]
